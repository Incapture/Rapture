/**
 * Copyright (C) 2011-2015 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package rapture.api.checkout;

import java.util.Arrays;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.categories.Category;

import rapture.common.CallingContext;
import rapture.common.MongoDbTests;
import rapture.common.TableQueryResult;
import rapture.common.exception.RaptureException;
import rapture.kernel.ContextFactory;
import rapture.kernel.Kernel;
import rapture.config.MultiValueConfigLoader;
import rapture.config.ValueReader;

/**
 * This integration test requires an attached MongoDB instance, and it uses this
 * to create a document repo and associated index.
 * 
 * It then creates a few documents in that repo and queries the associated
 * index for output.
 * 
 * @author amkimian
 * 
 */
@Category(MongoDbTests.class) 
public class IndexIntegrationTest {
    private static CallingContext ctx = ContextFactory.getKernelUser();
    private static String REPO = "//integration.testIndex";
    private static String REPOCFG = "NREP {} USING MONGODB { prefix=\"itest.testIndex\" }";
    private static String INDEXCFG = "planet($0) string, moon($1) string, fieldOne(one) string, fieldTwo(two) string, fieldInner(inner.alpha) string";

    @Before
    public void setup() {
        MultiValueConfigLoader.setEnvReader(new ValueReader() {

            @Override
            public String getValue(String property) {
                if (property.equals("MONGODB-DEFAULT")) {
                    return "mongodb://rapture:rapture@localhost/RaptureMongoDB";
                }
                return null;
            }

        });
        try {
            Kernel.initBootstrap(null, null, true);
            Kernel.getDoc().createDocRepo(ctx, REPO, REPOCFG);
            Kernel.getIndex().createIndex(ctx, REPO, INDEXCFG);
        } catch (RaptureException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void addAndQueryDocuments() {
        addDocument("Mercury", "None", "1", "5", "A");
        addDocument("Venus", "None", "10", "5", "A");
        addDocument("Earth", "Moon", "10", "4", "B");
        addDocument("Mars", "Phobos", "15", "2", "C");
        addDocument("Mars", "Deimos", "16", "2", "D");

        TableQueryResult res = Kernel.getIndex().findIndex(ctx, REPO, "SELECT planet, fieldOne WHERE fieldTwo=\"5\"");
        Assert.assertEquals(2, res.getRows().size());
        Assert.assertTrue(res.getRows().contains(Arrays.asList(new String[] {"Mercury", "1"})));
        Assert.assertTrue(res.getRows().contains(Arrays.asList(new String[] {"Venus", "10"})));
        System.out.println("Result is " + res);
        
        res = Kernel.getIndex().findIndex(ctx, REPO, "SELECT DISTINCT planet");
        System.out.println("Result is " + res);
        Assert.assertEquals(4, res.getRows().size());   // because Mars appears twice
        
        res = Kernel.getIndex().findIndex(ctx, REPO, "SELECT planet WHERE fieldOne=\"10\" AND fieldTwo=\"5\"");
        System.out.println("Result is " + res);
        Assert.assertEquals(1, res.getRows().size());
        Assert.assertTrue(res.getRows().contains(Arrays.asList(new String[] {"Venus"})));        
    }

    private void addDocument(String planet, String moon, String oneValue, String twoValue, String alphaValue) {
        String doc = String.format("{ \"one\" : \"%s\", \"two\" : \"%s\", \"inner\" : { \"alpha\" : \"%s\" } }", oneValue, twoValue, alphaValue);
        String uri = String.format("%s/%s/%s", REPO, planet, moon);
        Kernel.getDoc().putDoc(ctx, uri, doc);
    }

    @After
    public void tearDown() {
        Kernel.getDoc().deleteDocRepo(ctx, REPO);
        Kernel.getIndex().deleteIndex(ctx, REPO);
    }
}
