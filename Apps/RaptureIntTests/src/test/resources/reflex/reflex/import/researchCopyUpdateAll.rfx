// Update data for all tickers stored within bloomberg.config

import BloombergFTP as bloomberg with (";-FIRMNAME-dl786053;PASSWORD-xyGkWqLm;ENC-mM{2)tWd;FTPSITE-bfmrr.bloomberg.com");

def waitforresponse(responseID)
    finished = false;
    while !finished do
            status = $bloomberg.status(responseID);
            println("STATUS: " + status);
            if (status == "FINISHED" || status == "FINISHEDGZ") do
                finished = true;
            else do
                 sleep(3000);
            end
    end
    return $bloomberg.retrieve(responseID);
end

def replace(str, a, b)
	arr = str.split(a);
	newstr = '';
	idx = 0;
        for each in arr do
		if idx < size(arr) - 1 do
			newstr = newstr + each + b;
		else do
			newstr = newstr + each;
		end
		idx = idx + 1;
	end
	return newstr;
end

def formatdate(dt)
	arr = dt.split('/');
	newdt = arr[2] + arr[0] + arr[1];
	return newdt;
end

def checkval(val)
    if val == ' ' do
        return false;
    else if val == 'N.A.' do
        return false;
    else do
        return true;
    end
end

def processhistory(contents, input_dict)
	resps = [];
    println('create series data');
    if #series.doesSeriesRepoExist('//bloomberg.series') == false do
       #series.createSeriesRepo('//bloomberg.series', 'SREP {} USING CASSANDRA { keyspace="bloomberg", cf="series" }');
    end
    
    for item in contents do
        doc = input_dict[item['SECURITIES']];
		println('check status of item');
		if item['STATUS'] != '0' do
			continue;
		end
		println('check date');
        if item['DATE'] == ' ' do
            continue;
        end
        
		id = replace(doc['identifier'], ' ', '_');
        dt = formatdate(item['DATE']);
        println('loop through keys');
		for field in keys(item) do
			println('check if series fields');
			if field in doc['series_fields'] do
				val = item[field];
				valid = checkval(val);
                if !valid do
                    continue;
                end
                println('cast and check exception');
                try do
					val = cast(val, 'number');
				end
				catch e do
					print(e);
				end
				println('check type');
				type = typeof(val);
				
				if type == 'number' do
					println('add double to series');
                    resp = #series.addDoubleToSeries('//bloomberg.series/' + doc['prefix'] + '/' + id + '/' + field, dt, val);
					resps += resp;
				else do
					println('add string to series');
					resp = #series.addStringToSeries('//bloomberg.series/' + doc['prefix'] + '/' + id + '/' + field, dt, val);
					resps += resp;
				end
			end
		end
	end
	return resps;
end

def processdata(contents, input_dict)
	resps = [];
	for item in contents do
		doc = input_dict[item['SECURITIES']];
                if item['STATUS'] != '0' do
			continue;
		end
		id = replace(doc['identifier'], ' ', '_');
		new = {};
		for field in keys(item) do
			if field in doc['reference_fields'] do
				valid = checkval(item[field]);
                                if !valid do
                                    continue;
                                end
                                new[field] = item[field];
			else if field == 'SECURITIES' do
				new[field] = item[field];
			end
		end
		if #doc.doesDocumentRepoExist('//bloomberg.reference') == false do
	       #doc.createDocumentRepo('//bloomberg.reference', 'NREP {} USING MONGODB { prefix="bloomberg.reference" }');
        end
		resp = #doc.putContent('//bloomberg.reference/' + doc['prefix'] + '/' + id, json(new));
		resps += resp;
	end
	return resps;
end

children = #doc.getAllChildren('//bloomberg.configuration');

max_start_date = date("19500101");
start_date = date(date(), 'BDFAct') - 3;
end_date = date(date(), 'BDFAct');

reference_fields = [];
series_fields = [];
tickers = [];
updateTickers = [];
newTickers = [];
input_dict = {};

for each in children do
    println("URI> " + each);
    eachContent = #doc.getContent(each);
    println('We got data: ' + eachContent);
    doc = fromjson(eachContent);
    println('we got our json');
    
    if  doc == 'NULL' do
        println('continue we got folder');
        continue;
    end

    println('check if BBG');
    if doc['source'] != 'BBG' do
        continue;
    end
    // Create list for static pull
    println('add identifier to list');

    tickers += doc['identifier'];
    // Create list for update and new tickers
    
    println('check if current it present');
    
    if doc['current'] != null do 
        updateTickers += doc['identifier'];
    else do 
        newTickers += doc['identifier'];
    end
    println('move to working with ref fields');

    for field in doc['reference_fields'] do
        if field in reference_fields do
        else do
            reference_fields += field;
        end
    end
    for field in doc['series_fields'] do
        if field in series_fields do
        else do
            series_fields += field;
        end
    end
    input_dict[doc['identifier']] = doc;
end

def bucket_history_update(t, f, o, i, b)
    j = 0;
    while j < size(t) do 
        s = [];
	n = j + b;
        if n > (size(t)) do
            n = size(t);
	end
        for x in t[j .. n] do
            s += x;
	end
        j = j + b;
        print("Current tickers: " + s);
        hist_resp = $bloomberg.start(s, f, o);
        history_contents <-- waitforresponse(hist_resp);
        hist_check = processhistory(history_contents, i);
    end
    return true;
end
// Update static for all tickers

/**
data_options = { "PROGRAMFLAG": "oneshot", "PROGRAMNAME" : 'getdata', "SECMASTER" : 'yes', "CLOSINGVALUES" : 'yes', "DERIVED" : 'yes',
"ESTIMATES" : 'yes', "HISTORICAL" : 'no'};
data_resp = $bloomberg.start(tickers, reference_fields, data_options);
data_contents <-- waitforresponse(data_resp);
data_check = processdata(data_contents, input_dict);
**/

// Update history for updateTickers
hist_options = { "PROGRAMFLAG": "oneshot", "PROGRAMNAME" : 'gethistory', "DATERANGE" : start_date + '|' + end_date, "HIST_FORMAT":
'horizontal'};
p = bucket_history_update(updateTickers, series_fields, hist_options, input_dict, 100);


//hist_resp = $bloomberg.start(updateTickers, series_fields, hist_options);
//history_contents <-- waitforresponse(hist_resp);
//hist_check = processhistory(history_contents, input_dict);

//Create history for newTickers
hist_options = { "PROGRAMFLAG": "oneshot", "PROGRAMNAME" : 'gethistory', "DATERANGE" : max_start_date + '|' + end_date, "HIST_FORMAT":
'horizontal'};
p = bucket_history_update(newTickers, series_fields, hist_options, input_dict, 100);

//hist_resp = $bloomberg.start(newTickers, series_fields, hist_options);
//history_contents <-- waitforresponse(hist_resp);
//hist_check = processhistory(history_contents, input_dict);


// Mark all securities as current
children = #doc.getAllChildren('//bloomberg.configuration');
for each in children do
    doc = fromjson(#doc.getContent(each));
    doc['current'] = true;
    doc --> each;
end

return true;
