/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */


// this needs work

require "//reflexTest.scriptstore/commonFuncs.rfx" as comm;

// init the params we pass in
if !defined(_params) do
	_params = {};
	_params['assertDocRepo'] =  '//reflexTest.validation/testRun';
	_params['assertRepo'] =  '//reflexTest.validation';
	_params['assertRepoConfig'] = 'NREP {} using MONGODB {prefix="validate.reflexTestData"}';	
	_params['date'] = 'today';
	_params['docRepoURI'] = '//someAuthority.testingReflex';
	_params['config'] = 'NREP {} using MONGODB {prefix="data.docData"}';
	_params['docPath'] = 'theDoc';
	 
end 

assertDocRepoURI = _params['assertDocRepo'];
assertRepoURI = _params['assertRepo'];
assertConfig = _params['assertRepoConfig'];
TODAY = _params['date'];
docRepoConfig = _params['config']; 
docPath = _params['docPath'];
docRepoURI = _params['docRepoURI'];

//setup repos if they do not exist
//comm.init(assertRepoURI, assertConfig, docRepoURI, docRepoConfig);

//resultsData ={};
//CONFIG = 'NREP {} using MONGODB { prefix="docPartition.reflexTest" }';
//DOCUMENT_REPO_URI = 'document://documentPartition.reflexTest';

returnVal = true;

/*
*/



//----------------test------------------
//---------manipulation operators-------

//--------------Modulo------------------
println('\n---Test modulo---');
//resultsData['Test_exponent_operator']['result'] = 'pass';
for modn=1 to 5 do

	u=[];
	a=[];
	MAX=30;
	M3ans= [0];
	
	for i = 0 to MAX do
		a=a+i/10;
	end
	


	println('\nTest modulo '+modn/10+'\nBetween 0 and ' +MAX/10+ ' the following errors occurred');


	for n in a do 
		modf=modn/10;

		u=u+n%modf;
	end

	for i = 1 to MAX do

		if  M3ans[i-1]==modn/10-0.1 do
			M3ans=M3ans+0;
		else if M3ans[(i-1)] == 0.0 do 
			M3ans=M3ans+0.1;	
		else if M3ans[i-1]==0.1 do
			M3ans=M3ans+0.2;
		else if M3ans[i-1]==0.2 do
			M3ans=M3ans+0.3;
		else if M3ans[i-1]==0.3 do
			M3ans=M3ans+0.4;
		else if M3ans[i-1]==0.4 do
			M3ans=M3ans+0.5;
		else if M3ans[i-1]==0.5 do
			M3ans=M3ans+0.6;
		else if M3ans[i-1]==0.6 do
			M3ans=M3ans+0.7;
		else if M3ans[i-1]==0.7 do
			M3ans=M3ans+0.8;
		else if M3ans[i-1]==0.8 do
			M3ans=M3ans+0.9;
		else if M3ans[i-1]==0.9 do
			M3ans=M3ans+1.0;
		else if M3ans[i-1]==1.0 do
			M3ans=M3ans+1.1;
		end
		
		diff=round(u[i]-M3ans[i]);

		if cast(diff,'string') != '0.0' do 
			println(i/10+'mod'+modf+' is off by '+diff);
			//resultsData['Test_exponent_operator']['result'] = 'fail';
			returnVal = false;
		end

	end
end

//--------------exponent----------------
println('\n---Test double to the power of an integer---');
//resultsData['Test_exponent_operator']['result'] = 'pass';

for temp = 5 to 25 do

	base=temp/10;
	
	for i = 0 to 10 do
		ans = 1;
	
		for j = 1 to i do 
			ans= ans*base;
		end
	
		if base^i != ans do 
			//resultsData['Test_exponent_operator']['result'] = 'fail';
			println(base^i + '		'+ ans+ '		'+ base+'^'+i);
			returnVal = false;
		end
	end
end

println('Overall Results: ' + returnVal);

//----------------------------------------------------



//println ('Reporting results to: ' + assertDocRepoURI + '/05operatorsFloOpsTestScript.rfx/'+TODAY);
//resultsData --> assertDocRepoURI + '/05operatorsFloOpsTestScript.rfx/'+TODAY;
return returnVal;
