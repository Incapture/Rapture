/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */


// this needs work

//require "//reflexTest.scriptstore/commonFuncs.rfx" as comm;

// init the params we pass in
/*
if !defined(_params) do
	_params = {};
	_params['assertDocRepo'] =  '//reflexTest.validation/testRun';
	_params['assertRepo'] =  '//reflexTest.validation';
	_params['assertRepoConfig'] = 'NREP {} using MONGODB {prefix="validate.reflexTestData"}';	
	_params['date'] = 'today';
	_params['docRepoURI'] = '//someAuthority.testingReflex';
	_params['config'] = 'NREP {} using MONGODB {prefix="data.docData"}';
	_params['docPath'] = 'theDoc';
	 
end 

//assertDocRepoURI = _params['assertDocRepo'];
//assertRepoURI = _params['assertRepo'];
//assertConfig = _params['assertRepoConfig'];

TODAY = _params['date'];
if TODAY == '' do
	TODAY = Date();
end
//docRepoConfig = _params['config']; 
//docPath = _params['docPath'];
//docRepoURI = _params['docRepoURI'];

//setup repos if they do not exist
//comm.init(assertRepoURI, assertConfig, docRepoURI, docRepoConfig);

//---------- test -----------

resultsData ={};
keyspace='reflexTestKeySpace';
colFamily='seriesCfReflexTest';

CONFIG = 'SREP {} USING CASSANDRA {keyspace="' + keyspace + '", cf="' + colFamily + '"}';
SERIES_REPO_URI = 'series://seriesPartition.reflexTest';

println ('Test positive exist and create');
if (!(#series.seriesRepoExists(SERIES_REPO_URI))) do
	#series.createSeriesRepo(SERIES_REPO_URI, CONFIG);
end
resultsData['series_create_positive']['result']='pass';
resultsData['series_exists_positive']['result']='pass';
SERIES_URI = 'series://seriesPartition.reflexTest/testReflexSeries'+TODAY;
MAX=20;


*/

/*
println ('Test add and retrieve structs from series');
for currPoint = 0 to MAX do 
	#series.addStructureToSeries(SERIES_URI, 'structpoint'+currPoint,'{"val":"'+currPoint+'"}');
end

try do
	allPoints=#series.getPointsAsStrings(SERIES_URI,'structpoint0',MAX);
	allValues=allPoints.getValues();
	if (size(allValues)==MAX) do
		resultsData['series_structs_size_positive']['result'] = 'pass';
	else do
		resultsData['series_structs_size_positive']['result'] = 'fail';
	end
end
catch e do
	resultsData['series_structs_size_positive']['result'] = 'fail';
	resultsData['series_structs_size_positive']['message'] = e;
end
*/

/*
#series.deleteSeriesRepo(SERIES_REPO_URI);
*/
return true;