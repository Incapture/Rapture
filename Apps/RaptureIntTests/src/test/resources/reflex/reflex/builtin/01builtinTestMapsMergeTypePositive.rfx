/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/******************************************************
* This Reflex script will test the following Reflex built-in functions and keywords:
* - merge() > maps
* - mergeif() > maps
* - 'map'.remove() - using java object function call
* - keys() - needed in order to cycle through the map in a for loop
* -
*/

// Reflex script

// This is a test for Reflex to verify the flow of validating data created and 
// retrieved by reflex
//load common library
//require "//reflexTest.scriptstore/commonFuncs.rfx" as comm;

// init the params we pass in
if !defined(_params) do
	_params = {};
	_params['assertDocRepo'] =  '//reflexTest.validation/testRun';
	_params['assertRepo'] =  '//reflexTest.validation';
	_params['assertRepoConfig'] = 'NREP {} using MONGODB {prefix="validate.reflexTestData"}';	
	_params['date'] = 'today';
	_params['docRepoURI'] = '//someAuthority.testingReflex';
	_params['config'] = 'NREP {} using MONGODB {prefix="data.docData"}';
	_params['docPath'] = 'theDoc';
	 
end 

assertDocRepoURI = _params['assertDocRepo'];
assertRepoURI = _params['assertRepo'];
assertConfig = _params['assertRepoConfig'];
TODAY = _params['date'];
docRepoConfig = _params['config']; 
docPath = _params['docPath'];
docRepoURI = _params['docRepoURI'];

//println("our params: " + docRepoURI );

//setup repos if they do not exist
//comm.init(assertRepoURI, assertConfig, docRepoURI, docRepoConfig);
//resultsData ={};
returnVal = false;

//---------- test -----------


//create 3 maps of size 1000 and merge them
mergeMap1 = {};
mergeMap2 = {};
mergeMap3 = {};
onlyOneDiff = {};
halfDiff = {};

for x = 1 to 10 do 
    mergeMap1['merge' + x] = x;
    mergeMap2['merge' + x] = 100 + x;
    mergeMap3['diff' + x] = 1000 + x;
    
    if x == 10 do        
        onlyOneDiff['onlyDiff' + x] = x;
        halfDiff['halfdiff' + x] = x;
    else if x > 5 do
        halfDiff['halfdiff' + x] = x;
        onlyOneDiff['merge' + x] = x;
    else do
        onlyOneDiff['merge' + x] = x;
        halfDiff['merge' + x] = x; 
    end 
end

// merge maps
mergedMap = merge(mergeMap1, mergeMap2);
mergedIfMap = merge(mergeMap1, mergeMap2);
sameMerge = size(keys(mergedMap));
sameIfMerge = size(keys(mergedIfMap));


//mapJData = {};
//mapJData = fromjson(jData);


println ('Positive test for map merge type');
sameKeys = keys(mergedMap);
if (typeof(mergedMap)=='map') do
	//resultsData['map_merge_type_positive']['result'] = 'pass';
	returnVal = true;
else do
	//resultsData['map_merge_type_positive']['result'] = 'fail';
	returnVal = false;
end



//---------- test validation ----------

//println ('Reporting results to: ' + assertDocRepoURI + '/01builtinTestMaps/'+TODAY);
//resultsData --> assertDocRepoURI + '/01builtinTestMaps/'+TODAY;
return returnVal;