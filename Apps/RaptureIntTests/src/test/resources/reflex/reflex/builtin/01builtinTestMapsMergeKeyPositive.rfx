/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/******************************************************
* This Reflex script will test the following Reflex built-in functions and keywords:
* - merge() > maps
* - mergeif() > maps
* - 'map'.remove() - using java object function call
* - keys() - needed in order to cycle through the map in a for loop
* -
*/

// Reflex script

// This is a test for Reflex to verify the flow of validating data created and 
// retrieved by reflex

returnVal = true;

//---------- test -----------
println ('Positive test for map merge keys');

//create 3 maps of size 10 and merge them
mergeMap1 = {};
mergeMap2 = {};
mergeMap3 = {};
onlyOneDiff = {};
halfDiff = {};

for x = 1 to 10 do 
    mergeMap1['merge' + x] = x;
    mergeMap2['merge' + x] = 1 + x;
    mergeMap3['diff' + x] = 10 + x;
    
    if x == 10 do        
        onlyOneDiff['onlyDiff' + x] = x;
        halfDiff['halfdiff' + x] = x;
    else if x > 5 do
        halfDiff['halfdiff' + x] = x;
        onlyOneDiff['merge' + x] = x;
    else do
        onlyOneDiff['merge' + x] = x;
        halfDiff['merge' + x] = x; 
    end 
end

//Create expected map
expectedMap = {};
for y = 1 to 10 do
    expectedMap['merge' + y] = y;
end
for z = 1 to 10 do
    expectedMap['diff' + z] = 10 + z;
end
println('expectedMap: ' + expectedMap);

println('mergeMap1: ' + mergeMap1);
println('mergeMap2: ' + mergeMap2);
println('mergeMap3: ' + mergeMap3);

// merge maps
mergedMap = merge(mergeMap1, mergeMap2);
println('mergedMap: ' + mergedMap);
//Validate that mergedMap has values from rightmost map
if !(mergedMap == mergeMap2) do
   returnVal = false;
end

mergedIfMap = mergeif(mergeMap1, mergeMap2);
println('mergedIfMap: ' + mergedIfMap);
//Validate that mergeIfMap has keys and values from leftmost map
if !(mergedIfMap == mergeMap1) do
    returnVal = false;
end

mergedIfMultipleMaps = mergeif(mergeMap1, mergeMap2, mergeMap3);
println('mergedIfMultipleMaps: ' + mergedIfMultipleMaps);
//Validate that mergedIfMultipleMaps has keys values from leftmost map and keys values from rightmost map
if !(mergedIfMultipleMaps == expectedMap) do
    returnVal = false;
end

//check order
testSameKeyPass=true;
sameKeys = [];
sameKeys = keys(mergedMap);
for sameKey in sameKeys do
	if (testSameKeyPass) do
    	if (mergedMap[sameKey] != mergeMap2[sameKey]) do
    		testSameKeyPass=false;
    	end
    end
end

if (testSameKeyPass == false) do
    returnVal = false;
end

return returnVal;