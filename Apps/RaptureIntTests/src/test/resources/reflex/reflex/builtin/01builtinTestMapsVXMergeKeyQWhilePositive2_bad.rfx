/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2011-2016 Incapture Technologies LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
 
/******************************************************
* This Reflex script will test the following Reflex built-in functions and keywords:
* - for loops
* - while loops
*/

// Reflex script

// This is a test for Reflex to verify the flow of validating data created and 
// retrieved by reflex
//load common library
require "//reflexTest.scriptstore/commonFuncs.rfx" as comm;

// init the params we pass in
if !defined(_params) do
	_params = {};
	_params['assertDocRepo'] =  '//reflexTest.validation/testRun';
	_params['assertRepo'] =  '//reflexTest.validation';
	_params['assertRepoConfig'] = 'NREP {} using MONGODB {prefix="validate.reflexTestData"}';	
	_params['date'] = 'today';
	_params['docRepoURI'] = '//someAuthority.testingReflex';
	_params['config'] = 'NREP {} using MONGODB {prefix="data.docData"}';
	_params['docPath'] = 'theDoc';
	 
end 

assertDocRepoURI = _params['assertDocRepo'];
assertRepoURI = _params['assertRepo'];
assertConfig = _params['assertRepoConfig'];
TODAY = _params['date'];
docRepoConfig = _params['config']; 
docPath = _params['docPath'];
docRepoURI = _params['docRepoURI'];

//println("our params: " + docRepoURI );

//setup repos if they do not exist
//comm.init(assertRepoURI, assertConfig, docRepoURI, docRepoConfig);
//resultsData = {};

returnVal = false;

//---------- test -----------
println('------------------------------------------------------');
println('Test while loop iterating over a counter');

count=0;
println('count after initial assignment : ' + count);
i=0;
println('i after initial assignment     : ' + i);

MAX_NUM = 10;
println('MAX_NUM after initial : ' + MAX_NUM);
a = MAX_NUM+1;
b = MAX_NUM*(MAX_NUM+1);
c = MAX_NUM*(MAX_NUM+1)/2;

println('MAX_NUM+1 after initial             : ' + a);
println('MAX_NUM*(MAX_NUM+1) after initial  : ' + b);
println('MAX_NUM*(MAX_NUM+1)/2 after initial: ' + c);

while (count < (MAX_NUM*(MAX_NUM+1)/2))  do
	count = count + 1;
	i=i+1;
	println(count + ':' + i);
end


println('count is      : ' + count);
println('i             : ' + i);
println('MAX_NUM after : ' + MAX_NUM);
println('------------------------------------------------------');

if (count == (MAX_NUM*(MAX_NUM+1)/2)) do
	returnVal = true;
	println('returning true');
else do
	returnVal = false;
	println('returning false');
end

//---------- test validation ----------
    
return returnVal;
