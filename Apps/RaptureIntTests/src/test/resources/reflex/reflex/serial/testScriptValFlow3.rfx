/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */


// Reflex script

// This is a test for Reflex to verify the flow of validating data created and 
// retrieved by reflex

if !defined(_params) do
	_params = {};
	_params['assertDocRepo'] =  '//reflexTest.validation/testRun';
	_params['assertRepo'] =  '//reflexTest.validation';
	_params['assertRepoConfig'] = 'NREP {} using MONGODB {prefix="validate.reflexTestData"}';
	_params['date'] = 'today';
	_params['docRepoURI'] = '//someAuthority.testingReflex';
	_params['config'] = 'NREP {} using MONGODB {prefix="data.docData"}';
	_params['docPath'] = 'theDoc';
	 
end 

assertDocRepoURI = _params['assertDocRepo'];
assertRepoURI = _params['assertRepo'];
assertConfig = _params['assertRepoConfig'];
TODAY = _params['date'];
docRepoConfig = _params['config']; 
docPath = _params['docPath'];
docRepoURI = _params['docRepoURI'];

println("our params: " + assertDocRepoURI );

// somedata = #doc.getContent(repoURI);  // this does not work throws exception 
// rapture.common.exception.RaptException: For input string: "value1"


if #doc.docRepoExists(assertRepoURI) == false do
	#doc.createDocRepo(assertRepoURI, assertConfig);
end

if #doc.docRepoExists(docRepoURI) == false do
	#doc.createDocRepo(docRepoURI, docRepoConfig);
end

testDocFolders = {};
testDocFolders = #doc.listDocsByUriPrefix(docRepoURI + '/' + TODAY, 10);

somedata <-- assertDocRepoURI;

println("did the previous test pass");
println("our test result: " + somedata['value1']);

if (somedata['value1'] == 'true') do
	println("our test3 result: " + somedata['value1']);
else do
	retVal = false;
	somedata['value1'] = retVal;
	return retVal;
end 

#doc.deleteDoc(docRepoURI + '/' + TODAY);
//testDocFolders = {};
testDocFolders = #doc.listDocsByUriPrefix(docRepoURI + '/' + TODAY, 10);

//println('testDocFolders: ' + testDocFolders );
#doc.deleteDoc(docRepoURI + '/' + TODAY + '/1');
println('doc data in /1 -- ' + #doc.getDoc(docRepoURI + '/' + TODAY + '/1'));

docKeys = [];
docKeys = keys(testDocFolders);

//for fold in docKeys do
for key in docKeys do
	doc = testDocFolders[key];
	#doc.deleteDoc(docRepoURI + '/' + TODAY + '/' + doc.getName());
end

testDocFolders = #doc.listDocsByUriPrefix(docRepoURI + '/' + TODAY, 10);
println('our number of folders now is: ' + size(keys(testDocFolders)));
//println('testDocFolders: ' + testDocFolders );

if #doc.getDoc(docRepoURI + '/' + TODAY + '/1') == null do
	retVal = true;
else do
	retVal = false;	
end


somedata['value1'] = retVal;

return retVal;