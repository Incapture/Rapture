/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */


// this needs work

require "//reflexTest.scriptstore/commonFuncs.rfx" as comm;

// init the params we pass in
if !defined(_params) do
	_params = {};
	_params['assertBlobRepo'] =  '//reflexTest.validation/testRun';
	_params['assertRepo'] =  '//reflexTest.validation';
	_params['assertRepoConfig'] = 'NREP {} using MONGODB {prefix="validate.reflexTestData"}';	
	_params['date'] = 'today';
	_params['blobRepoURI'] = '//someAuthority.testingReflex';
	_params['config'] = 'NREP {} using MONGODB {prefix="data.blobData"}';
	_params['blobPath'] = 'theBlob';
	 
end 

assertBlobRepoURI = _params['assertBlobRepo'];
assertRepoURI = _params['assertRepo'];
assertConfig = _params['assertRepoConfig'];
TODAY = _params['date'];
blobRepoConfig = _params['config']; 
blobPath = _params['blobPath'];
blobRepoURI = _params['blobRepoURI'];

//setup repos if they do not exist
//comm.init(assertRepoURI, assertConfig, blobRepoURI, blobRepoConfig);

//---------- test -----------


resultsData ={};
CONFIG = 'BLOB {} USING MONGODB { prefix="blobPartition.reflexTest" }';
METACONFIG = 'REP {} USING MONGODB { prefix="blobPartition.reflexTest.folder" }';
BLOB_REPO_URI = 'blob://blobPartition.reflexTest';


println ('Test positive Repo create');
if (!(#blob.doesBlobRepoExist(BLOB_REPO_URI))) do
	ret = #blob.createBlobRepo(BLOB_REPO_URI,CONFIG,METACONFIG );
	if(ret==true) do
		resultsData['blob_create_repo_positive']['result']='pass';
	else do
		resultsData['blob_create_repo_positive']['result']='fail';
	end
end

println ('Test positive Repo exists');
ret = #blob.doesBlobRepoExist(BLOB_REPO_URI);
if(ret==true) do
		resultsData['blob_exists_repo_positive']['result']='pass';
	else do
		resultsData['blob_exists_repo_positive']['result']='fail';
	end

println ('Test positive Repo delete');
ret = #blob.deleteBlobRepo(BLOB_REPO_URI);
if(ret==true) do
		resultsData['blob_delete_repo_positive']['result']='pass';
	else do
		resultsData['blob_delete_repo_positive']['result']='fail';
	end
	
println ('Test positive Repository create');
if (!(#blob.doesBlobRepoExist(BLOB_REPO_URI))) do
	ret = #blob.createBlobRepo(BLOB_REPO_URI,CONFIG,METACONFIG );
	if(ret==true) do
		resultsData['blob_create_positive']['result']='pass';
	else do
		resultsData['blob_create_positive']['result']='fail';
	end
end

println ('Test positive Repository exists');
ret = #blob.doesBlobRepoExist(BLOB_REPO_URI);
if(ret==true) do
		resultsData['blob_exists_positive']['result']='pass';
	else do
		resultsData['blob_exists_positive']['result']='fail';
	end
	
blobURI=BLOB_REPO_URI+'/reflexBlob';
contentType='application/text';
content='abcdefghijklmnopqrstuvwxyz';

println ('Test positive Blob create');
ret = #blob.createBlob(blobURI,contentType);//returns bool
println ('Test positive Blob append');	
//ret = #blob.appendToBlob(blobURI,content);//returns bool
println ('Test positive Blob get');
ret = #blob.getBlob(blobURI);//returns blob container
println ('Test positive Blob getsize');
ret = #blob.getBlobSize(blobURI);//returns long
println ('Test positive Blob get MetaData');
ret = #blob.getMetaData(blobURI);//returns map
println ('Test positive Blob delete');
ret = #blob.deleteBlob(blobURI);//returns bool
	
println ('Test positive Repository delete');
ret = #blob.deleteBlobRepo(BLOB_REPO_URI);
if(ret==true) do
		resultsData['blob_delete_positive']['result']='pass';
	else do
		resultsData['blob_delete_positive']['result']='fail';
	end	
	
MAX=20;

println ('Reporting results to: ' + assertBlobRepoURI + '/BlobTestScript.rfx/'+TODAY);
resultsData --> assertBlobRepoURI + '/BlobTestScript/'+TODAY;
return true;
