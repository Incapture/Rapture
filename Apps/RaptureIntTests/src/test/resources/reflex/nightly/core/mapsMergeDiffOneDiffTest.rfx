returnVal = false;

//---------- test -----------

//create 3 maps of size 1000 and merge them
mergeMap1 = {};
mergeMap2 = {};
mergeMap3 = {};
onlyOneDiff = {};
halfDiff = {};

for x = 1 to 10 do 
    mergeMap1['merge' + x] = x;
    mergeMap2['merge' + x] = 100 + x;
    mergeMap3['diff' + x] = 1000 + x;
    
    if x == 10 do        
        onlyOneDiff['onlyDiff' + x] = x;
        halfDiff['halfdiff' + x] = x;
    else if x > 5 do
        halfDiff['halfdiff' + x] = x;
        onlyOneDiff['merge' + x] = x;
    else do
        onlyOneDiff['merge' + x] = x;
        halfDiff['merge' + x] = x; 
    end 
end

// merge maps
mergedMap = merge(mergeMap1, mergeMap2);
mergedIfMap = mergeif(mergeMap1, mergeMap2);
sameMerge = size(keys(mergedMap));
sameIfMerge = size(keys(mergedIfMap));

// only 1 diff
mergedOneDiff = merge(mergeMap1, onlyOneDiff);
mergedIfOneDiff = merge(mergeMap1, onlyOneDiff);
diffMerge = size(keys(mergedOneDiff));
diffIfMerge = size(keys(mergedIfOneDiff));
println ('Positive test for one diff size maps merge');
if ((diffMerge == 11) && (diffIfMerge == 11)) do
	returnVal = true;
else do
	returnVal = false;
end

assert(returnVal);
