/*****************************************************************************************************************
* This script will get a swap DF from deposit, future and swap curve by the valuationdate. 
* client usage:
* input: valuationdate ,currency and dfformat
* key currency is madentary.
* key dfformat is optional, if use, it will return json with ordered date and corresponding DF and implied rate. 
* key valuationdate if not provided, valuationdate will be set today's date.
* 
* Calling sample: 
*           
* http.doRunScript("c_iars", "GetSwapDFArray", "currency=USD,valuationdate=20110406,dfformat=ordered")
*  
* Please read this code.  
*    
******************************************************************************************************************/

const library = lib('creditanalyticsapi.BondRisk');
curveHeaderMap = {};
curveDepositsMap = {};
curveFuturesMap = {};
curveSwapsMap = {};
inputMap = {};
keyOnDepositsData = [];
keyOnFuturesData = [];
keyOnSwapsData = [];

valuationdate='valuationdate';  // "20110406";
currency='currency';  			// "USD"
dfformat='dfformat';            // "" or any string

inMapKeys = keys(_params);

if valuationdate in inMapKeys do
   inputMap[valuationdate] = _params[valuationdate];
else do
   inputMap[valuationdate]=date();	
   println(valuationdate + ' not in map. use today = ' + inputMap[valuationdate]);
end
if dfformat in inMapKeys do
	inputMap[dfformat] = _params[dfformat];
else do
     println('no dfformat, DF will not sorted.');	
end 
if currency in inMapKeys do 
 	inputMap[currency] = _params[ currency];
else do 
 	println('need currency');
end
 
def getRiskByTSYcurve(inmap) 
 	riskMap = call(library, 'GetSwapDFArray', inmap);
 	return riskMap;
 end

swapcurvePath = 'mdrs/official/curve/swap/close/' + inputMap[valuationdate] + '/' + inputMap[currency] + '/swapemusdmidlibor';
println(swapcurvePath);
swapcurveData <-- swapcurvePath;
println(swapcurveData);
curveHeaderMap['id'] = swapcurveData['_id'];
curveHeaderMap['name'] = swapcurveData['Header']['@name'];
curveHeaderMap['currency'] = swapcurveData['Header']['Currency'];
curveHeaderMap['valuation'] = swapcurveData['Header']['Valuation'];
curveHeaderMap['settlement'] = swapcurveData['Header']['Settlement'];
println(curveHeaderMap);

keyOnDepositsData = keys(swapcurveData['Deposits']);
println(keyOnDepositsData);
println(size(keyOnDepositsData));
for i=0 to size(keyOnDepositsData) -1 do
	curveDepositsMap[cast(i,'string')] = swapcurveData['Deposits'][keyOnDepositsData[i]];
	println(keyOnDepositsData[i]);
end	
i=i+1;
println(i);
println(size(keys(curveDepositsMap)));
println("*******deposite start*************************");
for i=0 to size(keys(curveDepositsMap)) -1 do
	println(curveDepositsMap[cast(i,'string')]['Start']);
	println(curveDepositsMap[cast(i,'string')]['Maturity']);
	println(curveDepositsMap[cast(i,'string')]['Rate']);
	println(curveDepositsMap[cast(i,'string')]['Basis']);
	println('-----');
end	
println("*******deposite end*************************");

//future keyOnFuturesData
println("future start");
keyOnFuturesData = keys(swapcurveData['Futures']);
println(keyOnFuturesData);
println(size(keyOnFuturesData));
for i=0 to size(keyOnFuturesData) -1 do
	curveFuturesMap[cast(i,'string')] = swapcurveData['Futures'][keyOnFuturesData[i]];
	println(keyOnFuturesData[i]);
end
for i=0 to size(keys(curveFuturesMap)) -1 do
	println(curveFuturesMap[cast(i,'string')]['Delivery']);
	println(curveFuturesMap[cast(i,'string')]['Maturity']);
	println(curveFuturesMap[cast(i,'string')]['Price']);
	println(curveFuturesMap[cast(i,'string')]['Convexity']);
	println(curveFuturesMap[cast(i,'string')]['Basis']);
	println('-----');
end	
	
println("future end");

//swap keyOnSwapsData
println("swap start");
keyOnSwapsData = keys(swapcurveData['Swaps']);
println(keyOnSwapsData);
println(size(keyOnSwapsData));
for i=0 to size(keyOnSwapsData) -1 do
	curveSwapsMap[cast(i,'string')] = swapcurveData['Swaps'][keyOnSwapsData[i]];
	println(keyOnSwapsData[i]);
end
for i=0 to size(keys(curveSwapsMap)) -1 do
	println(curveSwapsMap[cast(i,'string')]['Start']);
	println(curveSwapsMap[cast(i,'string')]['Maturity']);
	println(curveSwapsMap[cast(i,'string')]['Rate']);
	println(curveSwapsMap[cast(i,'string')]['Frequency']);
	println(curveSwapsMap[cast(i,'string')]['Basis']);
	println(curveSwapsMap[cast(i,'string')]['BusConv']);
	println('-----');
end	
	
println("swap end");
 
//inputMap['header'] = curveHeaderMap;
inputMap['deposits'] = curveDepositsMap;
inputMap['futures'] = curveFuturesMap;
inputMap['swaps'] = curveSwapsMap; 
println(inputMap);

println('deposit size = ' +  size(keys(inputMap['deposits'])));
println('futures size = ' +  size(keys(inputMap['futures'])));
println('swaps size = ' +  size(keys(inputMap['swaps'])));

riskMap = getRiskByTSYcurve(inputMap);
 
if riskMap['success'] == true do
	return json(riskMap['response']['DF']);
else do
    println(riskMap);
    return json(riskMap);
end    	

 