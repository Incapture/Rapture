/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2011-2016 Incapture Technologies LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package rapture.series;

/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

import java.util.List;
import java.util.Map;

import rapture.common.RaptureFolderInfo;
import rapture.common.SeriesValue;

public interface SeriesStore {

    /**
     * Destroy this repository and all series in it
     */
    void drop();

    void addDoubleToSeries(String key, String column, double value);

    void addLongToSeries(String key, String column, long value);

    void addStringToSeries(String key, String column, String value);

    void addStructureToSeries(String key, String column, String json);

    void addPointToSeries(String key, SeriesValue value);

    void addDoublesToSeries(String key, List<String> columns, List<Double> values);

    void addLongsToSeries(String key, List<String> columns, List<Long> values);

    void addStringsToSeries(String key, List<String> columns, List<String> values);

    void addStructuresToSeries(String key, List<String> columns, List<String> values);

    void addPointsToSeries(String key, List<SeriesValue> value);

    Boolean deletePointsFromSeriesByPointKey(String key, List<String> pointKeys);

    /**
     * Drop all points from a series and delete it.
     *
     * @param key
     * @return
     */
    void deletePointsFromSeries(String key);

    List<SeriesValue> getPoints(String key);

    List<SeriesValue> getPointsAfter(String key, String startColumn, int maxNumber);

    List<SeriesValue> getPointsAfterReverse(String key, String startColumn, int maxNumber);

    List<SeriesValue> getPointsAfter(String key, String startColumn, String endColumn, int maxNumber);

    void setInstanceName(String instanceName);

    void setConfig(Map<String, String> config);

    List<String> getSeriesLike(String keyPrefix);

    Iterable<SeriesValue> getRangeAsIteration(String key, String startCol, String endCol, int pageSize);

    List<SeriesValue> getRangeAsList(String key, String startCol, String endCol);

    List<RaptureFolderInfo> listSeriesByUriPrefix(String string);

    void unregisterKey(String key);

    void unregisterKey(String key, boolean isFolder);

    SeriesValue getLastPoint(String key);
}
