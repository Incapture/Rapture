/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{
    public interface DocApi {
     /**
     * Validates repository; requires write permission because it can cause files/tables to be created on first use.
     * 
     */
     bool validateDocRepo(CallingContext context, string docRepoUri);

     /**
     * A DocumentRepository is used to store JSON docs. This method creates and configures the repository for an authority.
     * 
     */
     void createDocRepo(CallingContext context, string docRepoUri, string config);

     /**
     * This API call can be used to determine whether a given repository exists.
     * 
     */
     bool docRepoExists(CallingContext context, string docRepoUri);

     /**
     * This api call can be used to determine whether a given type exists in a given authority.
     * 
     */
     bool docExists(CallingContext context, string docUri);

     /**
     * Retrieves the configuration string for the given document repository.
     * 
     */
     DocumentRepoConfig getDocRepoConfig(CallingContext context, string docRepoUri);

     /**
     * Gets any available information about a repository.
     * 
     */
     Dictionary<string, string> getDocRepoStatus(CallingContext context, string docRepoUri);

     /**
     * Retrieves document repositories
     * 
     */
     List<DocumentRepoConfig> getDocRepoConfigs(CallingContext context);

     /**
     * This method removes a documentRepository and its data from the Rapture system. There is no undo.
     * 
     */
     void deleteDocRepo(CallingContext context, string docRepoUri);

     /**
     * This method archives older versions of a documentRepository.
     * 
     */
     void archiveRepoDocs(CallingContext context, string docRepoUri, int versionLimit, long timeLimit, bool ensureVersionLimit);

     /**
     * Retrieves the content and the meta data associated with a document, including version and user information. If the storage
         does not support metadata, this method returns a dummy object.
     * 
     */
     DocumentWithMeta getDocAndMeta(CallingContext context, string docUri);

     /**
     * Retrieves only the meta data associated with a document, including version and user information. If the storage does not
         support metadata, this method returns a dummy object.
     * 
     */
     DocumentMetadata getDocMeta(CallingContext context, string docUri);

     /**
     * Reverts this document back to the previous version by taking the previous version and making a new version.
     * 
     */
     DocumentWithMeta revertDoc(CallingContext context, string docUri);

     /**
     * Retrieves the content of a document.
         
     @param docUri a string of characters used to identify a document
     * 
     */
     string getDoc(CallingContext context, string docUri);

     /**
     * Stores a document in the Rapture system.
         
     @param docUri a string of characters used to identify a document
         
     @param  content the information to be stored within the document
         
     @since 1.0.0
     * 
     */
     string putDoc(CallingContext context, string docUri, string content);

     /**
     * Attempts to put the content into the repository, but fails if the repository supports versioning and the current version of
         the document stored does not match the version passed. A version of zero implies that the document should not exist. The purpose
         of this call is for a client to be able to call getDocAndMeta to retrieve an existing document, modify it, and save the content
         back, using the version number in the metadata of the document. If another client has modified the data since it was loaded, this
         call will return false, indicating that the save was not possible.
     * 
     */
     bool putDocWithVersion(CallingContext context, string docUri, string content, int currentVersion);

     /**
     * Store a document in the Rapture system, passing in an event context to be added to any events spawned off by this put. Parts of
         the uri could be automatically generated
         
     @return A DocWriteHandle object that contains a value on whether the write was successful, the uri of the document that was written, and
         a handle to the event uri that was fired, if any
     * 
     */
     DocWriteHandle putDocWithEventContext(CallingContext context, string docUri, string content, Dictionary<string, string> eventContext);

     /**
     * Removes a document attribute. Can be used to remove all attributes for a given type as well if the key argument is null.
     * 
     */
     bool deleteDoc(CallingContext context, string docUri);

     /**
     * Renames a document, by getting and putting it on the system without transferring the data back to the client.
     * 
     */
     string renameDoc(CallingContext context, string fromDocUri, string toDocUri);

     /**
     * Returns a map of contents where the key is the normalized input Uri and the value is the document retrieved
     * 
     */
     Dictionary<string, string> getDocs(CallingContext context, List<string> docUris);

     /**
     * Returns a list of documents and their associated meta data - the meta data includes version and user information
     * 
     */
     List<DocumentWithMeta> getDocAndMetas(CallingContext context, List<string> docUris);

     /**
     * Returns a list of true/false statements on whether the listed Uris refer to a valid document. Note: a folder is not considered to
         be a document.
     * 
     */
     List<bool> docsExist(CallingContext context, List<string> docUris);

     /**
     * Put a series of documents in a batch form. Refer to putDoc for details.
     * 
     */
     List<Object> putDocs(CallingContext context, List<string> docUris, List<string> contents);

     /**
     * Renames a series of documents in batch form. See renameDoc.
     * 
     */
     List<string> renameDocs(CallingContext context, string authority, string comment, List<string> fromDocUris, List<string> toDocUris);

     /**
     * Removes a folder and its contents recursively, including empty subfolders. Validates entitlement on individual docs and folders. Returns a list of the documents and folders removed.
     * 
     */
     List<string> deleteDocsByUriPrefix(CallingContext context, string docUri);

     /**
     * Returns a list of Uris of all documents and folders below this point, mapping the Uri to a RaptureFolderInfo object
     * 
     */
     Dictionary<string, RaptureFolderInfo> listDocsByUriPrefix(CallingContext context, string docUri, int depth);

     /**
     * Adds a single attribute to an existing document.
     * 
     */
     bool setDocAttribute(CallingContext context, string attributeUri, string value);

     /**
     * Adds attributes to an existing document in key/value pairs.
     * 
     */
     Dictionary<string, bool> setDocAttributes(CallingContext context, string attributeUri, List<string> keys, List<string> values);

     /**
     * Get a single attribute for the given uri, attributeType, and key e.g. displayName/$attributeType/key
     * 
     */
     XferDocumentAttribute getDocAttribute(CallingContext context, string attributeUri);

     /**
     * Gets all known attributes for the given uri e.g. displayName/$attributeType
     * 
     */
     List<XferDocumentAttribute> getDocAttributes(CallingContext context, string attributeUri);

     /**
     * Removes a document attribute.  Can be used to remove all attributes for a given type as well if key argument is null.
     * 
     */
     bool deleteDocAttribute(CallingContext context, string attributeUri);

     /**
     * Returns the Uri that's associated with the idgen that belongs to this document repository. Note that every repository has a
         idgen Uri, even if no idgen is attached to it.
     * 
     */
     string getDocRepoIdGenUri(CallingContext context, string docRepoUri);

     /**
     * This method creates a idgen and attaches it to a document repository. This way, when a document containing an autoid string
         is created that autoid will be replaced with a unique id.
     * 
     */
     DocumentRepoConfig setDocRepoIdGenConfig(CallingContext context, string docRepoUri, string idGenConfig);

     /**
     * This method returns any idgen associated with this doc repo, or null if there isn't one.
     * 
     */
     RaptureIdGenConfig getDocRepoIdGenConfig(CallingContext context, string docRepoUri);

	}
}

