/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{
    public interface BlobApi {
     /**
     * Creates a repository for unstructured data.
     * 
     */
     void createBlobRepo(CallingContext context, string blobRepoUri, string config, string metaConfig);

     /**
     * Retrieves blob repository information
     * 
     */
     BlobRepoConfig getBlobRepoConfig(CallingContext context, string blobRepoUri);

     /**
     * Retrieves a collection of objects that contain the configuration information for all the defined blob repositories.
     * 
     */
     List<BlobRepoConfig> getBlobRepoConfigs(CallingContext context);

     /**
     * This method removes a blob Repository and its data from the Rapture system. There is no undo.
     * 
     */
     void deleteBlobRepo(CallingContext context, string repoUri);

     /**
     * This api call can be used to determine whether a given repo exists.
     * 
     */
     bool blobRepoExists(CallingContext context, string repoUri);

     /**
     * This api call can be used to determine whether a given blob exists.
     * 
     */
     bool blobExists(CallingContext context, string blobUri);

     /**
     * Appends to a blob.
     * 
     */
     void addBlobContent(CallingContext context, string blobUri, byte[] content);

     /**
     * Stores a blob in one hit, assuming a String representation. If append, adds to any content already existing
     * 
     */
     void putBlob(CallingContext context, string blobUri, byte[] content, string contentType);

     /**
     * Retrieves a blob and its metadata. The blob is represented as a byte array.
     * 
     */
     BlobContainer getBlob(CallingContext context, string blobUri);

     /**
     * Removes a blob from the backing store. There is no undo.
     * 
     */
     void deleteBlob(CallingContext context, string blobUri);

     /**
     * Retrieves the number of bytes in a blob.
     * 
     */
     long getBlobSize(CallingContext context, string blobUri);

     /**
     * Retrieves all metadata associated with a blob.
     * 
     */
     Dictionary<string, string> getBlobMetaData(CallingContext context, string blobUri);

     /**
     * Returns full pathnames for an entire subtree as a map of the path to RFI.
     * 
     */
     Dictionary<string, RaptureFolderInfo> listBlobsByUriPrefix(CallingContext context, string uriPrefix, int depth);

     /**
     * Removes a folder and its contents recursively, including empty subfolders. Validates entitlement on individual blobs and folders. Returns a list of the blobs and folders removed.
     * 
     */
     List<string> deleteBlobsByUriPrefix(CallingContext context, string uriPrefix);

	}
}

