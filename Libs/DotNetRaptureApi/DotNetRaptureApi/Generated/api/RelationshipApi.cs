/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{
    public interface RelationshipApi {
     /**
     * Creates a repository in which to store relationship information.
     * 
     */
     void createRelationshipRepo(CallingContext context, string relationshipRepoURI, string config);

     /**
     * Retrieves blob repository information
     * 
     */
     RelationshipRepoConfig getRelationshipRepoConfig(CallingContext context, string blobRepoURI);

     /**
     * Retrieves relationship repository configurations.
     * 
     */
     List<RelationshipRepoConfig> getAllRelationshipRepoConfigs(CallingContext context);

     /**
     * This method removes a Relationship Repository and its data from the Rapture system. There is no undo.
     * 
     */
     void deleteRelationshipRepo(CallingContext context, string repoURI);

     /**
     * This api call can be used to determine whether a given repo exists.
     * 
     */
     bool doesRelationshipRepoExist(CallingContext context, string repoURI);

     /**
     * This API call can be used to determine whether a given relationship type exists in a given authority.
     * 
     */
     bool doesRelationshipExist(CallingContext context, string relationshipURI);

     /**
     * Stores a relationship link and returns its URI.
     * 
     */
     string createRelationship(CallingContext context, string relationshipAuthorityURI, string fromURI, string toURI, string label, Dictionary<string, string> properties);

     /**
     * Retrieves a relationship link.
     * 
     */
     RaptureRelationship getRelationship(CallingContext context, string relationshipURI);

     /**
     * Deletes a relationship link.
     * 
     */
     void deleteRelationship(CallingContext context, string relationshipURI);

     /**
     * Gets all the relationship links with the specified Rapture resource as the "from" half of the link.
     * 
     */
     List<RaptureRelationship> getOutboundRelationships(CallingContext context, string relationshipRepoURI, string fromURI);

     /**
     * Gets all the relationship links with the specified Rapture resource as the "to" half of the link.
     * 
     */
     List<RaptureRelationship> getInboundRelationships(CallingContext context, string relationshipRepoURI, string toURI);

     /**
     * Gets all the relationship links with the specified label.
     * 
     */
     List<RaptureRelationship> getLabledRelationships(CallingContext context, string relationshipRepoURI, string relationshipLabel);

     /**
     * Get children (nodes) in a relationship store. Relationship stores are only one level deep, so this API exists only to provide a consistent API as other repository types. This method is not useful except when making generic repository browsers.
     * 
     */
     List<RaptureFolderInfo> getChildren(CallingContext context, string prefix);

     /**
     * Return full pathnames for an entire subtree as a map of path to RFI
     * 
     */
     Dictionary<string, RaptureFolderInfo> getAllChildrenMap(CallingContext context, string prefix);

     /**
     * Gets relationships from a given node.
     * 
     */
     RaptureRelationshipRegion getRelationshipCenteredOn(CallingContext context, string relationshipNodeURI, Dictionary<string, string> options);

	}
}

