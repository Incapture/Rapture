/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{
    public interface EntitlementApi {
     /**
     *  This method is used to retrieve all of the entitlements defined in Rapture.
     * 
     */
     List<RaptureEntitlement> getEntitlements(CallingContext context);

     /**
     * Retrieves a single entitlement, or null if not found.
     * 
     */
     RaptureEntitlement getEntitlement(CallingContext context, string entitlementName);

     /**
     * Retrieves a single entitlement by using its URI.
     * 
     */
     RaptureEntitlement getEntitlementByAddress(CallingContext context, string entitlementURI);

     /**
     * Retrieves a single entitlement group.
     * 
     */
     RaptureEntitlementGroup getEntitlementGroup(CallingContext context, string groupName);

     /**
     * Retrieves a single entitlement group from its URI.
     * 
     */
     RaptureEntitlementGroup getEntitlementGroupByAddress(CallingContext context, string groupURI);

     /**
     * This method returns all of the entitlement groups defined in the Rapture environment.
     * 
     */
     List<RaptureEntitlementGroup> getEntitlementGroups(CallingContext context);

     /**
     * This method adds a new entitlement, specifying an initial group that should be assigned to this entitlement. The reason for assigning an initial group is to prevent lock out.
     * 
     */
     RaptureEntitlement addEntitlement(CallingContext context, string entitlementName, string initialGroup);

     /**
     * This method is used to add an entitlement group to an entitlement.
     * 
     */
     RaptureEntitlement addGroupToEntitlement(CallingContext context, string entitlementName, string groupName);

     /**
     * This method reverses the act of adding a group to an entitlement.
     * 
     */
     RaptureEntitlement removeGroupFromEntitlement(CallingContext context, string entitlementName, string groupName);

     /**
     * This method removes an entitlement entirely from the system.
     * 
     */
     void deleteEntitlement(CallingContext context, string entitlementName);

     /**
     * This method removes an entitlement group from the system.
     * 
     */
     void deleteEntitlementGroup(CallingContext context, string groupName);

     /**
     * This method adds a new entitlement group to the system.
     * 
     */
     RaptureEntitlementGroup addEntitlementGroup(CallingContext context, string groupName);

     /**
     * This method adds a user to an existing entitlement group. The user will then have all of the privileges (entitlements) associated with that group.
     * 
     */
     RaptureEntitlementGroup addUserToEntitlementGroup(CallingContext context, string groupName, string userName);

     /**
     * This method reverses the act of the adding a user to a group.
     * 
     */
     RaptureEntitlementGroup removeUserFromEntitlementGroup(CallingContext context, string groupName, string userName);

     /**
     * Convenience method to get all the entitlements for a user
     * 
     */
     List<RaptureEntitlement> findEntitlementsByUser(CallingContext context, string username);

     /**
     * Convenience method to get all the entitlements for a group
     * 
     */
     List<RaptureEntitlement> findEntitlementsByGroup(CallingContext context, string groupname);

     /**
     * Convenience method to get all entitlements for the current user
     * 
     */
     List<RaptureEntitlement> findEntitlementsBySelf(CallingContext context);

	}
}

