/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{
    public interface UserApi {
     /**
     * Returns account information for the current user.
     * 
     */
     RaptureUser getWhoAmI(CallingContext context);

     /**
     * Logs out the active user and terminates the current session.
     * 
     */
     void logoutUser(CallingContext context);

     /**
     * Stores application preferences for the current user.
     * 
     */
     void storePreference(CallingContext context, string category, string name, string content);

     /**
     * Retrieves application preferences for the current user.
     * 
     */
     string getPreference(CallingContext context, string category, string name);

     /**
     * Removes a previously stored preference.
     * 
     */
     void removePreference(CallingContext context, string category, string name);

     /**
     * This method will list the categories of preferences available for a user.
     * 
     */
     List<string> getPreferenceCategories(CallingContext context);

     /**
     * This method will list the preference documents in a category.
     * 
     */
     List<string> getPreferencesInCategory(CallingContext context, string category);

     /**
     * Updates the description for the current user.
     * 
     */
     RaptureUser updateMyDescription(CallingContext context, string description);

     /**
     * Changes the password for the current user.
     * 
     */
     RaptureUser changeMyPassword(CallingContext context, string oldHashPassword, string newHashPassword);

     /**
     * Changes the email for the current user.
     * 
     */
     RaptureUser changeMyEmail(CallingContext context, string newAddress);

     /**
     * Retrieves the API version currently in use.
     * 
     */
     ApiVersion getServerApiVersion(CallingContext context);

     /**
     * 
     * 
     */
     RaptureCubeResult runFilterCubeView(CallingContext context, string typeURI, string scriptURI, string filterParams, string groupFields, string columnFields);

     /**
     * 
     * 
     */
     RaptureQueryResult runNativeQuery(CallingContext context, string typeURI, string repoType, List<string> queryParams);

     /**
     * Very much like a filter cube view, except that the initial content is taken from a native query executed against a REP repository instead of running through the view
         sub system.
     * 
     */
     RaptureCubeResult runNativeFilterCubeView(CallingContext context, string typeURI, string repoType, List<string> queryParams, string groupFields, string columnFields);

     /**
     * A method to check whether the current user is allowed to make the API call. Useful for the UI so that it can determine whether or not to show a particular item.
     * 
     */
     bool isPermitted(CallingContext context, string apiCall, string callParam);

	}
}

