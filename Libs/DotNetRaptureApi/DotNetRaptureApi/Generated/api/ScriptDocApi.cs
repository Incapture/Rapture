/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{

public interface ScriptDocApi {
     /**
     * 
     * 
     */
     bool validateDocRepo(string docRepoUri);

     /**
     * 
     * 
     */
     void createDocRepo(string docRepoUri, string config);

     /**
     * 
     * 
     */
     bool docRepoExists(string docRepoUri);

     /**
     * 
     * 
     */
     bool docExists(string docUri);

     /**
     * 
     * 
     */
     DocumentRepoConfig getDocRepoConfig(string docRepoUri);

     /**
     * 
     * 
     */
     Dictionary<string, string> getDocRepoStatus(string docRepoUri);

     /**
     * 
     * 
     */
     List<DocumentRepoConfig> getDocRepoConfigs();

     /**
     * 
     * 
     */
     void deleteDocRepo(string docRepoUri);

     /**
     * 
     * 
     */
     void archiveRepoDocs(string docRepoUri, int versionLimit, long timeLimit, bool ensureVersionLimit);

     /**
     * 
     * 
     */
     DocumentWithMeta getDocAndMeta(string docUri);

     /**
     * 
     * 
     */
     DocumentMetadata getDocMeta(string docUri);

     /**
     * 
     * 
     */
     DocumentWithMeta revertDoc(string docUri);

     /**
     * 
     * 
     */
     string getDoc(string docUri);

     /**
     * 
     * 
     */
     string putDoc(string docUri, string content);

     /**
     * 
     * 
     */
     bool putDocWithVersion(string docUri, string content, int currentVersion);

     /**
     * 
     * 
     */
     DocWriteHandle putDocWithEventContext(string docUri, string content, Dictionary<string, string> eventContext);

     /**
     * 
     * 
     */
     bool deleteDoc(string docUri);

     /**
     * 
     * 
     */
     string renameDoc(string fromDocUri, string toDocUri);

     /**
     * 
     * 
     */
     Dictionary<string, string> getDocs(List<string> docUris);

     /**
     * 
     * 
     */
     List<DocumentWithMeta> getDocAndMetas(List<string> docUris);

     /**
     * 
     * 
     */
     List<bool> docsExist(List<string> docUris);

     /**
     * 
     * 
     */
     List<Object> putDocs(List<string> docUris, List<string> contents);

     /**
     * 
     * 
     */
     List<string> renameDocs(string authority, string comment, List<string> fromDocUris, List<string> toDocUris);

     /**
     * 
     * 
     */
     List<string> deleteDocsByUriPrefix(string docUri);

     /**
     * 
     * 
     */
     Dictionary<string, RaptureFolderInfo> listDocsByUriPrefix(string docUri, int depth);

     /**
     * 
     * 
     */
     bool setDocAttribute(string attributeUri, string value);

     /**
     * 
     * 
     */
     Dictionary<string, bool> setDocAttributes(string attributeUri, List<string> keys, List<string> values);

     /**
     * 
     * 
     */
     XferDocumentAttribute getDocAttribute(string attributeUri);

     /**
     * 
     * 
     */
     List<XferDocumentAttribute> getDocAttributes(string attributeUri);

     /**
     * 
     * 
     */
     bool deleteDocAttribute(string attributeUri);

     /**
     * 
     * 
     */
     string getDocRepoIdGenUri(string docRepoUri);

     /**
     * 
     * 
     */
     DocumentRepoConfig setDocRepoIdGenConfig(string docRepoUri, string idGenConfig);

     /**
     * 
     * 
     */
     RaptureIdGenConfig getDocRepoIdGenConfig(string docRepoUri);

}
}

