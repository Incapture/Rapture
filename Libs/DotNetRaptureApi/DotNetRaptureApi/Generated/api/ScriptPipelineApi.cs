/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{

public interface ScriptPipelineApi {
     /**
     * 
     * 
     */
     void removeServerCategory(string category);

     /**
     * 
     * 
     */
     List<string> getServerCategories();

     /**
     * 
     * 
     */
     List<CategoryQueueBindings> getBoundExchanges(string category);

     /**
     * 
     * 
     */
     void deregisterPipelineExchange(string name);

     /**
     * 
     * 
     */
     List<string> getExchanges();

     /**
     * 
     * 
     */
     RaptureExchange getExchange(string name);

     /**
     * 
     * 
     */
     void publishMessageToCategory(RapturePipelineTask task);

     /**
     * 
     * 
     */
     void broadcastMessageToCategory(RapturePipelineTask task);

     /**
     * 
     * 
     */
     void broadcastMessageToAll(RapturePipelineTask task);

     /**
     * 
     * 
     */
     PipelineTaskStatus getStatus(string taskId);

     /**
     * 
     * 
     */
     List<RapturePipelineTask> queryTasks(string query);

     /**
     * 
     * 
     */
     List<RapturePipelineTask> queryTasksOld(TableQuery query);

     /**
     * 
     * 
     */
     long getLatestTaskEpoch();

     /**
     * 
     * 
     */
     void drainPipeline(string exchange);

     /**
     * 
     * 
     */
     void registerExchangeDomain(string domainURI, string config);

     /**
     * 
     * 
     */
     void deregisterExchangeDomain(string domainURI);

     /**
     * 
     * 
     */
     List<string> getExchangeDomains();

     /**
     * 
     * 
     */
     void setupStandardCategory(string category);

     /**
     * 
     * 
     */
     Dictionary<string, Object> makeRPC(string queueName, string fnName, Dictionary<string, Object> rparams, long timeoutInSeconds);

     /**
     * 
     * 
     */
     void createTopicExchange(string domain, string exchange);

     /**
     * 
     * 
     */
     void publishTopicMessage(string domain, string exchange, string topic, string message);

}
}

