/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{

public interface ScriptAdminApi {
     /**
     * 
     * 
     */
     Dictionary<string, string> getSystemProperties(List<string> keys);

     /**
     * 
     * 
     */
     List<RepoConfig> getRepoConfig();

     /**
     * 
     * 
     */
     List<CallingContext> getSessionsForUser(string user);

     /**
     * 
     * 
     */
     List<string> getTags(string raptureURI);

     /**
     * 
     * 
     */
     void deleteUser(string userName);

     /**
     * 
     * 
     */
     void destroyUser(string userName);

     /**
     * 
     * 
     */
     void restoreUser(string userName);

     /**
     * 
     * 
     */
     void addUser(string userName, string description, string hashPassword, string email);

     /**
     * 
     * 
     */
     bool doesUserExist(string userName);

     /**
     * 
     * 
     */
     RaptureUser getUser(string userName);

     /**
     * 
     * 
     */
     RaptureUser generateApiUser(string prefix, string description);

     /**
     * 
     * 
     */
     void resetUserPassword(string userName, string newHashPassword);

     /**
     * 
     * 
     */
     string createPasswordResetToken(string username);

     /**
     * 
     * 
     */
     void cancelPasswordResetToken(string username);

     /**
     * 
     * 
     */
     void updateUserEmail(string userName, string newEmail);

     /**
     * 
     * 
     */
     List<RaptureRemote> getRemotes();

     /**
     * 
     * 
     */
     RaptureRemote addRemote(string name, string description, string url, string apiKey, string optP);

     /**
     * 
     * 
     */
     void deleteRemote(string name);

     /**
     * 
     * 
     */
     void updateRemoteApiKey(string name, string apiKey);

     /**
     * 
     * 
     */
     void setRemote(string raptureURI, string remote, string remoteURI);

     /**
     * 
     * 
     */
     void clearRemote(string raptureURI);

     /**
     * 
     * 
     */
     void pullRemote(string raptureURI);

     /**
     * 
     * 
     */
     void addTemplate(string name, string template, bool overwrite);

     /**
     * 
     * 
     */
     string runTemplate(string name, string parameters);

     /**
     * 
     * 
     */
     string getTemplate(string name);

     /**
     * 
     * 
     */
     void copyDocumentRepo(string srcAuthority, string targAuthority, bool wipe);

     /**
     * 
     * 
     */
     void addIPToWhiteList(string ipAddress);

     /**
     * 
     * 
     */
     void removeIPFromWhiteList(string ipAddress);

     /**
     * 
     * 
     */
     List<string> getIPWhiteList();

     /**
     * 
     * 
     */
     string runBatchScript(string script);

     /**
     * 
     * 
     */
     List<RaptureUser> getAllUsers();

     /**
     * 
     * 
     */
     void initiateTypeConversion(string raptureURI, string newConfig, int versionsToKeep);

     /**
     * 
     * 
     */
     void putArchiveConfig(string raptureURI, TypeArchiveConfig config);

     /**
     * 
     * 
     */
     TypeArchiveConfig getArchiveConfig(string raptureURI);

     /**
     * 
     * 
     */
     void deleteArchiveConfig(string raptureURI);

     /**
     * 
     * 
     */
     bool ping();

     /**
     * 
     * 
     */
     void addMetadata(Dictionary<string, string> values, bool overwrite);

     /**
     * 
     * 
     */
     void setMOTD(string message);

     /**
     * 
     * 
     */
     string getMOTD();

     /**
     * 
     * 
     */
     void setEnvironmentName(string name);

     /**
     * 
     * 
     */
     void setEnvironmentProperties(Dictionary<string, string> properties);

     /**
     * 
     * 
     */
     string getEnvironmentName();

     /**
     * 
     * 
     */
     Dictionary<string, string> getEnvironmentProperties();

     /**
     * 
     * 
     */
     string encode(string toEncode);

     /**
     * 
     * 
     */
     string createURI(string path, string leaf);

     /**
     * 
     * 
     */
     string createMultipartURI(List<string> elements);

     /**
     * 
     * 
     */
     string decode(string encoded);

     /**
     * 
     * 
     */
     List<string> findGroupNamesByUser(string username);

}
}

