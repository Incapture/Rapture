/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{
    public interface BootstrapApi {
     /**
     *  The ephemeral repository is used to store information that does not need to survive a restart of Rapture. It normally holds
          information such as sessions, and its config is usually based around a shared non-versioned memory model
     * 
     */
     void setEmphemeralRepo(CallingContext context, string config);

     /**
     *  The config repository is used to store general config information about entities in Rapture. These entities include users, types, indices, queues and the like. 
     * 
     */
     void setConfigRepo(CallingContext context, string config);

     /**
     * The settings repository is used to store general low level settings in Rapture.
     * 
     */
     void setSettingsRepo(CallingContext context, string config);

     /**
     * This method is used to migrate the top level Config repository to a new config. This task takes place in the background, and once completed the config repository is switched to the new config.
        Any changes to config up to this point may be lost.
     * 
     */
     void migrateConfigRepo(CallingContext context, string newConfig);

     /**
     * This method is used to migrate the top level Ephemeral repository to a new config. This task takes place in the background, and once completed the config repository is switched to the new config.
        Any changes to config up to this point may be lost.
     * 
     */
     void migrateEphemeralRepo(CallingContext context, string newConfig);

     /**
     * This method is used to migrate the top level Settings repository to a new config. This task takes place in the background, and once completed the config repository is switched to the new config.
        Any changes to config up to this point may be lost.
     * 
     */
     void migrateSettingsRepo(CallingContext context, string newConfig);

     /**
     * Retrieve the current settings of the config repository.
     * 
     */
     string getConfigRepo(CallingContext context);

     /**
     * Retrieve the current settings of the settings repository.
     * 
     */
     string getSettingsRepo(CallingContext context);

     /**
     * Retrieve the current settings of the ephemeral repository.
     * 
     */
     string getEphemeralRepo(CallingContext context);

     /**
     * After changing the definition of any bootstrap repository, Rapture will need to be restarted. This method will restart Rapture.
     * 
     */
     void restartBootstrap(CallingContext context);

     /**
     * All scripts that are run by Rapture are passed a set of helper instances that can be used by the script. The helpers are locked to the entitlement context of the calling user. This method sets the name of such a class in this context. It is primarily an internal function, defined during startup, as the class provided must be accessible by the main Rapture application.
     * 
     */
     void addScriptClass(CallingContext context, string keyword, string className);

     /**
     * This method retrieves previous defined script classes for this system
     * 
     */
     Dictionary<string, string> getScriptClasses(CallingContext context);

     /**
     * This method removes a previously defined script class.
     * 
     */
     bool deleteScriptClass(CallingContext context, string keyword);

	}
}

