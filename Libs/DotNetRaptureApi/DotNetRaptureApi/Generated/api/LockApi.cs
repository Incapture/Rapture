/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{
    public interface RlockApi {
     /**
     * Retrieves the lock providers for a given authority.
     * 
     */
     List<RaptureLockConfig> getLockManagerConfigs(CallingContext context, string managerUri);

     /**
     * Creates a lock provider with an authority.
     * 
     */
     RaptureLockConfig createLockManager(CallingContext context, string managerUri, string config, string pathPosition);

     /**
     * Returns true if the lock providers found.
     * 
     */
     bool lockManagerExists(CallingContext context, string managerUri);

     /**
     * Gets a lock provider by its Uri.
     * 
     */
     RaptureLockConfig getLockManagerConfig(CallingContext context, string managerUri);

     /**
     * Deletes a lock provider by its Uri.
     * 
     */
     void deleteLockManager(CallingContext context, string managerUri);

     /**
     * Acquire a lock. Returns a LockHandle, which you need to pass to releaseLock when calling it. If
         unable to acquire the lock, returns null.
     * 
     */
     LockHandle acquireLock(CallingContext context, string managerUri, string lockName, long secondsToWait, long secondsToKeep);

     /**
     * Releases a lock.
     * 
     */
     bool releaseLock(CallingContext context, string managerUri, string lockName, LockHandle lockHandle);

     /**
     * This is a dangerous variant of release lock that will kick someone else off the lock queue.
     * 
     */
     void forceReleaseLock(CallingContext context, string managerUri, string lockName);

	}
}

