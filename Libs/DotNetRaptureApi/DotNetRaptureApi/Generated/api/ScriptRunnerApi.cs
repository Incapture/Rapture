/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{

public interface ScriptRunnerApi {
     /**
     * 
     * 
     */
     RaptureServerGroup createServerGroup(string name, string description);

     /**
     * 
     * 
     */
     void deleteServerGroup(string name);

     /**
     * 
     * 
     */
     List<RaptureServerGroup> getAllServerGroups();

     /**
     * 
     * 
     */
     List<RaptureApplicationDefinition> getAllApplicationDefinitions();

     /**
     * 
     * 
     */
     List<RaptureLibraryDefinition> getAllLibraryDefinitions();

     /**
     * 
     * 
     */
     List<RaptureApplicationInstance> getAllApplicationInstances();

     /**
     * 
     * 
     */
     RaptureServerGroup getServerGroup(string name);

     /**
     * 
     * 
     */
     RaptureServerGroup addGroupInclusion(string name, string inclusion);

     /**
     * 
     * 
     */
     RaptureServerGroup removeGroupInclusion(string name, string inclusion);

     /**
     * 
     * 
     */
     RaptureServerGroup addGroupExclusion(string name, string exclusion);

     /**
     * 
     * 
     */
     RaptureServerGroup removeGroupExclusion(string name, string exclusion);

     /**
     * 
     * 
     */
     RaptureServerGroup removeGroupEntry(string name, string entry);

     /**
     * 
     * 
     */
     RaptureApplicationDefinition createApplicationDefinition(string name, string ver, string description);

     /**
     * 
     * 
     */
     void deleteApplicationDefinition(string name);

     /**
     * 
     * 
     */
     RaptureApplicationDefinition updateApplicationVersion(string name, string ver);

     /**
     * 
     * 
     */
     RaptureLibraryDefinition createLibraryDefinition(string name, string ver, string description);

     /**
     * 
     * 
     */
     void deleteLibraryDefinition(string name);

     /**
     * 
     * 
     */
     RaptureLibraryDefinition getLibraryDefinition(string name);

     /**
     * 
     * 
     */
     RaptureLibraryDefinition updateLibraryVersion(string name, string ver);

     /**
     * 
     * 
     */
     RaptureServerGroup addLibraryToGroup(string serverGroup, string libraryName);

     /**
     * 
     * 
     */
     RaptureServerGroup removeLibraryFromGroup(string serverGroup, string libraryName);

     /**
     * 
     * 
     */
     RaptureApplicationInstance createApplicationInstance(string name, string description, string serverGroup, string appName, string timeRange, int retryCount, string parameters, string apiUser);

     /**
     * 
     * 
     */
     RaptureApplicationStatus runApplication(string appName, string queueName, Dictionary<string, string> parameterInput, Dictionary<string, string> parameterOutput);

     /**
     * 
     * 
     */
     RaptureApplicationStatus runCustomApplication(string appName, string queueName, Dictionary<string, string> parameterInput, Dictionary<string, string> parameterOutput, string customApplicationPath);

     /**
     * 
     * 
     */
     RaptureApplicationStatus getApplicationStatus(string applicationStatusURI);

     /**
     * 
     * 
     */
     List<RaptureApplicationStatus> getApplicationStatuses(string date);

     /**
     * 
     * 
     */
     List<string> getApplicationStatusDates();

     /**
     * 
     * 
     */
     void archiveApplicationStatuses();

     /**
     * 
     * 
     */
     RaptureApplicationStatus changeApplicationStatus(string applicationStatusURI, RaptureApplicationStatusStep statusCode, string message);

     /**
     * 
     * 
     */
     void recordStatusMessages(string applicationStatusURI, List<string> messages);

     /**
     * 
     * 
     */
     RaptureApplicationStatus terminateApplication(string applicationStatusURI, string reasonMessage);

     /**
     * 
     * 
     */
     void deleteApplicationInstance(string name, string serverGroup);

     /**
     * 
     * 
     */
     RaptureApplicationInstance getApplicationInstance(string name, string serverGroup);

     /**
     * 
     * 
     */
     void updateStatus(string name, string serverGroup, string myServer, string status, bool finished);

     /**
     * 
     * 
     */
     List<string> getApplicationsForServerGroup(string serverGroup);

     /**
     * 
     * 
     */
     List<RaptureApplicationInstance> getApplicationsForServer(string serverName);

     /**
     * 
     * 
     */
     RaptureApplicationDefinition getApplicationDefinition(string name);

     /**
     * 
     * 
     */
     void setRunnerConfig(string name, string value);

     /**
     * 
     * 
     */
     void deleteRunnerConfig(string name);

     /**
     * 
     * 
     */
     RaptureRunnerConfig getRunnerConfig();

     /**
     * 
     * 
     */
     void recordRunnerStatus(string serverName, string serverGroup, string appInstance, string appName, string status);

     /**
     * 
     * 
     */
     void recordInstanceCapabilities(string serverName, string instanceName, Dictionary<string, Object> capabilities);

     /**
     * 
     * 
     */
     Dictionary<string, RaptureInstanceCapabilities> getCapabilities(string serverName, List<string> instanceNames);

     /**
     * 
     * 
     */
     List<string> getRunnerServers();

     /**
     * 
     * 
     */
     RaptureRunnerStatus getRunnerStatus(string serverName);

     /**
     * 
     * 
     */
     void cleanRunnerStatus(int ageInMinutes);

     /**
     * 
     * 
     */
     void markForRestart(string serverName, string name);

}
}

