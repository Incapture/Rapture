/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{
    public interface JarApi {
     /**
     * Indicates whether a given JAR exists.
     * 
     */
     bool jarExists(CallingContext context, string jarUri);

     /**
     * Stores a JAR.
     * 
     */
     void putJar(CallingContext context, string jarUri, byte[] jarContent);

     /**
     * Retrieves a JAR and its metadata. The JAR is represented as a byte array.
     * 
     */
     BlobContainer getJar(CallingContext context, string jarUri);

     /**
     * Removes a JAR from the backing store. There is no undo.
     * 
     */
     void deleteJar(CallingContext context, string jarUri);

     /**
     * Retrieves the number of bytes in a JAR.
     * 
     */
     long getJarSize(CallingContext context, string jarUri);

     /**
     * Retrieves all metadata associated with a JAR.
     * 
     */
     Dictionary<string, string> getJarMetaData(CallingContext context, string jarUri);

     /**
     * Returns full pathnames for an entire subtree as a map of the path to RFI.
     * 
     */
     Dictionary<string, RaptureFolderInfo> listJarsByUriPrefix(CallingContext context, string uriPrefix, int depth);

     /**
     * Indicates whether a given JAR is enabled on this server.
     * 
     */
     bool jarIsEnabled(CallingContext context, string jarUri);

     /**
     * Enables a JAR to be used on this server.
     * 
     */
     void enableJar(CallingContext context, string jarUri);

     /**
     * Disables a JAR from being used on this server.
     * 
     */
     void disableJar(CallingContext context, string jarUri);

	}
}

