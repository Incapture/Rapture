/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{

public interface ScriptDecisionApi {
     /**
     * 
     * 
     */
     List<Workflow> getAllWorkflows();

     /**
     * 
     * 
     */
     List<RaptureFolderInfo> getWorkflowChildren(string workflowURI);

     /**
     * 
     * 
     */
     List<RaptureFolderInfo> getWorkOrderChildren(string parentPath);

     /**
     * 
     * 
     */
     void putWorkflow(Workflow workflow);

     /**
     * 
     * 
     */
     Workflow getWorkflow(string workflowURI);

     /**
     * 
     * 
     */
     Step getWorkflowStep(string stepURI);

     /**
     * 
     * 
     */
     string getStepCategory(string stepURI);

     /**
     * 
     * 
     */
     void addStep(string workflowURI, Step step);

     /**
     * 
     * 
     */
     void removeStep(string workflowURI, string stepName);

     /**
     * 
     * 
     */
     void addTransition(string workflowURI, string stepName, Transition transition);

     /**
     * 
     * 
     */
     void removeTransition(string workflowURI, string stepName, string transitionName);

     /**
     * 
     * 
     */
     void deleteWorkflow(string workflowURI);

     /**
     * 
     * 
     */
     void putWorkflowStepTemplate(WorkflowStepTemplate template);

     /**
     * 
     * 
     */
     WorkflowStepTemplate getWorkflowStepTemplate(string workflowStepTemplateURI);

     /**
     * 
     * 
     */
     void deleteWorkflowStepTemplate(string workflowStepTemplateURI);

     /**
     * 
     * 
     */
     List<RaptureFolderInfo> getWorflowStepTemplateChildren(string parentPath);

     /**
     * 
     * 
     */
     string createWorkOrder(string workflowURI, Dictionary<string, string> argsMap);

     /**
     * 
     * 
     */
     CreateResponse createWorkOrderP(string workflowURI, Dictionary<string, string> argsMap, string appStatusUriPattern);

     /**
     * 
     * 
     */
     void releaseWorkOrderLock(string workOrderURI);

     /**
     * 
     * 
     */
     WorkOrderStatus getWorkOrderStatus(string workOrderURI);

     /**
     * 
     * 
     */
     void writeWorkflowAuditEntry(string workOrderURI, string message, bool error);

     /**
     * 
     * 
     */
     List<WorkOrder> getWorkOrdersByDay(long startTimeInstant);

     /**
     * 
     * 
     */
     WorkOrder getWorkOrder(string workOrderURI);

     /**
     * 
     * 
     */
     Worker getWorker(string workOrderURI, string workerId);

     /**
     * 
     * 
     */
     void cancelWorkOrder(string workOrderURI);

     /**
     * 
     * 
     */
     CreateResponse resumeWorkOrder(string workOrderURI, string resumeStepURI);

     /**
     * 
     * 
     */
     bool wasCancelCalled(string workOrderURI);

     /**
     * 
     * 
     */
     WorkOrderCancellation getCancellationDetails(string workOrderURI);

     /**
     * 
     * 
     */
     WorkOrderDebug getWorkOrderDebug(string workOrderURI);

     /**
     * 
     * 
     */
     void setWorkOrderIdGenConfig(string config, bool force);

     /**
     * 
     * 
     */
     void setContextLiteral(string workerURI, string varAlias, string literalValue);

     /**
     * 
     * 
     */
     void setContextLink(string workerURI, string varAlias, string expressionValue);

     /**
     * 
     * 
     */
     string getContextValue(string workerURI, string varAlias);

     /**
     * 
     * 
     */
     void addErrorToContext(string workerURI, ErrorWrapper errorWrapper);

     /**
     * 
     * 
     */
     List<ErrorWrapper> getErrorsFromContext(string workerURI);

     /**
     * 
     * 
     */
     List<ErrorWrapper> getExceptionInfo(string workOrderURI);

     /**
     * 
     * 
     */
     void reportStepProgress(string workerURI, long stepStartTime, string message, long progress, long max);

     /**
     * 
     * 
     */
     List<AppStatus> getAppStatuses(string prefix);

     /**
     * 
     * 
     */
     List<AppStatusDetails> getAppStatusDetails(string prefix, List<string> extraContextValues);

     /**
     * 
     * 
     */
     WorkflowHistoricalMetrics getMonthlyMetrics(string workflowURI, string jobURI, string argsHashValue, string state);

     /**
     * 
     * 
     */
     LogQueryResponse queryLogs(string workOrderURI, long startTime, long endTime, long keepAlive, long bufferSize, string nextBatchId, string stepName, string stepStartTime);

}
}

