/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{

public interface ScriptStructuredApi {
     /**
     * 
     * 
     */
     void createStructuredRepo(string uri, string config);

     /**
     * 
     * 
     */
     void deleteStructuredRepo(string uri);

     /**
     * 
     * 
     */
     bool structuredRepoExists(string uri);

     /**
     * 
     * 
     */
     StructuredRepoConfig getStructuredRepoConfig(string uri);

     /**
     * 
     * 
     */
     List<StructuredRepoConfig> getStructuredRepoConfigs();

     /**
     * 
     * 
     */
     void createTableUsingSql(string schema, string rawSql);

     /**
     * 
     * 
     */
     void createTable(string tableUri, Dictionary<string, string> columns);

     /**
     * 
     * 
     */
     void dropTable(string tableUri);

     /**
     * 
     * 
     */
     bool tableExists(string tableUri);

     /**
     * 
     * 
     */
     Dictionary<string, string> describeTable(string tableUri);

     /**
     * 
     * 
     */
     void addTableColumns(string tableUri, Dictionary<string, string> columns);

     /**
     * 
     * 
     */
     void deleteTableColumns(string tableUri, List<string> columnNames);

     /**
     * 
     * 
     */
     void updateTableColumns(string tableUri, Dictionary<string, string> columns);

     /**
     * 
     * 
     */
     void renameTableColumns(string tableUri, Dictionary<string, string> columnNames);

     /**
     * 
     * 
     */
     void createIndex(string tableUri, string indexName, List<string> columnNames);

     /**
     * 
     * 
     */
     void dropIndex(string tableUri, string indexName);

     /**
     * 
     * 
     */
     List<Dictionary<string, Object>> selectJoinedRows(List<string> tableUris, List<string> columnNames, string from, string where, List<string> order, bool ascending, int limit);

     /**
     * 
     * 
     */
     List<Dictionary<string, Object>> selectUsingSql(string schema, string rawSql);

     /**
     * 
     * 
     */
     List<Dictionary<string, Object>> selectRows(string tableUri, List<string> columnNames, string where, List<string> order, bool ascending, int limit);

     /**
     * 
     * 
     */
     void insertUsingSql(string schema, string rawSql);

     /**
     * 
     * 
     */
     void insertRow(string tableUri, Dictionary<string, Object> values);

     /**
     * 
     * 
     */
     void insertRows(string tableUri, List<Dictionary<string, Object>> values);

     /**
     * 
     * 
     */
     void deleteUsingSql(string schema, string rawSql);

     /**
     * 
     * 
     */
     void deleteRows(string tableUri, string where);

     /**
     * 
     * 
     */
     void updateUsingSql(string schema, string rawSql);

     /**
     * 
     * 
     */
     void updateRows(string tableUri, Dictionary<string, Object> values, string where);

     /**
     * 
     * 
     */
     bool begin();

     /**
     * 
     * 
     */
     bool commit();

     /**
     * 
     * 
     */
     bool rollback();

     /**
     * 
     * 
     */
     bool abort(string transactionId);

     /**
     * 
     * 
     */
     List<string> getTransactions();

     /**
     * 
     * 
     */
     string getDdl(string uri, bool includeTableData);

     /**
     * 
     * 
     */
     string getCursorUsingSql(string schema, string rawSql);

     /**
     * 
     * 
     */
     string getCursor(string tableUri, List<string> columnNames, string where, List<string> order, bool ascending, int limit);

     /**
     * 
     * 
     */
     string getCursorForJoin(List<string> tableUris, List<string> columnNames, string from, string where, List<string> order, bool ascending, int limit);

     /**
     * 
     * 
     */
     List<Dictionary<string, Object>> next(string tableUri, string cursorId, int count);

     /**
     * 
     * 
     */
     List<Dictionary<string, Object>> previous(string tableUri, string cursorId, int count);

     /**
     * 
     * 
     */
     void closeCursor(string tableUri, string cursorId);

     /**
     * 
     * 
     */
     void createProcedureCallUsingSql(string procUri, string rawSql);

     /**
     * 
     * 
     */
     StoredProcedureResponse callProcedure(string procUri, StoredProcedureParams rparams);

     /**
     * 
     * 
     */
     void dropProcedureUsingSql(string procUri, string rawSql);

}
}

