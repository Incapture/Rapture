/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{
    public interface ReventApi {
     /**
     * This method is used to retrieve information about an event (primarily the scripts attached to it).
     * 
     */
     RaptureEvent getEvent(CallingContext context, string eventUri);

     /**
     * This method puts an event in the system.
     * 
     */
     void putEvent(CallingContext context, RaptureEvent revent);

     /**
     * This method removes an event (and any attached scripts) from the system. If the event is fired at a later point nothing will happen as there would be no scripts attached.
     * 
     */
     void deleteEvent(CallingContext context, string eventUri);

     /**
     * Return a list of full display names of the paths below this one. Ideally optimized depending on the repo.
     * 
     */
     List<RaptureFolderInfo> listEventsByUriPrefix(CallingContext context, string eventUriPrefix);

     /**
     *  This method is used to attach a script to an event. A final parameter signals whether this script should be detached from the event when it is fired.
     * 
     */
     void addEventScript(CallingContext context, string eventUri, string scriptUri, bool performOnce);

     /**
     * This method detaches a script from the event.
     * 
     */
     void deleteEventScript(CallingContext context, string eventUri, string scriptUri);

     /**
     *  This method is used to attach a message to an event. When the event is fired a message is sent to the pipeline with content
          based on the context of the event and parameters passed to this call.
     * 
     */
     void addEventMessage(CallingContext context, string eventUri, string name, string pipeline, Dictionary<string, string> rparams);

     /**
     *  This method reverses the message attachment, using the same name as passed in the original attachMessage call
     * 
     */
     void deleteEventMessage(CallingContext context, string eventUri, string name);

     /**
     *  This method is used to attach a notification to an event. When the event is fired a message is sent to the notification with content
          based on the context of the event and parameters passed to this call.
     * 
     */
     void addEventNotification(CallingContext context, string eventUri, string name, string notification, Dictionary<string, string> rparams);

     /**
     *  This method reverses the notification attachment, using the same name as passed in the original attachNotification call
     * 
     */
     void deleteEventNotification(CallingContext context, string eventUri, string name);

     /**
     *  This method is used to attach a workflow (dp) to an event. When the event is fired an instance of the workflow
        is started.
     * 
     */
     void addEventWorkflow(CallingContext context, string eventUri, string name, string workflowUri, Dictionary<string, string> rparams);

     /**
     *  This method reverses the notification attachment, using the same name as passed in the original attachWorflowToEvent call.
     * 
     */
     void deleteEventWorkflow(CallingContext context, string eventUri, string name);

     /**
     * This method fires an event, scheduling any attached scripts to run. The optional displayName and context
         parameters are passed to the script when fired.
     * 
     */
     bool runEvent(CallingContext context, string eventUri, string associatedUri, string eventContext);

     /**
     * This method fires an event, scheduling any attached workflows or scripts to run. The optional associatedURI and context
         map are passed to the event workflow when fired. The event's unique id is returned. This id is passed to any scripts, workflows, etc
         invoked by the event
     * 
     */
     RunEventHandle runEventWithContext(CallingContext context, string eventUri, string associatedUri, Dictionary<string, string> eventContextMap);

     /**
     * Determines whether an event has been defined.
     * 
     */
     bool eventExists(CallingContext context, string eventUri);

     /**
     * Removes a folder and its contents recursively, including empty subfolders. Validates entitlement on individual events and folders. Returns a list of the events and folders removed.
     * 
     */
     List<string> deleteEventsByUriPrefix(CallingContext context, string uriPrefix);

	}
}

