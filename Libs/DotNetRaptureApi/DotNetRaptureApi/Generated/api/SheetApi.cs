/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{
    public interface SheetApi {
     /**
     * Creates a sheet repository.
     * 
     */
     void createSheetRepo(CallingContext context, string sheetURI, string config);

     /**
     * Gets the sheet repository's config metadata.
     * 
     */
     SheetRepoConfig getSheetRepoConfig(CallingContext context, string sheetURI);

     /**
     * Gets repository config metadata for all sheets.
     * 
     */
     List<SheetRepoConfig> getSheetRepoConfigs(CallingContext context);

     /**
     * Creates an empty sheet at the given URI. If the sheet exists it is unaffected.
     * 
     */
     RaptureSheet createSheet(CallingContext context, string sheetURI);

     /**
     * Deletes a sheet and all its contents.
     * 
     */
     RaptureSheet deleteSheet(CallingContext context, string sheetURI);

     /**
     * Checks whether a sheet exists at a given URI.
     * 
     */
     bool sheetExists(CallingContext context, string sheetURI);

     /**
     * This method removes a Sheet Repository and its data from the Rapture system. There is no undo. It does not delete the sheets stored in the repo, so calling this while there are still sheets inside this repo will cause a memory leak.
     * 
     */
     void deleteSheetRepo(CallingContext context, string repoURI);

     /**
     * This API call can be used to determine whether a given type exists in a given authority.
     * 
     */
     bool sheetRepoExists(CallingContext context, string repoURI);

     /**
     * Return full pathnames for an entire subtree as a map of path to RFI
     * 
     */
     Dictionary<string, RaptureFolderInfo> listSheetsByUriPrefix(CallingContext context, string uriPrefix, int depth);

     /**
     * Removes a folder and its contents recursively, including empty subfolders. Returns a list of the sheets and folders removed.
     * 
     */
     List<string> deleteSheetsByUriPrefix(CallingContext context, string uriPrefix);

     /**
     * Assigns the value passed to the specified cell.
     * 
     */
     string setSheetCell(CallingContext context, string sheetURI, int row, int column, string value, int tabId);

     /**
     * Sets values in bulk for a rectangle of cells. The inputs are specified as a 1-dimensional list, and the list is wrapped based on the width parameter.
     * 
     */
     void setBlock(CallingContext context, string sheetURI, int startRow, int startColumn, List<string> values, int height, int width, int tabId);

     /**
     * Retrieves the data in a cell.
     * 
     */
     string getSheetCell(CallingContext context, string sheetURI, int row, int column, int tabId);

     /**
     * Returns all the cells in a sheet. The epoch is the callers best known understanding as to the state of its knowledge of the sheet. Starting at 0 retrieves every cell. The
         latest epoch is returned in the response to this call. Once you know the epoch you can call this method to give the updates since that
         epoch.
     * 
     */
     List<RaptureSheetCell> findCellsByEpoch(CallingContext context, string sheetURI, int tabId, long epoch);

     /**
     * Get this sheet in a display form - filling in the blanks, and setting the format where appropriate, and passing a list
          of the formats in play. This should be sufficient for a client side renderer to do the necessary work with no further calls needed
        
     * 
     */
     SheetAndMeta getSheetAndMeta(CallingContext context, string sheetURI);

     /**
     * Renders the sheet to a PDF document, and saves the PDF as a blob in Rapture.
     * 
     */
     void exportSheetAsPdf(CallingContext context, string sheetURI, string blobURI);

     /**
     * Gets all the style objects associated with this sheet. See also createStyle.
     * 
     */
     List<RaptureSheetStyle> getAllStyles(CallingContext context, string sheetURI);

     /**
     * Removes a style associated with this sheet.
     * 
     */
     void removeStyle(CallingContext context, string sheetURI, string styleName);

     /**
     * Creates a style for this sheet. This can be used by GUIs when displaying the sheet.
     * 
     */
     RaptureSheetStyle createStyle(CallingContext context, string sheetURI, RaptureSheetStyle style);

     /**
     * Get all the scripts associated with this sheet. See also: createScript.
     * 
     */
     List<RaptureSheetScript> getAllScripts(CallingContext context, string sheetURI);

     /**
     *  Removes a script associated with this sheet.
     * 
     */
     void removeScript(CallingContext context, string sheetURI, string scriptName);

     /**
     * Creates a Reflex script and associates it with a given sheet. This script gets embedded into the sheet, i.e. it cannot be accessed as a standard Rapture script using the Script API's retrieveScript method. See also runScriptOnSheet.
     * 
     */
     RaptureSheetScript createScript(CallingContext context, string sheetURI, string scriptName, RaptureSheetScript script);

     /**
     * Runs a script that is associated with this sheet.
     * 
     */
     void runScriptOnSheet(CallingContext context, string sheetURI, string scriptName);

     /**
     * Gets a particular script associated with this sheet.
     * 
     */
     RaptureSheetScript getSheetScript(CallingContext context, string sheetURI, string scriptName);

     /**
     * Returns a String with Reflex code that can be used to create the entire sheet. This is useful if you want to clone a sheet onto a different instance of Rapture, or store it for installation as a feature.
     * 
     */
     string exportSheetAsScript(CallingContext context, string sheetURI);

     /**
     * Get all the ranges of interest that are marked on this sheet. See also: getSheetNamedSelection.
     * 
     */
     List<RaptureSheetRange> getSheetNamedSelections(CallingContext context, string sheetURI);

     /**
     * Deletes a range associated with this sheet.
     * 
     */
     void deleteSheetNamedSelection(CallingContext context, string sheetURI, string rangeName);

     /**
     * Creates a range in the sheet. A range is a named set of sequential rows and columns.
     * 
     */
     RaptureSheetRange createSheetNamedSelection(CallingContext context, string sheetURI, string rangeName, RaptureSheetRange range);

     /**
     * Get all the notes associated with this sheet. See also createSheetNote.
     * 
     */
     List<RaptureSheetNote> getSheetNotes(CallingContext context, string sheetURI);

     /**
     * Deletes a note associated with this sheet.
     * 
     */
     void deleteSheetNote(CallingContext context, string sheetURI, string noteId);

     /**
     * Adds a note to a sheet. One sheet can have multiple notes associated with it. A note is a text note with information about who created it and when.
     * 
     */
     RaptureSheetNote createSheetNote(CallingContext context, string sheetURI, RaptureSheetNote note);

     /**
     * Copies everything from one sheet to another. This is currently only allowed within sheets that have the same authority.
     * 
     */
     void cloneSheet(CallingContext context, string sheetURI, string newSheetURI);

     /**
     * Get the contents of a specified range on a sheet.
     * 
     */
     List<RaptureSheetRow> getSheetNamedSelection(CallingContext context, string sheetURI, string rangeName);

     /**
     * Deletes an entire column in the sheet, in all tabIds.
     * 
     */
     void deleteSheetColumn(CallingContext context, string sheetURI, int column);

     /**
     * Deletes an entire row in the sheet, in all tabIds.
     * 
     */
     void deleteSheetRow(CallingContext context, string sheetURI, int row);

     /**
     * Deletes data stored in a given cell.
     * 
     */
     void deleteSheetCell(CallingContext context, string sheetURI, int row, int column, int tabId);

	}
}

