/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{
    public interface QuestionApi {
     /**
     * Defines or redefines a question template.
     * 
     */
     void putTemplate(CallingContext context, string qTemplateURI, QTemplate template);

     /**
     * Retrieves a question template.
     * 
     */
     QTemplate getTemplate(CallingContext context, string qTemplateURI);

     /**
     * Retrieve a question for a URI.
     * 
     */
     Question getQuestion(CallingContext context, string questionURI);

     /**
     * Asks a question using a template. The callback may not contain slashes.
     * 
     */
     string askQuestion(CallingContext context, string qTemplateURI, Dictionary<string, string> variables, string callback);

     /**
     * Lists what questions are pending for a given condition.
     * 
     */
     List<QNotification> getQNotifications(CallingContext context, QuestionSearch search);

     /**
     * Gets the URIs for a questionSearch.
     * 
     */
     List<string> getQNotificationURIs(CallingContext context, QuestionSearch search);

     /**
     * Attaches an answer to the given question.
     * 
     */
     void answerQuestion(CallingContext context, string questionURI, string response, Dictionary<string, Object> data);

	}
}

