/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{
    public interface IdGenApi {
     /**
     * Gets a list of idGens that have the given authority. Each idGen has a URI, and the authority is part of the URI. idGens whose URIs have an authority that matches the passed parameter will be returned.
     * 
     */
     List<RaptureIdGenConfig> getIdGenConfigs(CallingContext context, string authority);

     /**
     * Retrieves a single idGen config given its name.
     * 
     */
     RaptureIdGenConfig getIdGenConfig(CallingContext context, string idGenUri);

     /**
     * This method is used to define a new idGen in a given authority. The config parameter defines the 
         storage to be used for managing the idGen.
     * 
     */
     RaptureIdGenConfig createIdGen(CallingContext context, string idGenUri, string config);

     /**
     * Returns true if the idGen was found.
     * 
     */
     bool idGenExists(CallingContext context, string idGenUri);

     /**
     * This method is used to delete a previously defined idGen.
     * 
     */
     void deleteIdGen(CallingContext context, string idGenUri);

     /**
     * This method can be used to reset an idGen to a new id - all future requests will start from this new point.
     * 
     */
     void setIdGen(CallingContext context, string idGenUri, long count);

     /**
     * This method is used to increment the idGen and returns a string that corresponds to the newly generated id.
     * 
     */
     string next(CallingContext context, string idGenUri);

     /**
     * This method is used to increment the idGen by given amount and returns a string that corresponds to the newly generated id.
     * 
     */
     string nextIds(CallingContext context, string idGenUri, long num);

     /**
     * Sets up any idGens needed by Rapture by default, should be called from any startup scripts. If force is set to true, it will force the config
         to be set up again, even if it already exists.
     * 
     */
     void setupDefaultIdGens(CallingContext context, bool force);

	}
}

