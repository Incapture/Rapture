/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{
    public interface NotificationApi {
     /**
     * This method retrieves the notification providers in use at this Rapture system.
     * 
     */
     List<RaptureNotificationConfig> getNotificationManagerConfigs(CallingContext context);

     /**
     * Returns a list of full display names of the paths below this one. Ideally optimized depending on the repo.
     * 
     */
     List<RaptureFolderInfo> listNotificationsByUriPrefix(CallingContext context, string uriPrefix);

     /**
     * Notification providers have an associated purpose - this method returns only those providers that match the given purpose.
     * 
     */
     List<RaptureNotificationConfig> findNotificationManagerConfigsByPurpose(CallingContext context, string purpose);

     /**
     * This method creates a definition of a notification provider.
     * 
     */
     RaptureNotificationConfig createNotificationManager(CallingContext context, string notificationManagerUri, string config, string purpose);

     /**
     * Indicates whether a notification provider with notificationName was found.
     * 
     */
     bool notificationManagerExists(CallingContext context, string notificationManagerUri);

     /**
     * This method returns the low level config for a given notification provider.
     * 
     */
     RaptureNotificationConfig getNotificationManagerConfig(CallingContext context, string notificationManagerUri);

     /**
     * This method removes a notification provider and all its content.
     * 
     */
     void deleteNotificationManager(CallingContext context, string notificationManagerUri);

     /**
     * This method retrieves the current epoch number for a given notification point.
     * 
     */
     long getLatestNotificationEpoch(CallingContext context, string notificationManagerUri);

     /**
     * This method pushes a notification to a provider.
     * 
     */
     string publishNotification(CallingContext context, string notificationManagerUri, string referenceId, string content, string contentType);

     /**
     * This method returns the changes seen on a notification since an epoch. A client would then update its latest epoch by using the value in the 
       notification result.
     * 
     */
     NotificationResult findNotificationsAfterEpoch(CallingContext context, string notificationManagerUri, long epoch);

     /**
     * This method returns a notification message given its id.
     * 
     */
     NotificationInfo getNotification(CallingContext context, string notificationUri, string id);

	}
}

