/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{

public interface ScriptReventApi {
     /**
     * 
     * 
     */
     RaptureEvent getEvent(string eventUri);

     /**
     * 
     * 
     */
     void putEvent(RaptureEvent revent);

     /**
     * 
     * 
     */
     void deleteEvent(string eventUri);

     /**
     * 
     * 
     */
     List<RaptureFolderInfo> listEventsByUriPrefix(string eventUriPrefix);

     /**
     * 
     * 
     */
     void addEventScript(string eventUri, string scriptUri, bool performOnce);

     /**
     * 
     * 
     */
     void deleteEventScript(string eventUri, string scriptUri);

     /**
     * 
     * 
     */
     void addEventMessage(string eventUri, string name, string pipeline, Dictionary<string, string> rparams);

     /**
     * 
     * 
     */
     void deleteEventMessage(string eventUri, string name);

     /**
     * 
     * 
     */
     void addEventNotification(string eventUri, string name, string notification, Dictionary<string, string> rparams);

     /**
     * 
     * 
     */
     void deleteEventNotification(string eventUri, string name);

     /**
     * 
     * 
     */
     void addEventWorkflow(string eventUri, string name, string workflowUri, Dictionary<string, string> rparams);

     /**
     * 
     * 
     */
     void deleteEventWorkflow(string eventUri, string name);

     /**
     * 
     * 
     */
     bool runEvent(string eventUri, string associatedUri, string eventContext);

     /**
     * 
     * 
     */
     RunEventHandle runEventWithContext(string eventUri, string associatedUri, Dictionary<string, string> eventContextMap);

     /**
     * 
     * 
     */
     bool eventExists(string eventUri);

     /**
     * 
     * 
     */
     List<string> deleteEventsByUriPrefix(string uriPrefix);

}
}

