/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{

public interface ScriptSeriesApi {
     /**
     * 
     * 
     */
     void createSeriesRepo(string seriesRepoUri, string config);

     /**
     * 
     * 
     */
     bool seriesRepoExists(string seriesRepoUri);

     /**
     * 
     * 
     */
     bool seriesExists(string seriesUri);

     /**
     * 
     * 
     */
     SeriesRepoConfig getSeriesRepoConfig(string seriesRepoUri);

     /**
     * 
     * 
     */
     List<SeriesRepoConfig> getSeriesRepoConfigs();

     /**
     * 
     * 
     */
     void deleteSeriesRepo(string seriesRepoUri);

     /**
     * 
     * 
     */
     void deleteSeries(string seriesRepoUri);

     /**
     * 
     * 
     */
     List<string> deleteSeriesByUriPrefix(string seriesUri);

     /**
     * 
     * 
     */
     void addDoubleToSeries(string seriesUri, string pointKey, double pointValue);

     /**
     * 
     * 
     */
     void addLongToSeries(string seriesUri, string pointKey, long pointValue);

     /**
     * 
     * 
     */
     void addStringToSeries(string seriesUri, string pointKey, string pointValue);

     /**
     * 
     * 
     */
     void addStructureToSeries(string seriesUri, string pointKey, string pointValue);

     /**
     * 
     * 
     */
     void addDoublesToSeries(string seriesUri, List<string> pointKeys, List<double> pointValues);

     /**
     * 
     * 
     */
     void addLongsToSeries(string seriesUri, List<string> pointKeys, List<long> pointValues);

     /**
     * 
     * 
     */
     void addStringsToSeries(string seriesUri, List<string> pointKeys, List<string> pointValues);

     /**
     * 
     * 
     */
     void addStructuresToSeries(string seriesUri, List<string> pointKeys, List<string> pointValues);

     /**
     * 
     * 
     */
     void deletePointsFromSeriesByPointKey(string seriesUri, List<string> pointKeys);

     /**
     * 
     * 
     */
     void deletePointsFromSeries(string seriesUri);

     /**
     * 
     * 
     */
     SeriesPoint getLastPoint(string seriesUri);

     /**
     * 
     * 
     */
     List<SeriesPoint> getPoints(string seriesUri);

     /**
     * 
     * 
     */
     List<SeriesPoint> getPointsAfter(string seriesUri, string startColumn, int maxNumber);

     /**
     * 
     * 
     */
     List<SeriesPoint> getPointsAfterReverse(string seriesUri, string startColumn, int maxNumber);

     /**
     * 
     * 
     */
     List<SeriesPoint> getPointsInRange(string seriesUri, string startColumn, string endColumn, int maxNumber);

     /**
     * 
     * 
     */
     List<SeriesDouble> getPointsAsDoubles(string seriesUri);

     /**
     * 
     * 
     */
     List<SeriesDouble> getPointsAfterAsDoubles(string seriesUri, string startColumn, int maxNumber);

     /**
     * 
     * 
     */
     List<SeriesDouble> getPointsInRangeAsDoubles(string seriesUri, string startColumn, string endColumn, int maxNumber);

     /**
     * 
     * 
     */
     List<SeriesString> getPointsAsStrings(string seriesUri);

     /**
     * 
     * 
     */
     List<SeriesString> getPointsAfterAsStrings(string seriesUri, string startColumn, int maxNumber);

     /**
     * 
     * 
     */
     List<SeriesString> getPointsInRangeAsStrings(string seriesUri, string startColumn, string endColumn, int maxNumber);

     /**
     * 
     * 
     */
     List<SeriesPoint> runSeriesScript(string scriptContent, List<string> arguments);

     /**
     * 
     * 
     */
     void runSeriesScriptQuiet(string scriptContent, List<string> arguments);

     /**
     * 
     * 
     */
     Dictionary<string, RaptureFolderInfo> listSeriesByUriPrefix(string uriPrefix, int depth);

}
}

