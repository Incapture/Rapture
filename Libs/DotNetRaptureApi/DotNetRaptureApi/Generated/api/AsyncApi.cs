/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{
    public interface AsyncApi {
     /**
     * Run a passed script in an asynchronous manner. Tells Rapture to run the script as part of a predefined internal workflow,
        and returns workOrderURI that can be used in other calls to retrieve the status. The second parameter is the set of
        parameters that will be passed to the script upon execution.
     * 
     */
     string asyncReflexScript(CallingContext context, string reflexScript, Dictionary<string, string> parameters);

     /**
     * Run a script that has already been loaded onto Rapture in an asynchronous manner. The script is named through its
        uri. As with asyncReflexScript, the parameters passed in the last parameter to this function are passed
        to the script upon invocation, and the return value from this function is a workOrderURI that can be used to determine
        the ultimate status of this WorkOrder.
     * 
     */
     string asyncReflexReference(CallingContext context, string scriptURI, Dictionary<string, string> parameters);

     /**
     * Retrieve the status of a given async task. Will return null if the task id is not known to the environment.
     * 
     */
     WorkOrderStatus asyncStatus(CallingContext context, string taskId);

     /**
     * Sets up workflows needed to run any of these scripts. Should be called by Rapture internally on init
     * 
     */
     void setupDefaultWorkflows(CallingContext context, bool force);

	}
}

