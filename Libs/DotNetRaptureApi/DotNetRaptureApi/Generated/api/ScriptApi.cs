/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{
    public interface ScriptApi {
     /**
     * Creates a script in the system.
     * 
     */
     RaptureScript createScript(CallingContext context, string scriptURI, RaptureScriptLanguage language, RaptureScriptPurpose purpose, string script);

     /**
     * Creates a symbolic link to a script in the system.
     * 
     */
     void createScriptLink(CallingContext context, string fromScriptURI, string toScriptURI);

     /**
     * Removes a symbolic link to a script in the system.
     * 
     */
     void removeScriptLink(CallingContext context, string fromScriptURI);

     /**
     * Sets the parameters that should be used for a script. Parameters are the names of the arguments that should be passed in, not the argument values themselves.
     * 
     */
     RaptureScript setScriptParameters(CallingContext context, string scriptURI, List<RaptureParameter> parameters);

     /**
     * Returns true the given script was found.
     * 
     */
     bool doesScriptExist(CallingContext context, string scriptURI);

     /**
     * Removes the script from the system.
     * 
     */
     void deleteScript(CallingContext context, string scriptURI);

     /**
     * Retrieves all of the scripts within a authority.
     * 
     */
     List<string> getScriptNames(CallingContext context, string scriptURI);

     /**
     * Retrieves the contents of a script.
     * 
     */
     RaptureScript getScript(CallingContext context, string scriptURI);

     /**
     * Stores a script in the system using a RaptureScript object. 
          TODO is there really any point in passing the URI? The storage location is based on RaptureScript.
          All we do is extract the Authority from the URI; the caller can do that. 
     * 
     */
     RaptureScript putScript(CallingContext context, string scriptURI, RaptureScript script);

     /**
     * Store a script in the system using raw inputs. Most users will want the value PROGRAM for purpose.
     * 
     */
     RaptureScript putRawScript(CallingContext context, string scriptURI, string content, string language, string purpose, List<string> param_types, List<string> param_names);

     /**
     * Run a script in the Rapture environment. 
     * 
     */
     string runScript(CallingContext context, string scriptURI, Dictionary<string, string> parameters);

     /**
     * Runs a script in the Rapture environment. 
     * 
     */
     ScriptResult runScriptExtended(CallingContext context, string scriptURI, Dictionary<string, string> parameters);

     /**
     * Parses the script and returns any error messages from the parsing process. If the String returned is empty the script is valid Reflex.
     * 
     */
     string checkScript(CallingContext context, string scriptURI);

     /**
     * Creates a Reflex REPL session that can be written to. These sessions eventually die if not used
           or killed
     * 
     */
     string createREPLSession(CallingContext context);

     /**
     * Kills an existing Reflex REPL session.
     * 
     */
     void destroyREPLSession(CallingContext context, string sessionId);

     /**
     * Adds a line to the current Reflex session, returns back what the parser/evaluator says
     * 
     */
     string evaluateREPL(CallingContext context, string sessionId, string line);

     /**
     * Archive/delete old REPL sessions
     * 
     */
     void archiveOldREPLSessions(CallingContext context, long ageInMinutes);

     /**
     * Creates a code snippet and stores it in Rapture.
     * 
     */
     RaptureSnippet createSnippet(CallingContext context, string snippetURI, string snippet);

     /**
     * Returns all children snippets with a given prefix.
     * 
     */
     List<RaptureFolderInfo> getSnippetChildren(CallingContext context, string prefix);

     /**
     * Deletes a snippet by its URI.
     * 
     */
     void deleteSnippet(CallingContext context, string snippetURI);

     /**
     * Retrieves a snippet by its URI.
     * 
     */
     RaptureSnippet getSnippet(CallingContext context, string snippetURI);

     /**
     * Returns full pathnames for an entire subtree as a map of path to RFI.
     * 
     */
     Dictionary<string, RaptureFolderInfo> listScriptsByUriPrefix(CallingContext context, string uriPrefix, int depth);

     /**
     * Removes a folder and its contents recursively, including empty subfolders. Returns a list of the scripts and folders removed.
     * 
     */
     List<string> deleteScriptsByUriPrefix(CallingContext context, string uriPrefix);

	}
}

