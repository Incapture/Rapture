/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{

public interface ScriptScheduleApi {
     /**
     * 
     * 
     */
     RaptureJob createJob(string jobURI, string description, string scriptURI, string cronExpression, string timeZone, Dictionary<string, string> jobParams, bool autoActivate);

     /**
     * 
     * 
     */
     RaptureJob createWorkflowJob(string jobURI, string description, string workflowURI, string cronExpression, string timeZone, Dictionary<string, string> jobParams, bool autoActivate, int maxRuntimeMinutes, string appStatusNamePattern);

     /**
     * 
     * 
     */
     void activateJob(string jobURI, Dictionary<string, string> extraParams);

     /**
     * 
     * 
     */
     void deactivateJob(string jobURI);

     /**
     * 
     * 
     */
     RaptureJob retrieveJob(string jobURI);

     /**
     * 
     * 
     */
     List<RaptureJob> retrieveJobs(string uriPrefix);

     /**
     * 
     * 
     */
     void runJobNow(string jobURI, Dictionary<string, string> extraParams);

     /**
     * 
     * 
     */
     void resetJob(string jobURI);

     /**
     * 
     * 
     */
     RaptureJobExec retrieveJobExec(string jobURI, long execTime);

     /**
     * 
     * 
     */
     void deleteJob(string jobURI);

     /**
     * 
     * 
     */
     List<string> getJobs();

     /**
     * 
     * 
     */
     List<RaptureJobExec> getUpcomingJobs();

     /**
     * 
     * 
     */
     WorkflowExecsStatus getWorkflowExecsStatus();

     /**
     * 
     * 
     */
     JobErrorAck ackJobError(string jobURI, long execTime, string jobErrorType);

     /**
     * 
     * 
     */
     RaptureJobExec getNextExec(string jobURI);

     /**
     * 
     * 
     */
     List<RaptureJobExec> getJobExecs(string jobURI, int start, int count, bool reversed);

     /**
     * 
     * 
     */
     List<RaptureJobExec> batchGetJobExecs(List<string> jobURI, int start, int count, bool reversed);

     /**
     * 
     * 
     */
     bool isJobReadyToRun(string toJobURI);

     /**
     * 
     * 
     */
     List<TimedEventRecord> getCurrentWeekTimeRecords(int weekOffsetfromNow);

     /**
     * 
     * 
     */
     List<TimedEventRecord> getCurrentDayJobs();

}
}

