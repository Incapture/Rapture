/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI.Common.FixedTypes;

namespace DotNetRaptureAPI
{
    public interface AuditApi {
     /**
     * Sets up anything needed for audit to run properly. This should be called from the _startup.rfx script. This call is used internally by Rapture on startup, and is normally called only for debugging purposes.
     * 
     */
     void setup(CallingContext context, bool force);

     /**
     * This method creates a new audit log, given a name and a config string. The config string defines the implementation to be used to store the audit entries.
     * 
     */
     void createAuditLog(CallingContext context, string name, string config);

     /**
     * This method checks whether an audit log exists at the specified URI. The log must have been created using createAuditLog.
     * 
     */
     bool doesAuditLogExist(CallingContext context, string logURI);

     /**
     * This method searches for audit logs whose name follows the pattern prefix/anything_else/under/here, where prefix is the argument that is passed in.
     * 
     */
     List<RaptureFolderInfo> getChildren(CallingContext context, string prefix);

     /**
     * This method removes a previously created audit log.
     * 
     */
     void deleteAuditLog(CallingContext context, string logURI);

     /**
     * This method retrieves the config information for a previously created audit log.
     * 
     */
     AuditLogConfig getAuditLog(CallingContext context, string logURI);

     /**
     * This method writes an audit entry to the audit log specified by the URI parameter.
     * 
     */
     void writeAuditEntry(CallingContext context, string logURI, string category, int level, string message);

     /**
     * This method writes an audit entry to an audit log.
     * 
     */
     void writeAuditEntryData(CallingContext context, string logURI, string category, int level, string message, Dictionary<string, Object> data);

     /**
     * This method retrieves previously registered log entries, given a maximum number of entries to return.
     * 
     */
     List<AuditLogEntry> getRecentLogEntries(CallingContext context, string logURI, int count);

     /**
     * This method retrieves any entries since a given entry was retrieved. The date of this audit entry is used to determine the start point of the query.
     * 
     */
     List<AuditLogEntry> getEntriesSince(CallingContext context, string logURI, AuditLogEntry when);

	}
}

