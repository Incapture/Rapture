/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.structured
{

public class HttpStructuredApi : BaseHttpApi , StructuredApi, ScriptStructuredApi {
	public HttpStructuredApi(HttpLoginApi login) : base(login, "structured") {
	
	}
		
	   
	    public void createStructuredRepo(CallingContext context,  string uri,  string config)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateStructuredRepoPayload requestObj = new CreateStructuredRepoPayload();
	        requestObj.uri = uri;
	        requestObj.config = config;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATESTRUCTUREDREPO", RaptureSerializer.SerializeJson<CreateStructuredRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in createStructuredRepo, no response returned");
	        }
	   
	    public void deleteStructuredRepo(CallingContext context,  string uri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteStructuredRepoPayload requestObj = new DeleteStructuredRepoPayload();
	        requestObj.uri = uri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETESTRUCTUREDREPO", RaptureSerializer.SerializeJson<DeleteStructuredRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteStructuredRepo, no response returned");
	        }
	   
	    public bool structuredRepoExists(CallingContext context,  string uri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            StructuredRepoExistsPayload requestObj = new StructuredRepoExistsPayload();
	        requestObj.uri = uri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("STRUCTUREDREPOEXISTS", RaptureSerializer.SerializeJson<StructuredRepoExistsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in structuredRepoExists, no response returned");
	        }
	   
	    public StructuredRepoConfig getStructuredRepoConfig(CallingContext context,  string uri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetStructuredRepoConfigPayload requestObj = new GetStructuredRepoConfigPayload();
	        requestObj.uri = uri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSTRUCTUREDREPOCONFIG", RaptureSerializer.SerializeJson<GetStructuredRepoConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<StructuredRepoConfig>(resp.response.content);
	            }
	             throw new Exception("Error in getStructuredRepoConfig, no response returned");
	        }
	   
	    public List<StructuredRepoConfig> getStructuredRepoConfigs(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetStructuredRepoConfigsPayload requestObj = new GetStructuredRepoConfigsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSTRUCTUREDREPOCONFIGS", RaptureSerializer.SerializeJson<GetStructuredRepoConfigsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<StructuredRepoConfig>>(resp.response.content);
	            }
	             throw new Exception("Error in getStructuredRepoConfigs, no response returned");
	        }
	   
	    public void createTableUsingSql(CallingContext context,  string schema,  string rawSql)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateTableUsingSqlPayload requestObj = new CreateTableUsingSqlPayload();
	        requestObj.schema = schema;
	        requestObj.rawSql = rawSql;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATETABLEUSINGSQL", RaptureSerializer.SerializeJson<CreateTableUsingSqlPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in createTableUsingSql, no response returned");
	        }
	   
	    public void createTable(CallingContext context,  string tableUri,  Dictionary<string, string> columns)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateTablePayload requestObj = new CreateTablePayload();
	        requestObj.tableUri = tableUri;
	        requestObj.columns = columns;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATETABLE", RaptureSerializer.SerializeJson<CreateTablePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in createTable, no response returned");
	        }
	   
	    public void dropTable(CallingContext context,  string tableUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DropTablePayload requestObj = new DropTablePayload();
	        requestObj.tableUri = tableUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DROPTABLE", RaptureSerializer.SerializeJson<DropTablePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in dropTable, no response returned");
	        }
	   
	    public bool tableExists(CallingContext context,  string tableUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            TableExistsPayload requestObj = new TableExistsPayload();
	        requestObj.tableUri = tableUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("TABLEEXISTS", RaptureSerializer.SerializeJson<TableExistsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in tableExists, no response returned");
	        }
	   
	    public Dictionary<string, string> describeTable(CallingContext context,  string tableUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DescribeTablePayload requestObj = new DescribeTablePayload();
	        requestObj.tableUri = tableUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DESCRIBETABLE", RaptureSerializer.SerializeJson<DescribeTablePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, string>>(resp.response.content);
	            }
	             throw new Exception("Error in describeTable, no response returned");
	        }
	   
	    public void addTableColumns(CallingContext context,  string tableUri,  Dictionary<string, string> columns)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddTableColumnsPayload requestObj = new AddTableColumnsPayload();
	        requestObj.tableUri = tableUri;
	        requestObj.columns = columns;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDTABLECOLUMNS", RaptureSerializer.SerializeJson<AddTableColumnsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addTableColumns, no response returned");
	        }
	   
	    public void deleteTableColumns(CallingContext context,  string tableUri,  List<string> columnNames)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteTableColumnsPayload requestObj = new DeleteTableColumnsPayload();
	        requestObj.tableUri = tableUri;
	        requestObj.columnNames = columnNames;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETETABLECOLUMNS", RaptureSerializer.SerializeJson<DeleteTableColumnsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteTableColumns, no response returned");
	        }
	   
	    public void updateTableColumns(CallingContext context,  string tableUri,  Dictionary<string, string> columns)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            UpdateTableColumnsPayload requestObj = new UpdateTableColumnsPayload();
	        requestObj.tableUri = tableUri;
	        requestObj.columns = columns;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("UPDATETABLECOLUMNS", RaptureSerializer.SerializeJson<UpdateTableColumnsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in updateTableColumns, no response returned");
	        }
	   
	    public void renameTableColumns(CallingContext context,  string tableUri,  Dictionary<string, string> columnNames)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RenameTableColumnsPayload requestObj = new RenameTableColumnsPayload();
	        requestObj.tableUri = tableUri;
	        requestObj.columnNames = columnNames;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RENAMETABLECOLUMNS", RaptureSerializer.SerializeJson<RenameTableColumnsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in renameTableColumns, no response returned");
	        }
	   
	    public void createIndex(CallingContext context,  string tableUri,  string indexName,  List<string> columnNames)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateIndexPayload requestObj = new CreateIndexPayload();
	        requestObj.tableUri = tableUri;
	        requestObj.indexName = indexName;
	        requestObj.columnNames = columnNames;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEINDEX", RaptureSerializer.SerializeJson<CreateIndexPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in createIndex, no response returned");
	        }
	   
	    public void dropIndex(CallingContext context,  string tableUri,  string indexName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DropIndexPayload requestObj = new DropIndexPayload();
	        requestObj.tableUri = tableUri;
	        requestObj.indexName = indexName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DROPINDEX", RaptureSerializer.SerializeJson<DropIndexPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in dropIndex, no response returned");
	        }
	   
	    public List<Dictionary<string, Object>> selectJoinedRows(CallingContext context,  List<string> tableUris,  List<string> columnNames,  string from,  string where,  List<string> order,  bool ascending,  int limit)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SelectJoinedRowsPayload requestObj = new SelectJoinedRowsPayload();
	        requestObj.tableUris = tableUris;
	        requestObj.columnNames = columnNames;
	        requestObj.from = from;
	        requestObj.where = where;
	        requestObj.order = order;
	        requestObj.ascending = ascending;
	        requestObj.limit = limit;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SELECTJOINEDROWS", RaptureSerializer.SerializeJson<SelectJoinedRowsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<Dictionary<string, Object>>>(resp.response.content);
	            }
	             throw new Exception("Error in selectJoinedRows, no response returned");
	        }
	   
	    public List<Dictionary<string, Object>> selectUsingSql(CallingContext context,  string schema,  string rawSql)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SelectUsingSqlPayload requestObj = new SelectUsingSqlPayload();
	        requestObj.schema = schema;
	        requestObj.rawSql = rawSql;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SELECTUSINGSQL", RaptureSerializer.SerializeJson<SelectUsingSqlPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<Dictionary<string, Object>>>(resp.response.content);
	            }
	             throw new Exception("Error in selectUsingSql, no response returned");
	        }
	   
	    public List<Dictionary<string, Object>> selectRows(CallingContext context,  string tableUri,  List<string> columnNames,  string where,  List<string> order,  bool ascending,  int limit)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SelectRowsPayload requestObj = new SelectRowsPayload();
	        requestObj.tableUri = tableUri;
	        requestObj.columnNames = columnNames;
	        requestObj.where = where;
	        requestObj.order = order;
	        requestObj.ascending = ascending;
	        requestObj.limit = limit;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SELECTROWS", RaptureSerializer.SerializeJson<SelectRowsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<Dictionary<string, Object>>>(resp.response.content);
	            }
	             throw new Exception("Error in selectRows, no response returned");
	        }
	   
	    public void insertUsingSql(CallingContext context,  string schema,  string rawSql)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            InsertUsingSqlPayload requestObj = new InsertUsingSqlPayload();
	        requestObj.schema = schema;
	        requestObj.rawSql = rawSql;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("INSERTUSINGSQL", RaptureSerializer.SerializeJson<InsertUsingSqlPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in insertUsingSql, no response returned");
	        }
	   
	    public void insertRow(CallingContext context,  string tableUri,  Dictionary<string, Object> values)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            InsertRowPayload requestObj = new InsertRowPayload();
	        requestObj.tableUri = tableUri;
	        requestObj.values = values;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("INSERTROW", RaptureSerializer.SerializeJson<InsertRowPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in insertRow, no response returned");
	        }
	   
	    public void insertRows(CallingContext context,  string tableUri,  List<Dictionary<string, Object>> values)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            InsertRowsPayload requestObj = new InsertRowsPayload();
	        requestObj.tableUri = tableUri;
	        requestObj.values = values;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("INSERTROWS", RaptureSerializer.SerializeJson<InsertRowsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in insertRows, no response returned");
	        }
	   
	    public void deleteUsingSql(CallingContext context,  string schema,  string rawSql)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteUsingSqlPayload requestObj = new DeleteUsingSqlPayload();
	        requestObj.schema = schema;
	        requestObj.rawSql = rawSql;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEUSINGSQL", RaptureSerializer.SerializeJson<DeleteUsingSqlPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteUsingSql, no response returned");
	        }
	   
	    public void deleteRows(CallingContext context,  string tableUri,  string where)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteRowsPayload requestObj = new DeleteRowsPayload();
	        requestObj.tableUri = tableUri;
	        requestObj.where = where;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEROWS", RaptureSerializer.SerializeJson<DeleteRowsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteRows, no response returned");
	        }
	   
	    public void updateUsingSql(CallingContext context,  string schema,  string rawSql)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            UpdateUsingSqlPayload requestObj = new UpdateUsingSqlPayload();
	        requestObj.schema = schema;
	        requestObj.rawSql = rawSql;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("UPDATEUSINGSQL", RaptureSerializer.SerializeJson<UpdateUsingSqlPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in updateUsingSql, no response returned");
	        }
	   
	    public void updateRows(CallingContext context,  string tableUri,  Dictionary<string, Object> values,  string where)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            UpdateRowsPayload requestObj = new UpdateRowsPayload();
	        requestObj.tableUri = tableUri;
	        requestObj.values = values;
	        requestObj.where = where;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("UPDATEROWS", RaptureSerializer.SerializeJson<UpdateRowsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in updateRows, no response returned");
	        }
	   
	    public bool begin(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            BeginPayload requestObj = new BeginPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("BEGIN", RaptureSerializer.SerializeJson<BeginPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in begin, no response returned");
	        }
	   
	    public bool commit(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CommitPayload requestObj = new CommitPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("COMMIT", RaptureSerializer.SerializeJson<CommitPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in commit, no response returned");
	        }
	   
	    public bool rollback(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RollbackPayload requestObj = new RollbackPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ROLLBACK", RaptureSerializer.SerializeJson<RollbackPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in rollback, no response returned");
	        }
	   
	    public bool abort(CallingContext context,  string transactionId)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AbortPayload requestObj = new AbortPayload();
	        requestObj.transactionId = transactionId;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ABORT", RaptureSerializer.SerializeJson<AbortPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in abort, no response returned");
	        }
	   
	    public List<string> getTransactions(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetTransactionsPayload requestObj = new GetTransactionsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETTRANSACTIONS", RaptureSerializer.SerializeJson<GetTransactionsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in getTransactions, no response returned");
	        }
	   
	    public string getDdl(CallingContext context,  string uri,  bool includeTableData)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetDdlPayload requestObj = new GetDdlPayload();
	        requestObj.uri = uri;
	        requestObj.includeTableData = includeTableData;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETDDL", RaptureSerializer.SerializeJson<GetDdlPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in getDdl, no response returned");
	        }
	   
	    public string getCursorUsingSql(CallingContext context,  string schema,  string rawSql)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetCursorUsingSqlPayload requestObj = new GetCursorUsingSqlPayload();
	        requestObj.schema = schema;
	        requestObj.rawSql = rawSql;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETCURSORUSINGSQL", RaptureSerializer.SerializeJson<GetCursorUsingSqlPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in getCursorUsingSql, no response returned");
	        }
	   
	    public string getCursor(CallingContext context,  string tableUri,  List<string> columnNames,  string where,  List<string> order,  bool ascending,  int limit)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetCursorPayload requestObj = new GetCursorPayload();
	        requestObj.tableUri = tableUri;
	        requestObj.columnNames = columnNames;
	        requestObj.where = where;
	        requestObj.order = order;
	        requestObj.ascending = ascending;
	        requestObj.limit = limit;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETCURSOR", RaptureSerializer.SerializeJson<GetCursorPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in getCursor, no response returned");
	        }
	   
	    public string getCursorForJoin(CallingContext context,  List<string> tableUris,  List<string> columnNames,  string from,  string where,  List<string> order,  bool ascending,  int limit)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetCursorForJoinPayload requestObj = new GetCursorForJoinPayload();
	        requestObj.tableUris = tableUris;
	        requestObj.columnNames = columnNames;
	        requestObj.from = from;
	        requestObj.where = where;
	        requestObj.order = order;
	        requestObj.ascending = ascending;
	        requestObj.limit = limit;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETCURSORFORJOIN", RaptureSerializer.SerializeJson<GetCursorForJoinPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in getCursorForJoin, no response returned");
	        }
	   
	    public List<Dictionary<string, Object>> next(CallingContext context,  string tableUri,  string cursorId,  int count)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            NextPayload requestObj = new NextPayload();
	        requestObj.tableUri = tableUri;
	        requestObj.cursorId = cursorId;
	        requestObj.count = count;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("NEXT", RaptureSerializer.SerializeJson<NextPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<Dictionary<string, Object>>>(resp.response.content);
	            }
	             throw new Exception("Error in next, no response returned");
	        }
	   
	    public List<Dictionary<string, Object>> previous(CallingContext context,  string tableUri,  string cursorId,  int count)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PreviousPayload requestObj = new PreviousPayload();
	        requestObj.tableUri = tableUri;
	        requestObj.cursorId = cursorId;
	        requestObj.count = count;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PREVIOUS", RaptureSerializer.SerializeJson<PreviousPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<Dictionary<string, Object>>>(resp.response.content);
	            }
	             throw new Exception("Error in previous, no response returned");
	        }
	   
	    public void closeCursor(CallingContext context,  string tableUri,  string cursorId)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CloseCursorPayload requestObj = new CloseCursorPayload();
	        requestObj.tableUri = tableUri;
	        requestObj.cursorId = cursorId;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CLOSECURSOR", RaptureSerializer.SerializeJson<CloseCursorPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in closeCursor, no response returned");
	        }
	   
	    public void createProcedureCallUsingSql(CallingContext context,  string procUri,  string rawSql)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateProcedureCallUsingSqlPayload requestObj = new CreateProcedureCallUsingSqlPayload();
	        requestObj.procUri = procUri;
	        requestObj.rawSql = rawSql;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEPROCEDURECALLUSINGSQL", RaptureSerializer.SerializeJson<CreateProcedureCallUsingSqlPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in createProcedureCallUsingSql, no response returned");
	        }
	   
	    public StoredProcedureResponse callProcedure(CallingContext context,  string procUri,  StoredProcedureParams rparams)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CallProcedurePayload requestObj = new CallProcedurePayload();
	        requestObj.procUri = procUri;
	        requestObj.rparams = rparams;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CALLPROCEDURE", RaptureSerializer.SerializeJson<CallProcedurePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<StoredProcedureResponse>(resp.response.content);
	            }
	             throw new Exception("Error in callProcedure, no response returned");
	        }
	   
	    public void dropProcedureUsingSql(CallingContext context,  string procUri,  string rawSql)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DropProcedureUsingSqlPayload requestObj = new DropProcedureUsingSqlPayload();
	        requestObj.procUri = procUri;
	        requestObj.rawSql = rawSql;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DROPPROCEDUREUSINGSQL", RaptureSerializer.SerializeJson<DropProcedureUsingSqlPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in dropProcedureUsingSql, no response returned");
	        }
	
	       public void createStructuredRepo(string uri, string config) {
	            return createStructuredRepo(null,uri,config);
	       }

	       public void deleteStructuredRepo(string uri) {
	            return deleteStructuredRepo(null,uri);
	       }

	       public bool structuredRepoExists(string uri) {
	            return structuredRepoExists(null,uri);
	       }

	       public StructuredRepoConfig getStructuredRepoConfig(string uri) {
	            return getStructuredRepoConfig(null,uri);
	       }

	       public List<StructuredRepoConfig> getStructuredRepoConfigs() {
	            return getStructuredRepoConfigs(null);
	       }

	       public void createTableUsingSql(string schema, string rawSql) {
	            return createTableUsingSql(null,schema,rawSql);
	       }

	       public void createTable(string tableUri, Dictionary<string, string> columns) {
	            return createTable(null,tableUri,columns);
	       }

	       public void dropTable(string tableUri) {
	            return dropTable(null,tableUri);
	       }

	       public bool tableExists(string tableUri) {
	            return tableExists(null,tableUri);
	       }

	       public Dictionary<string, string> describeTable(string tableUri) {
	            return describeTable(null,tableUri);
	       }

	       public void addTableColumns(string tableUri, Dictionary<string, string> columns) {
	            return addTableColumns(null,tableUri,columns);
	       }

	       public void deleteTableColumns(string tableUri, List<string> columnNames) {
	            return deleteTableColumns(null,tableUri,columnNames);
	       }

	       public void updateTableColumns(string tableUri, Dictionary<string, string> columns) {
	            return updateTableColumns(null,tableUri,columns);
	       }

	       public void renameTableColumns(string tableUri, Dictionary<string, string> columnNames) {
	            return renameTableColumns(null,tableUri,columnNames);
	       }

	       public void createIndex(string tableUri, string indexName, List<string> columnNames) {
	            return createIndex(null,tableUri,indexName,columnNames);
	       }

	       public void dropIndex(string tableUri, string indexName) {
	            return dropIndex(null,tableUri,indexName);
	       }

	       public List<Dictionary<string, Object>> selectJoinedRows(List<string> tableUris, List<string> columnNames, string from, string where, List<string> order, bool ascending, int limit) {
	            return selectJoinedRows(null,tableUris,columnNames,from,where,order,ascending,limit);
	       }

	       public List<Dictionary<string, Object>> selectUsingSql(string schema, string rawSql) {
	            return selectUsingSql(null,schema,rawSql);
	       }

	       public List<Dictionary<string, Object>> selectRows(string tableUri, List<string> columnNames, string where, List<string> order, bool ascending, int limit) {
	            return selectRows(null,tableUri,columnNames,where,order,ascending,limit);
	       }

	       public void insertUsingSql(string schema, string rawSql) {
	            return insertUsingSql(null,schema,rawSql);
	       }

	       public void insertRow(string tableUri, Dictionary<string, Object> values) {
	            return insertRow(null,tableUri,values);
	       }

	       public void insertRows(string tableUri, List<Dictionary<string, Object>> values) {
	            return insertRows(null,tableUri,values);
	       }

	       public void deleteUsingSql(string schema, string rawSql) {
	            return deleteUsingSql(null,schema,rawSql);
	       }

	       public void deleteRows(string tableUri, string where) {
	            return deleteRows(null,tableUri,where);
	       }

	       public void updateUsingSql(string schema, string rawSql) {
	            return updateUsingSql(null,schema,rawSql);
	       }

	       public void updateRows(string tableUri, Dictionary<string, Object> values, string where) {
	            return updateRows(null,tableUri,values,where);
	       }

	       public bool begin() {
	            return begin(null);
	       }

	       public bool commit() {
	            return commit(null);
	       }

	       public bool rollback() {
	            return rollback(null);
	       }

	       public bool abort(string transactionId) {
	            return abort(null,transactionId);
	       }

	       public List<string> getTransactions() {
	            return getTransactions(null);
	       }

	       public string getDdl(string uri, bool includeTableData) {
	            return getDdl(null,uri,includeTableData);
	       }

	       public string getCursorUsingSql(string schema, string rawSql) {
	            return getCursorUsingSql(null,schema,rawSql);
	       }

	       public string getCursor(string tableUri, List<string> columnNames, string where, List<string> order, bool ascending, int limit) {
	            return getCursor(null,tableUri,columnNames,where,order,ascending,limit);
	       }

	       public string getCursorForJoin(List<string> tableUris, List<string> columnNames, string from, string where, List<string> order, bool ascending, int limit) {
	            return getCursorForJoin(null,tableUris,columnNames,from,where,order,ascending,limit);
	       }

	       public List<Dictionary<string, Object>> next(string tableUri, string cursorId, int count) {
	            return next(null,tableUri,cursorId,count);
	       }

	       public List<Dictionary<string, Object>> previous(string tableUri, string cursorId, int count) {
	            return previous(null,tableUri,cursorId,count);
	       }

	       public void closeCursor(string tableUri, string cursorId) {
	            return closeCursor(null,tableUri,cursorId);
	       }

	       public void createProcedureCallUsingSql(string procUri, string rawSql) {
	            return createProcedureCallUsingSql(null,procUri,rawSql);
	       }

	       public StoredProcedureResponse callProcedure(string procUri, StoredProcedureParams rparams) {
	            return callProcedure(null,procUri,rparams);
	       }

	       public void dropProcedureUsingSql(string procUri, string rawSql) {
	            return dropProcedureUsingSql(null,procUri,rawSql);
	       }

}
}


