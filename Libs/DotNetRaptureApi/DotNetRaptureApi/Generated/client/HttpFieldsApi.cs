/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.fields
{

public class HttpFieldsApi : BaseHttpApi , FieldsApi, ScriptFieldsApi {
	public HttpFieldsApi(HttpLoginApi login) : base(login, "fields") {
	
	}
		
	   
	    public Dictionary<string, RaptureFolderInfo> listFieldsByUriPrefix(CallingContext context,  string authority,  int depth)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ListFieldsByUriPrefixPayload requestObj = new ListFieldsByUriPrefixPayload();
	        requestObj.authority = authority;
	        requestObj.depth = depth;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("LISTFIELDSBYURIPREFIX", RaptureSerializer.SerializeJson<ListFieldsByUriPrefixPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, RaptureFolderInfo>>(resp.response.content);
	            }
	             throw new Exception("Error in listFieldsByUriPrefix, no response returned");
	        }
	   
	    public RaptureField getField(CallingContext context,  string fieldUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetFieldPayload requestObj = new GetFieldPayload();
	        requestObj.fieldUri = fieldUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETFIELD", RaptureSerializer.SerializeJson<GetFieldPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureField>(resp.response.content);
	            }
	             throw new Exception("Error in getField, no response returned");
	        }
	   
	    public void putField(CallingContext context,  RaptureField field)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PutFieldPayload requestObj = new PutFieldPayload();
	        requestObj.field = field;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUTFIELD", RaptureSerializer.SerializeJson<PutFieldPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in putField, no response returned");
	        }
	   
	    public bool fieldExists(CallingContext context,  string fieldUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            FieldExistsPayload requestObj = new FieldExistsPayload();
	        requestObj.fieldUri = fieldUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("FIELDEXISTS", RaptureSerializer.SerializeJson<FieldExistsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in fieldExists, no response returned");
	        }
	   
	    public void deleteField(CallingContext context,  string fieldUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteFieldPayload requestObj = new DeleteFieldPayload();
	        requestObj.fieldUri = fieldUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEFIELD", RaptureSerializer.SerializeJson<DeleteFieldPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteField, no response returned");
	        }
	   
	    public List<string> getDocumentFields(CallingContext context,  string docURI,  List<string> fields)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetDocumentFieldsPayload requestObj = new GetDocumentFieldsPayload();
	        requestObj.docURI = docURI;
	        requestObj.fields = fields;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETDOCUMENTFIELDS", RaptureSerializer.SerializeJson<GetDocumentFieldsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in getDocumentFields, no response returned");
	        }
	   
	    public List<string> putDocumentAndGetDocumentFields(CallingContext context,  string docURI,  string content,  List<string> fields)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PutDocumentAndGetDocumentFieldsPayload requestObj = new PutDocumentAndGetDocumentFieldsPayload();
	        requestObj.docURI = docURI;
	        requestObj.content = content;
	        requestObj.fields = fields;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUTDOCUMENTANDGETDOCUMENTFIELDS", RaptureSerializer.SerializeJson<PutDocumentAndGetDocumentFieldsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in putDocumentAndGetDocumentFields, no response returned");
	        }
	
	       public Dictionary<string, RaptureFolderInfo> listFieldsByUriPrefix(string authority, int depth) {
	            return listFieldsByUriPrefix(null,authority,depth);
	       }

	       public RaptureField getField(string fieldUri) {
	            return getField(null,fieldUri);
	       }

	       public void putField(RaptureField field) {
	            return putField(null,field);
	       }

	       public bool fieldExists(string fieldUri) {
	            return fieldExists(null,fieldUri);
	       }

	       public void deleteField(string fieldUri) {
	            return deleteField(null,fieldUri);
	       }

	       public List<string> getDocumentFields(string docURI, List<string> fields) {
	            return getDocumentFields(null,docURI,fields);
	       }

	       public List<string> putDocumentAndGetDocumentFields(string docURI, string content, List<string> fields) {
	            return putDocumentAndGetDocumentFields(null,docURI,content,fields);
	       }

}
}


