/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.question
{

public class HttpQuestionApi : BaseHttpApi , QuestionApi, ScriptQuestionApi {
	public HttpQuestionApi(HttpLoginApi login) : base(login, "question") {
	
	}
		
	   
	    public void putTemplate(CallingContext context,  string qTemplateURI,  QTemplate template)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PutTemplatePayload requestObj = new PutTemplatePayload();
	        requestObj.qTemplateURI = qTemplateURI;
	        requestObj.template = template;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUTTEMPLATE", RaptureSerializer.SerializeJson<PutTemplatePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in putTemplate, no response returned");
	        }
	   
	    public QTemplate getTemplate(CallingContext context,  string qTemplateURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetTemplatePayload requestObj = new GetTemplatePayload();
	        requestObj.qTemplateURI = qTemplateURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETTEMPLATE", RaptureSerializer.SerializeJson<GetTemplatePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<QTemplate>(resp.response.content);
	            }
	             throw new Exception("Error in getTemplate, no response returned");
	        }
	   
	    public Question getQuestion(CallingContext context,  string questionURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetQuestionPayload requestObj = new GetQuestionPayload();
	        requestObj.questionURI = questionURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETQUESTION", RaptureSerializer.SerializeJson<GetQuestionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Question>(resp.response.content);
	            }
	             throw new Exception("Error in getQuestion, no response returned");
	        }
	   
	    public string askQuestion(CallingContext context,  string qTemplateURI,  Dictionary<string, string> variables,  string callback)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AskQuestionPayload requestObj = new AskQuestionPayload();
	        requestObj.qTemplateURI = qTemplateURI;
	        requestObj.variables = variables;
	        requestObj.callback = callback;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ASKQUESTION", RaptureSerializer.SerializeJson<AskQuestionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in askQuestion, no response returned");
	        }
	   
	    public List<QNotification> getQNotifications(CallingContext context,  QuestionSearch search)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetQNotificationsPayload requestObj = new GetQNotificationsPayload();
	        requestObj.search = search;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETQNOTIFICATIONS", RaptureSerializer.SerializeJson<GetQNotificationsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<QNotification>>(resp.response.content);
	            }
	             throw new Exception("Error in getQNotifications, no response returned");
	        }
	   
	    public List<string> getQNotificationURIs(CallingContext context,  QuestionSearch search)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetQNotificationURIsPayload requestObj = new GetQNotificationURIsPayload();
	        requestObj.search = search;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETQNOTIFICATIONURIS", RaptureSerializer.SerializeJson<GetQNotificationURIsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in getQNotificationURIs, no response returned");
	        }
	   
	    public void answerQuestion(CallingContext context,  string questionURI,  string response,  Dictionary<string, Object> data)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AnswerQuestionPayload requestObj = new AnswerQuestionPayload();
	        requestObj.questionURI = questionURI;
	        requestObj.response = response;
	        requestObj.data = data;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ANSWERQUESTION", RaptureSerializer.SerializeJson<AnswerQuestionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in answerQuestion, no response returned");
	        }
	
	       public void putTemplate(string qTemplateURI, QTemplate template) {
	            return putTemplate(null,qTemplateURI,template);
	       }

	       public QTemplate getTemplate(string qTemplateURI) {
	            return getTemplate(null,qTemplateURI);
	       }

	       public Question getQuestion(string questionURI) {
	            return getQuestion(null,questionURI);
	       }

	       public string askQuestion(string qTemplateURI, Dictionary<string, string> variables, string callback) {
	            return askQuestion(null,qTemplateURI,variables,callback);
	       }

	       public List<QNotification> getQNotifications(QuestionSearch search) {
	            return getQNotifications(null,search);
	       }

	       public List<string> getQNotificationURIs(QuestionSearch search) {
	            return getQNotificationURIs(null,search);
	       }

	       public void answerQuestion(string questionURI, string response, Dictionary<string, Object> data) {
	            return answerQuestion(null,questionURI,response,data);
	       }

}
}


