/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.mailbox
{

public class HttpMailboxApi : BaseHttpApi , MailboxApi, ScriptMailboxApi {
	public HttpMailboxApi(HttpLoginApi login) : base(login, "mailbox") {
	
	}
		
	   
	    public string putMessage(CallingContext context,  string messageUri,  string content)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PutMessagePayload requestObj = new PutMessagePayload();
	        requestObj.messageUri = messageUri;
	        requestObj.content = content;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUTMESSAGE", RaptureSerializer.SerializeJson<PutMessagePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in putMessage, no response returned");
	        }
	   
	    public void moveMessage(CallingContext context,  string messageUri,  string newMessageUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            MoveMessagePayload requestObj = new MoveMessagePayload();
	        requestObj.messageUri = messageUri;
	        requestObj.newMessageUri = newMessageUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("MOVEMESSAGE", RaptureSerializer.SerializeJson<MoveMessagePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in moveMessage, no response returned");
	        }
	   
	    public void createMailboxRepo(CallingContext context,  string mailboxConfig,  string idGenConfig)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateMailboxRepoPayload requestObj = new CreateMailboxRepoPayload();
	        requestObj.mailboxConfig = mailboxConfig;
	        requestObj.idGenConfig = idGenConfig;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEMAILBOXREPO", RaptureSerializer.SerializeJson<CreateMailboxRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in createMailboxRepo, no response returned");
	        }
	   
	    public List<RaptureMailMessage> getMessages(CallingContext context,  string mailboxUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetMessagesPayload requestObj = new GetMessagesPayload();
	        requestObj.mailboxUri = mailboxUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETMESSAGES", RaptureSerializer.SerializeJson<GetMessagesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureMailMessage>>(resp.response.content);
	            }
	             throw new Exception("Error in getMessages, no response returned");
	        }
	
	       public string putMessage(string messageUri, string content) {
	            return putMessage(null,messageUri,content);
	       }

	       public void moveMessage(string messageUri, string newMessageUri) {
	            return moveMessage(null,messageUri,newMessageUri);
	       }

	       public void createMailboxRepo(string mailboxConfig, string idGenConfig) {
	            return createMailboxRepo(null,mailboxConfig,idGenConfig);
	       }

	       public List<RaptureMailMessage> getMessages(string mailboxUri) {
	            return getMessages(null,mailboxUri);
	       }

}
}


