/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.audit
{

public class HttpAuditApi : BaseHttpApi , AuditApi, ScriptAuditApi {
	public HttpAuditApi(HttpLoginApi login) : base(login, "audit") {
	
	}
		
	   
	    public void setup(CallingContext context,  bool force)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetupPayload requestObj = new SetupPayload();
	        requestObj.force = force;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETUP", RaptureSerializer.SerializeJson<SetupPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setup, no response returned");
	        }
	   
	    public void createAuditLog(CallingContext context,  string name,  string config)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateAuditLogPayload requestObj = new CreateAuditLogPayload();
	        requestObj.name = name;
	        requestObj.config = config;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEAUDITLOG", RaptureSerializer.SerializeJson<CreateAuditLogPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in createAuditLog, no response returned");
	        }
	   
	    public bool doesAuditLogExist(CallingContext context,  string logURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DoesAuditLogExistPayload requestObj = new DoesAuditLogExistPayload();
	        requestObj.logURI = logURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DOESAUDITLOGEXIST", RaptureSerializer.SerializeJson<DoesAuditLogExistPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in doesAuditLogExist, no response returned");
	        }
	   
	    public List<RaptureFolderInfo> getChildren(CallingContext context,  string prefix)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetChildrenPayload requestObj = new GetChildrenPayload();
	        requestObj.prefix = prefix;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETCHILDREN", RaptureSerializer.SerializeJson<GetChildrenPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureFolderInfo>>(resp.response.content);
	            }
	             throw new Exception("Error in getChildren, no response returned");
	        }
	   
	    public void deleteAuditLog(CallingContext context,  string logURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteAuditLogPayload requestObj = new DeleteAuditLogPayload();
	        requestObj.logURI = logURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEAUDITLOG", RaptureSerializer.SerializeJson<DeleteAuditLogPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteAuditLog, no response returned");
	        }
	   
	    public AuditLogConfig getAuditLog(CallingContext context,  string logURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetAuditLogPayload requestObj = new GetAuditLogPayload();
	        requestObj.logURI = logURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETAUDITLOG", RaptureSerializer.SerializeJson<GetAuditLogPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<AuditLogConfig>(resp.response.content);
	            }
	             throw new Exception("Error in getAuditLog, no response returned");
	        }
	   
	    public void writeAuditEntry(CallingContext context,  string logURI,  string category,  int level,  string message)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            WriteAuditEntryPayload requestObj = new WriteAuditEntryPayload();
	        requestObj.logURI = logURI;
	        requestObj.category = category;
	        requestObj.level = level;
	        requestObj.message = message;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("WRITEAUDITENTRY", RaptureSerializer.SerializeJson<WriteAuditEntryPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in writeAuditEntry, no response returned");
	        }
	   
	    public void writeAuditEntryData(CallingContext context,  string logURI,  string category,  int level,  string message,  Dictionary<string, Object> data)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            WriteAuditEntryDataPayload requestObj = new WriteAuditEntryDataPayload();
	        requestObj.logURI = logURI;
	        requestObj.category = category;
	        requestObj.level = level;
	        requestObj.message = message;
	        requestObj.data = data;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("WRITEAUDITENTRYDATA", RaptureSerializer.SerializeJson<WriteAuditEntryDataPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in writeAuditEntryData, no response returned");
	        }
	   
	    public List<AuditLogEntry> getRecentLogEntries(CallingContext context,  string logURI,  int count)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetRecentLogEntriesPayload requestObj = new GetRecentLogEntriesPayload();
	        requestObj.logURI = logURI;
	        requestObj.count = count;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETRECENTLOGENTRIES", RaptureSerializer.SerializeJson<GetRecentLogEntriesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<AuditLogEntry>>(resp.response.content);
	            }
	             throw new Exception("Error in getRecentLogEntries, no response returned");
	        }
	   
	    public List<AuditLogEntry> getEntriesSince(CallingContext context,  string logURI,  AuditLogEntry when)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetEntriesSincePayload requestObj = new GetEntriesSincePayload();
	        requestObj.logURI = logURI;
	        requestObj.when = when;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETENTRIESSINCE", RaptureSerializer.SerializeJson<GetEntriesSincePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<AuditLogEntry>>(resp.response.content);
	            }
	             throw new Exception("Error in getEntriesSince, no response returned");
	        }
	
	       public void setup(bool force) {
	            return setup(null,force);
	       }

	       public void createAuditLog(string name, string config) {
	            return createAuditLog(null,name,config);
	       }

	       public bool doesAuditLogExist(string logURI) {
	            return doesAuditLogExist(null,logURI);
	       }

	       public List<RaptureFolderInfo> getChildren(string prefix) {
	            return getChildren(null,prefix);
	       }

	       public void deleteAuditLog(string logURI) {
	            return deleteAuditLog(null,logURI);
	       }

	       public AuditLogConfig getAuditLog(string logURI) {
	            return getAuditLog(null,logURI);
	       }

	       public void writeAuditEntry(string logURI, string category, int level, string message) {
	            return writeAuditEntry(null,logURI,category,level,message);
	       }

	       public void writeAuditEntryData(string logURI, string category, int level, string message, Dictionary<string, Object> data) {
	            return writeAuditEntryData(null,logURI,category,level,message,data);
	       }

	       public List<AuditLogEntry> getRecentLogEntries(string logURI, int count) {
	            return getRecentLogEntries(null,logURI,count);
	       }

	       public List<AuditLogEntry> getEntriesSince(string logURI, AuditLogEntry when) {
	            return getEntriesSince(null,logURI,when);
	       }

}
}


