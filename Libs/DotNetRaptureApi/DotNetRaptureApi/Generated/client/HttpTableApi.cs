/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.table
{

public class HttpTableApi : BaseHttpApi , TableApi, ScriptTableApi {
	public HttpTableApi(HttpLoginApi login) : base(login, "table") {
	
	}
		
	   
	    public RaptureTableConfig createTable(CallingContext context,  string indexURI,  string config)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateTablePayload requestObj = new CreateTablePayload();
	        requestObj.indexURI = indexURI;
	        requestObj.config = config;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATETABLE", RaptureSerializer.SerializeJson<CreateTablePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureTableConfig>(resp.response.content);
	            }
	             throw new Exception("Error in createTable, no response returned");
	        }
	   
	    public List<RaptureTableConfig> getTablesForAuthority(CallingContext context,  string authority)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetTablesForAuthorityPayload requestObj = new GetTablesForAuthorityPayload();
	        requestObj.authority = authority;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETTABLESFORAUTHORITY", RaptureSerializer.SerializeJson<GetTablesForAuthorityPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureTableConfig>>(resp.response.content);
	            }
	             throw new Exception("Error in getTablesForAuthority, no response returned");
	        }
	   
	    public RaptureTableConfig getTable(CallingContext context,  string indexURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetTablePayload requestObj = new GetTablePayload();
	        requestObj.indexURI = indexURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETTABLE", RaptureSerializer.SerializeJson<GetTablePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureTableConfig>(resp.response.content);
	            }
	             throw new Exception("Error in getTable, no response returned");
	        }
	   
	    public bool deleteTable(CallingContext context,  string indexURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteTablePayload requestObj = new DeleteTablePayload();
	        requestObj.indexURI = indexURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETETABLE", RaptureSerializer.SerializeJson<DeleteTablePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in deleteTable, no response returned");
	        }
	   
	    public List<TableRecord> queryTable(CallingContext context,  string indexURI,  TableQuery query)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            QueryTablePayload requestObj = new QueryTablePayload();
	        requestObj.indexURI = indexURI;
	        requestObj.query = query;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("QUERYTABLE", RaptureSerializer.SerializeJson<QueryTablePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<TableRecord>>(resp.response.content);
	            }
	             throw new Exception("Error in queryTable, no response returned");
	        }
	
	       public RaptureTableConfig createTable(string indexURI, string config) {
	            return createTable(null,indexURI,config);
	       }

	       public List<RaptureTableConfig> getTablesForAuthority(string authority) {
	            return getTablesForAuthority(null,authority);
	       }

	       public RaptureTableConfig getTable(string indexURI) {
	            return getTable(null,indexURI);
	       }

	       public bool deleteTable(string indexURI) {
	            return deleteTable(null,indexURI);
	       }

	       public List<TableRecord> queryTable(string indexURI, TableQuery query) {
	            return queryTable(null,indexURI,query);
	       }

}
}


