/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.user
{

public class HttpUserApi : BaseHttpApi , UserApi, ScriptUserApi {
	public HttpUserApi(HttpLoginApi login) : base(login, "user") {
	
	}
		
	   
	    public RaptureUser getWhoAmI(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetWhoAmIPayload requestObj = new GetWhoAmIPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETWHOAMI", RaptureSerializer.SerializeJson<GetWhoAmIPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureUser>(resp.response.content);
	            }
	             throw new Exception("Error in getWhoAmI, no response returned");
	        }
	   
	    public void logoutUser(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            LogoutUserPayload requestObj = new LogoutUserPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("LOGOUTUSER", RaptureSerializer.SerializeJson<LogoutUserPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in logoutUser, no response returned");
	        }
	   
	    public void storePreference(CallingContext context,  string category,  string name,  string content)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            StorePreferencePayload requestObj = new StorePreferencePayload();
	        requestObj.category = category;
	        requestObj.name = name;
	        requestObj.content = content;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("STOREPREFERENCE", RaptureSerializer.SerializeJson<StorePreferencePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in storePreference, no response returned");
	        }
	   
	    public string getPreference(CallingContext context,  string category,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetPreferencePayload requestObj = new GetPreferencePayload();
	        requestObj.category = category;
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETPREFERENCE", RaptureSerializer.SerializeJson<GetPreferencePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in getPreference, no response returned");
	        }
	   
	    public void removePreference(CallingContext context,  string category,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RemovePreferencePayload requestObj = new RemovePreferencePayload();
	        requestObj.category = category;
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REMOVEPREFERENCE", RaptureSerializer.SerializeJson<RemovePreferencePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in removePreference, no response returned");
	        }
	   
	    public List<string> getPreferenceCategories(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetPreferenceCategoriesPayload requestObj = new GetPreferenceCategoriesPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETPREFERENCECATEGORIES", RaptureSerializer.SerializeJson<GetPreferenceCategoriesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in getPreferenceCategories, no response returned");
	        }
	   
	    public List<string> getPreferencesInCategory(CallingContext context,  string category)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetPreferencesInCategoryPayload requestObj = new GetPreferencesInCategoryPayload();
	        requestObj.category = category;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETPREFERENCESINCATEGORY", RaptureSerializer.SerializeJson<GetPreferencesInCategoryPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in getPreferencesInCategory, no response returned");
	        }
	   
	    public RaptureUser updateMyDescription(CallingContext context,  string description)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            UpdateMyDescriptionPayload requestObj = new UpdateMyDescriptionPayload();
	        requestObj.description = description;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("UPDATEMYDESCRIPTION", RaptureSerializer.SerializeJson<UpdateMyDescriptionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureUser>(resp.response.content);
	            }
	             throw new Exception("Error in updateMyDescription, no response returned");
	        }
	   
	    public RaptureUser changeMyPassword(CallingContext context,  string oldHashPassword,  string newHashPassword)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ChangeMyPasswordPayload requestObj = new ChangeMyPasswordPayload();
	        requestObj.oldHashPassword = oldHashPassword;
	        requestObj.newHashPassword = newHashPassword;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CHANGEMYPASSWORD", RaptureSerializer.SerializeJson<ChangeMyPasswordPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureUser>(resp.response.content);
	            }
	             throw new Exception("Error in changeMyPassword, no response returned");
	        }
	   
	    public RaptureUser changeMyEmail(CallingContext context,  string newAddress)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ChangeMyEmailPayload requestObj = new ChangeMyEmailPayload();
	        requestObj.newAddress = newAddress;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CHANGEMYEMAIL", RaptureSerializer.SerializeJson<ChangeMyEmailPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureUser>(resp.response.content);
	            }
	             throw new Exception("Error in changeMyEmail, no response returned");
	        }
	   
	    public ApiVersion getServerApiVersion(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetServerApiVersionPayload requestObj = new GetServerApiVersionPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSERVERAPIVERSION", RaptureSerializer.SerializeJson<GetServerApiVersionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<ApiVersion>(resp.response.content);
	            }
	             throw new Exception("Error in getServerApiVersion, no response returned");
	        }
	   
	    public RaptureCubeResult runFilterCubeView(CallingContext context,  string typeURI,  string scriptURI,  string filterParams,  string groupFields,  string columnFields)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RunFilterCubeViewPayload requestObj = new RunFilterCubeViewPayload();
	        requestObj.typeURI = typeURI;
	        requestObj.scriptURI = scriptURI;
	        requestObj.filterParams = filterParams;
	        requestObj.groupFields = groupFields;
	        requestObj.columnFields = columnFields;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RUNFILTERCUBEVIEW", RaptureSerializer.SerializeJson<RunFilterCubeViewPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureCubeResult>(resp.response.content);
	            }
	             throw new Exception("Error in runFilterCubeView, no response returned");
	        }
	   
	    public RaptureQueryResult runNativeQuery(CallingContext context,  string typeURI,  string repoType,  List<string> queryParams)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RunNativeQueryPayload requestObj = new RunNativeQueryPayload();
	        requestObj.typeURI = typeURI;
	        requestObj.repoType = repoType;
	        requestObj.queryParams = queryParams;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RUNNATIVEQUERY", RaptureSerializer.SerializeJson<RunNativeQueryPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureQueryResult>(resp.response.content);
	            }
	             throw new Exception("Error in runNativeQuery, no response returned");
	        }
	   
	    public RaptureCubeResult runNativeFilterCubeView(CallingContext context,  string typeURI,  string repoType,  List<string> queryParams,  string groupFields,  string columnFields)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RunNativeFilterCubeViewPayload requestObj = new RunNativeFilterCubeViewPayload();
	        requestObj.typeURI = typeURI;
	        requestObj.repoType = repoType;
	        requestObj.queryParams = queryParams;
	        requestObj.groupFields = groupFields;
	        requestObj.columnFields = columnFields;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RUNNATIVEFILTERCUBEVIEW", RaptureSerializer.SerializeJson<RunNativeFilterCubeViewPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureCubeResult>(resp.response.content);
	            }
	             throw new Exception("Error in runNativeFilterCubeView, no response returned");
	        }
	   
	    public bool isPermitted(CallingContext context,  string apiCall,  string callParam)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            IsPermittedPayload requestObj = new IsPermittedPayload();
	        requestObj.apiCall = apiCall;
	        requestObj.callParam = callParam;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ISPERMITTED", RaptureSerializer.SerializeJson<IsPermittedPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in isPermitted, no response returned");
	        }
	
	       public RaptureUser getWhoAmI() {
	            return getWhoAmI(null);
	       }

	       public void logoutUser() {
	            return logoutUser(null);
	       }

	       public void storePreference(string category, string name, string content) {
	            return storePreference(null,category,name,content);
	       }

	       public string getPreference(string category, string name) {
	            return getPreference(null,category,name);
	       }

	       public void removePreference(string category, string name) {
	            return removePreference(null,category,name);
	       }

	       public List<string> getPreferenceCategories() {
	            return getPreferenceCategories(null);
	       }

	       public List<string> getPreferencesInCategory(string category) {
	            return getPreferencesInCategory(null,category);
	       }

	       public RaptureUser updateMyDescription(string description) {
	            return updateMyDescription(null,description);
	       }

	       public RaptureUser changeMyPassword(string oldHashPassword, string newHashPassword) {
	            return changeMyPassword(null,oldHashPassword,newHashPassword);
	       }

	       public RaptureUser changeMyEmail(string newAddress) {
	            return changeMyEmail(null,newAddress);
	       }

	       public ApiVersion getServerApiVersion() {
	            return getServerApiVersion(null);
	       }

	       public RaptureCubeResult runFilterCubeView(string typeURI, string scriptURI, string filterParams, string groupFields, string columnFields) {
	            return runFilterCubeView(null,typeURI,scriptURI,filterParams,groupFields,columnFields);
	       }

	       public RaptureQueryResult runNativeQuery(string typeURI, string repoType, List<string> queryParams) {
	            return runNativeQuery(null,typeURI,repoType,queryParams);
	       }

	       public RaptureCubeResult runNativeFilterCubeView(string typeURI, string repoType, List<string> queryParams, string groupFields, string columnFields) {
	            return runNativeFilterCubeView(null,typeURI,repoType,queryParams,groupFields,columnFields);
	       }

	       public bool isPermitted(string apiCall, string callParam) {
	            return isPermitted(null,apiCall,callParam);
	       }

}
}


