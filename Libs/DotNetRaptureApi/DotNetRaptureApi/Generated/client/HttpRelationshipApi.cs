/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.relationship
{

public class HttpRelationshipApi : BaseHttpApi , RelationshipApi, ScriptRelationshipApi {
	public HttpRelationshipApi(HttpLoginApi login) : base(login, "relationship") {
	
	}
		
	   
	    public void createRelationshipRepo(CallingContext context,  string relationshipRepoURI,  string config)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateRelationshipRepoPayload requestObj = new CreateRelationshipRepoPayload();
	        requestObj.relationshipRepoURI = relationshipRepoURI;
	        requestObj.config = config;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATERELATIONSHIPREPO", RaptureSerializer.SerializeJson<CreateRelationshipRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in createRelationshipRepo, no response returned");
	        }
	   
	    public RelationshipRepoConfig getRelationshipRepoConfig(CallingContext context,  string blobRepoURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetRelationshipRepoConfigPayload requestObj = new GetRelationshipRepoConfigPayload();
	        requestObj.blobRepoURI = blobRepoURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETRELATIONSHIPREPOCONFIG", RaptureSerializer.SerializeJson<GetRelationshipRepoConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RelationshipRepoConfig>(resp.response.content);
	            }
	             throw new Exception("Error in getRelationshipRepoConfig, no response returned");
	        }
	   
	    public List<RelationshipRepoConfig> getAllRelationshipRepoConfigs(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetAllRelationshipRepoConfigsPayload requestObj = new GetAllRelationshipRepoConfigsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETALLRELATIONSHIPREPOCONFIGS", RaptureSerializer.SerializeJson<GetAllRelationshipRepoConfigsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RelationshipRepoConfig>>(resp.response.content);
	            }
	             throw new Exception("Error in getAllRelationshipRepoConfigs, no response returned");
	        }
	   
	    public void deleteRelationshipRepo(CallingContext context,  string repoURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteRelationshipRepoPayload requestObj = new DeleteRelationshipRepoPayload();
	        requestObj.repoURI = repoURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETERELATIONSHIPREPO", RaptureSerializer.SerializeJson<DeleteRelationshipRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteRelationshipRepo, no response returned");
	        }
	   
	    public bool doesRelationshipRepoExist(CallingContext context,  string repoURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DoesRelationshipRepoExistPayload requestObj = new DoesRelationshipRepoExistPayload();
	        requestObj.repoURI = repoURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DOESRELATIONSHIPREPOEXIST", RaptureSerializer.SerializeJson<DoesRelationshipRepoExistPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in doesRelationshipRepoExist, no response returned");
	        }
	   
	    public bool doesRelationshipExist(CallingContext context,  string relationshipURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DoesRelationshipExistPayload requestObj = new DoesRelationshipExistPayload();
	        requestObj.relationshipURI = relationshipURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DOESRELATIONSHIPEXIST", RaptureSerializer.SerializeJson<DoesRelationshipExistPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in doesRelationshipExist, no response returned");
	        }
	   
	    public string createRelationship(CallingContext context,  string relationshipAuthorityURI,  string fromURI,  string toURI,  string label,  Dictionary<string, string> properties)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateRelationshipPayload requestObj = new CreateRelationshipPayload();
	        requestObj.relationshipAuthorityURI = relationshipAuthorityURI;
	        requestObj.fromURI = fromURI;
	        requestObj.toURI = toURI;
	        requestObj.label = label;
	        requestObj.properties = properties;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATERELATIONSHIP", RaptureSerializer.SerializeJson<CreateRelationshipPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in createRelationship, no response returned");
	        }
	   
	    public RaptureRelationship getRelationship(CallingContext context,  string relationshipURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetRelationshipPayload requestObj = new GetRelationshipPayload();
	        requestObj.relationshipURI = relationshipURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETRELATIONSHIP", RaptureSerializer.SerializeJson<GetRelationshipPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureRelationship>(resp.response.content);
	            }
	             throw new Exception("Error in getRelationship, no response returned");
	        }
	   
	    public void deleteRelationship(CallingContext context,  string relationshipURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteRelationshipPayload requestObj = new DeleteRelationshipPayload();
	        requestObj.relationshipURI = relationshipURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETERELATIONSHIP", RaptureSerializer.SerializeJson<DeleteRelationshipPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteRelationship, no response returned");
	        }
	   
	    public List<RaptureRelationship> getOutboundRelationships(CallingContext context,  string relationshipRepoURI,  string fromURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetOutboundRelationshipsPayload requestObj = new GetOutboundRelationshipsPayload();
	        requestObj.relationshipRepoURI = relationshipRepoURI;
	        requestObj.fromURI = fromURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETOUTBOUNDRELATIONSHIPS", RaptureSerializer.SerializeJson<GetOutboundRelationshipsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureRelationship>>(resp.response.content);
	            }
	             throw new Exception("Error in getOutboundRelationships, no response returned");
	        }
	   
	    public List<RaptureRelationship> getInboundRelationships(CallingContext context,  string relationshipRepoURI,  string toURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetInboundRelationshipsPayload requestObj = new GetInboundRelationshipsPayload();
	        requestObj.relationshipRepoURI = relationshipRepoURI;
	        requestObj.toURI = toURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETINBOUNDRELATIONSHIPS", RaptureSerializer.SerializeJson<GetInboundRelationshipsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureRelationship>>(resp.response.content);
	            }
	             throw new Exception("Error in getInboundRelationships, no response returned");
	        }
	   
	    public List<RaptureRelationship> getLabledRelationships(CallingContext context,  string relationshipRepoURI,  string relationshipLabel)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetLabledRelationshipsPayload requestObj = new GetLabledRelationshipsPayload();
	        requestObj.relationshipRepoURI = relationshipRepoURI;
	        requestObj.relationshipLabel = relationshipLabel;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETLABLEDRELATIONSHIPS", RaptureSerializer.SerializeJson<GetLabledRelationshipsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureRelationship>>(resp.response.content);
	            }
	             throw new Exception("Error in getLabledRelationships, no response returned");
	        }
	   
	    public List<RaptureFolderInfo> getChildren(CallingContext context,  string prefix)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetChildrenPayload requestObj = new GetChildrenPayload();
	        requestObj.prefix = prefix;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETCHILDREN", RaptureSerializer.SerializeJson<GetChildrenPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureFolderInfo>>(resp.response.content);
	            }
	             throw new Exception("Error in getChildren, no response returned");
	        }
	   
	    public Dictionary<string, RaptureFolderInfo> getAllChildrenMap(CallingContext context,  string prefix)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetAllChildrenMapPayload requestObj = new GetAllChildrenMapPayload();
	        requestObj.prefix = prefix;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETALLCHILDRENMAP", RaptureSerializer.SerializeJson<GetAllChildrenMapPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, RaptureFolderInfo>>(resp.response.content);
	            }
	             throw new Exception("Error in getAllChildrenMap, no response returned");
	        }
	   
	    public RaptureRelationshipRegion getRelationshipCenteredOn(CallingContext context,  string relationshipNodeURI,  Dictionary<string, string> options)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetRelationshipCenteredOnPayload requestObj = new GetRelationshipCenteredOnPayload();
	        requestObj.relationshipNodeURI = relationshipNodeURI;
	        requestObj.options = options;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETRELATIONSHIPCENTEREDON", RaptureSerializer.SerializeJson<GetRelationshipCenteredOnPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureRelationshipRegion>(resp.response.content);
	            }
	             throw new Exception("Error in getRelationshipCenteredOn, no response returned");
	        }
	
	       public void createRelationshipRepo(string relationshipRepoURI, string config) {
	            return createRelationshipRepo(null,relationshipRepoURI,config);
	       }

	       public RelationshipRepoConfig getRelationshipRepoConfig(string blobRepoURI) {
	            return getRelationshipRepoConfig(null,blobRepoURI);
	       }

	       public List<RelationshipRepoConfig> getAllRelationshipRepoConfigs() {
	            return getAllRelationshipRepoConfigs(null);
	       }

	       public void deleteRelationshipRepo(string repoURI) {
	            return deleteRelationshipRepo(null,repoURI);
	       }

	       public bool doesRelationshipRepoExist(string repoURI) {
	            return doesRelationshipRepoExist(null,repoURI);
	       }

	       public bool doesRelationshipExist(string relationshipURI) {
	            return doesRelationshipExist(null,relationshipURI);
	       }

	       public string createRelationship(string relationshipAuthorityURI, string fromURI, string toURI, string label, Dictionary<string, string> properties) {
	            return createRelationship(null,relationshipAuthorityURI,fromURI,toURI,label,properties);
	       }

	       public RaptureRelationship getRelationship(string relationshipURI) {
	            return getRelationship(null,relationshipURI);
	       }

	       public void deleteRelationship(string relationshipURI) {
	            return deleteRelationship(null,relationshipURI);
	       }

	       public List<RaptureRelationship> getOutboundRelationships(string relationshipRepoURI, string fromURI) {
	            return getOutboundRelationships(null,relationshipRepoURI,fromURI);
	       }

	       public List<RaptureRelationship> getInboundRelationships(string relationshipRepoURI, string toURI) {
	            return getInboundRelationships(null,relationshipRepoURI,toURI);
	       }

	       public List<RaptureRelationship> getLabledRelationships(string relationshipRepoURI, string relationshipLabel) {
	            return getLabledRelationships(null,relationshipRepoURI,relationshipLabel);
	       }

	       public List<RaptureFolderInfo> getChildren(string prefix) {
	            return getChildren(null,prefix);
	       }

	       public Dictionary<string, RaptureFolderInfo> getAllChildrenMap(string prefix) {
	            return getAllChildrenMap(null,prefix);
	       }

	       public RaptureRelationshipRegion getRelationshipCenteredOn(string relationshipNodeURI, Dictionary<string, string> options) {
	            return getRelationshipCenteredOn(null,relationshipNodeURI,options);
	       }

}
}


