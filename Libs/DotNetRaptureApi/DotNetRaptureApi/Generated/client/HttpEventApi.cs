/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.revent
{

public class HttpReventApi : BaseHttpApi , ReventApi, ScriptReventApi {
	public HttpReventApi(HttpLoginApi login) : base(login, "revent") {
	
	}
		
	   
	    public RaptureEvent getEvent(CallingContext context,  string eventUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetEventPayload requestObj = new GetEventPayload();
	        requestObj.eventUri = eventUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETEVENT", RaptureSerializer.SerializeJson<GetEventPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureEvent>(resp.response.content);
	            }
	             throw new Exception("Error in getEvent, no response returned");
	        }
	   
	    public void putEvent(CallingContext context,  RaptureEvent revent)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PutEventPayload requestObj = new PutEventPayload();
	        requestObj.revent = revent;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUTEVENT", RaptureSerializer.SerializeJson<PutEventPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in putEvent, no response returned");
	        }
	   
	    public void deleteEvent(CallingContext context,  string eventUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteEventPayload requestObj = new DeleteEventPayload();
	        requestObj.eventUri = eventUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEEVENT", RaptureSerializer.SerializeJson<DeleteEventPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteEvent, no response returned");
	        }
	   
	    public List<RaptureFolderInfo> listEventsByUriPrefix(CallingContext context,  string eventUriPrefix)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ListEventsByUriPrefixPayload requestObj = new ListEventsByUriPrefixPayload();
	        requestObj.eventUriPrefix = eventUriPrefix;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("LISTEVENTSBYURIPREFIX", RaptureSerializer.SerializeJson<ListEventsByUriPrefixPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureFolderInfo>>(resp.response.content);
	            }
	             throw new Exception("Error in listEventsByUriPrefix, no response returned");
	        }
	   
	    public void addEventScript(CallingContext context,  string eventUri,  string scriptUri,  bool performOnce)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddEventScriptPayload requestObj = new AddEventScriptPayload();
	        requestObj.eventUri = eventUri;
	        requestObj.scriptUri = scriptUri;
	        requestObj.performOnce = performOnce;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDEVENTSCRIPT", RaptureSerializer.SerializeJson<AddEventScriptPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addEventScript, no response returned");
	        }
	   
	    public void deleteEventScript(CallingContext context,  string eventUri,  string scriptUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteEventScriptPayload requestObj = new DeleteEventScriptPayload();
	        requestObj.eventUri = eventUri;
	        requestObj.scriptUri = scriptUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEEVENTSCRIPT", RaptureSerializer.SerializeJson<DeleteEventScriptPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteEventScript, no response returned");
	        }
	   
	    public void addEventMessage(CallingContext context,  string eventUri,  string name,  string pipeline,  Dictionary<string, string> rparams)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddEventMessagePayload requestObj = new AddEventMessagePayload();
	        requestObj.eventUri = eventUri;
	        requestObj.name = name;
	        requestObj.pipeline = pipeline;
	        requestObj.rparams = rparams;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDEVENTMESSAGE", RaptureSerializer.SerializeJson<AddEventMessagePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addEventMessage, no response returned");
	        }
	   
	    public void deleteEventMessage(CallingContext context,  string eventUri,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteEventMessagePayload requestObj = new DeleteEventMessagePayload();
	        requestObj.eventUri = eventUri;
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEEVENTMESSAGE", RaptureSerializer.SerializeJson<DeleteEventMessagePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteEventMessage, no response returned");
	        }
	   
	    public void addEventNotification(CallingContext context,  string eventUri,  string name,  string notification,  Dictionary<string, string> rparams)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddEventNotificationPayload requestObj = new AddEventNotificationPayload();
	        requestObj.eventUri = eventUri;
	        requestObj.name = name;
	        requestObj.notification = notification;
	        requestObj.rparams = rparams;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDEVENTNOTIFICATION", RaptureSerializer.SerializeJson<AddEventNotificationPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addEventNotification, no response returned");
	        }
	   
	    public void deleteEventNotification(CallingContext context,  string eventUri,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteEventNotificationPayload requestObj = new DeleteEventNotificationPayload();
	        requestObj.eventUri = eventUri;
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEEVENTNOTIFICATION", RaptureSerializer.SerializeJson<DeleteEventNotificationPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteEventNotification, no response returned");
	        }
	   
	    public void addEventWorkflow(CallingContext context,  string eventUri,  string name,  string workflowUri,  Dictionary<string, string> rparams)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddEventWorkflowPayload requestObj = new AddEventWorkflowPayload();
	        requestObj.eventUri = eventUri;
	        requestObj.name = name;
	        requestObj.workflowUri = workflowUri;
	        requestObj.rparams = rparams;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDEVENTWORKFLOW", RaptureSerializer.SerializeJson<AddEventWorkflowPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addEventWorkflow, no response returned");
	        }
	   
	    public void deleteEventWorkflow(CallingContext context,  string eventUri,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteEventWorkflowPayload requestObj = new DeleteEventWorkflowPayload();
	        requestObj.eventUri = eventUri;
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEEVENTWORKFLOW", RaptureSerializer.SerializeJson<DeleteEventWorkflowPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteEventWorkflow, no response returned");
	        }
	   
	    public bool runEvent(CallingContext context,  string eventUri,  string associatedUri,  string eventContext)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RunEventPayload requestObj = new RunEventPayload();
	        requestObj.eventUri = eventUri;
	        requestObj.associatedUri = associatedUri;
	        requestObj.eventContext = eventContext;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RUNEVENT", RaptureSerializer.SerializeJson<RunEventPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in runEvent, no response returned");
	        }
	   
	    public RunEventHandle runEventWithContext(CallingContext context,  string eventUri,  string associatedUri,  Dictionary<string, string> eventContextMap)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RunEventWithContextPayload requestObj = new RunEventWithContextPayload();
	        requestObj.eventUri = eventUri;
	        requestObj.associatedUri = associatedUri;
	        requestObj.eventContextMap = eventContextMap;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RUNEVENTWITHCONTEXT", RaptureSerializer.SerializeJson<RunEventWithContextPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RunEventHandle>(resp.response.content);
	            }
	             throw new Exception("Error in runEventWithContext, no response returned");
	        }
	   
	    public bool eventExists(CallingContext context,  string eventUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            EventExistsPayload requestObj = new EventExistsPayload();
	        requestObj.eventUri = eventUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("EVENTEXISTS", RaptureSerializer.SerializeJson<EventExistsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in eventExists, no response returned");
	        }
	   
	    public List<string> deleteEventsByUriPrefix(CallingContext context,  string uriPrefix)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteEventsByUriPrefixPayload requestObj = new DeleteEventsByUriPrefixPayload();
	        requestObj.uriPrefix = uriPrefix;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEEVENTSBYURIPREFIX", RaptureSerializer.SerializeJson<DeleteEventsByUriPrefixPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in deleteEventsByUriPrefix, no response returned");
	        }
	
	       public RaptureEvent getEvent(string eventUri) {
	            return getEvent(null,eventUri);
	       }

	       public void putEvent(RaptureEvent revent) {
	            return putEvent(null,revent);
	       }

	       public void deleteEvent(string eventUri) {
	            return deleteEvent(null,eventUri);
	       }

	       public List<RaptureFolderInfo> listEventsByUriPrefix(string eventUriPrefix) {
	            return listEventsByUriPrefix(null,eventUriPrefix);
	       }

	       public void addEventScript(string eventUri, string scriptUri, bool performOnce) {
	            return addEventScript(null,eventUri,scriptUri,performOnce);
	       }

	       public void deleteEventScript(string eventUri, string scriptUri) {
	            return deleteEventScript(null,eventUri,scriptUri);
	       }

	       public void addEventMessage(string eventUri, string name, string pipeline, Dictionary<string, string> rparams) {
	            return addEventMessage(null,eventUri,name,pipeline,rparams);
	       }

	       public void deleteEventMessage(string eventUri, string name) {
	            return deleteEventMessage(null,eventUri,name);
	       }

	       public void addEventNotification(string eventUri, string name, string notification, Dictionary<string, string> rparams) {
	            return addEventNotification(null,eventUri,name,notification,rparams);
	       }

	       public void deleteEventNotification(string eventUri, string name) {
	            return deleteEventNotification(null,eventUri,name);
	       }

	       public void addEventWorkflow(string eventUri, string name, string workflowUri, Dictionary<string, string> rparams) {
	            return addEventWorkflow(null,eventUri,name,workflowUri,rparams);
	       }

	       public void deleteEventWorkflow(string eventUri, string name) {
	            return deleteEventWorkflow(null,eventUri,name);
	       }

	       public bool runEvent(string eventUri, string associatedUri, string eventContext) {
	            return runEvent(null,eventUri,associatedUri,eventContext);
	       }

	       public RunEventHandle runEventWithContext(string eventUri, string associatedUri, Dictionary<string, string> eventContextMap) {
	            return runEventWithContext(null,eventUri,associatedUri,eventContextMap);
	       }

	       public bool eventExists(string eventUri) {
	            return eventExists(null,eventUri);
	       }

	       public List<string> deleteEventsByUriPrefix(string uriPrefix) {
	            return deleteEventsByUriPrefix(null,uriPrefix);
	       }

}
}


