/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.entitlement
{

public class HttpEntitlementApi : BaseHttpApi , EntitlementApi, ScriptEntitlementApi {
	public HttpEntitlementApi(HttpLoginApi login) : base(login, "entitlement") {
	
	}
		
	   
	    public List<RaptureEntitlement> getEntitlements(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetEntitlementsPayload requestObj = new GetEntitlementsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETENTITLEMENTS", RaptureSerializer.SerializeJson<GetEntitlementsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureEntitlement>>(resp.response.content);
	            }
	             throw new Exception("Error in getEntitlements, no response returned");
	        }
	   
	    public RaptureEntitlement getEntitlement(CallingContext context,  string entitlementName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetEntitlementPayload requestObj = new GetEntitlementPayload();
	        requestObj.entitlementName = entitlementName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETENTITLEMENT", RaptureSerializer.SerializeJson<GetEntitlementPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureEntitlement>(resp.response.content);
	            }
	             throw new Exception("Error in getEntitlement, no response returned");
	        }
	   
	    public RaptureEntitlement getEntitlementByAddress(CallingContext context,  string entitlementURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetEntitlementByAddressPayload requestObj = new GetEntitlementByAddressPayload();
	        requestObj.entitlementURI = entitlementURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETENTITLEMENTBYADDRESS", RaptureSerializer.SerializeJson<GetEntitlementByAddressPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureEntitlement>(resp.response.content);
	            }
	             throw new Exception("Error in getEntitlementByAddress, no response returned");
	        }
	   
	    public RaptureEntitlementGroup getEntitlementGroup(CallingContext context,  string groupName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetEntitlementGroupPayload requestObj = new GetEntitlementGroupPayload();
	        requestObj.groupName = groupName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETENTITLEMENTGROUP", RaptureSerializer.SerializeJson<GetEntitlementGroupPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureEntitlementGroup>(resp.response.content);
	            }
	             throw new Exception("Error in getEntitlementGroup, no response returned");
	        }
	   
	    public RaptureEntitlementGroup getEntitlementGroupByAddress(CallingContext context,  string groupURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetEntitlementGroupByAddressPayload requestObj = new GetEntitlementGroupByAddressPayload();
	        requestObj.groupURI = groupURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETENTITLEMENTGROUPBYADDRESS", RaptureSerializer.SerializeJson<GetEntitlementGroupByAddressPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureEntitlementGroup>(resp.response.content);
	            }
	             throw new Exception("Error in getEntitlementGroupByAddress, no response returned");
	        }
	   
	    public List<RaptureEntitlementGroup> getEntitlementGroups(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetEntitlementGroupsPayload requestObj = new GetEntitlementGroupsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETENTITLEMENTGROUPS", RaptureSerializer.SerializeJson<GetEntitlementGroupsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureEntitlementGroup>>(resp.response.content);
	            }
	             throw new Exception("Error in getEntitlementGroups, no response returned");
	        }
	   
	    public RaptureEntitlement addEntitlement(CallingContext context,  string entitlementName,  string initialGroup)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddEntitlementPayload requestObj = new AddEntitlementPayload();
	        requestObj.entitlementName = entitlementName;
	        requestObj.initialGroup = initialGroup;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDENTITLEMENT", RaptureSerializer.SerializeJson<AddEntitlementPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureEntitlement>(resp.response.content);
	            }
	             throw new Exception("Error in addEntitlement, no response returned");
	        }
	   
	    public RaptureEntitlement addGroupToEntitlement(CallingContext context,  string entitlementName,  string groupName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddGroupToEntitlementPayload requestObj = new AddGroupToEntitlementPayload();
	        requestObj.entitlementName = entitlementName;
	        requestObj.groupName = groupName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDGROUPTOENTITLEMENT", RaptureSerializer.SerializeJson<AddGroupToEntitlementPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureEntitlement>(resp.response.content);
	            }
	             throw new Exception("Error in addGroupToEntitlement, no response returned");
	        }
	   
	    public RaptureEntitlement removeGroupFromEntitlement(CallingContext context,  string entitlementName,  string groupName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RemoveGroupFromEntitlementPayload requestObj = new RemoveGroupFromEntitlementPayload();
	        requestObj.entitlementName = entitlementName;
	        requestObj.groupName = groupName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REMOVEGROUPFROMENTITLEMENT", RaptureSerializer.SerializeJson<RemoveGroupFromEntitlementPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureEntitlement>(resp.response.content);
	            }
	             throw new Exception("Error in removeGroupFromEntitlement, no response returned");
	        }
	   
	    public void deleteEntitlement(CallingContext context,  string entitlementName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteEntitlementPayload requestObj = new DeleteEntitlementPayload();
	        requestObj.entitlementName = entitlementName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEENTITLEMENT", RaptureSerializer.SerializeJson<DeleteEntitlementPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteEntitlement, no response returned");
	        }
	   
	    public void deleteEntitlementGroup(CallingContext context,  string groupName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteEntitlementGroupPayload requestObj = new DeleteEntitlementGroupPayload();
	        requestObj.groupName = groupName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEENTITLEMENTGROUP", RaptureSerializer.SerializeJson<DeleteEntitlementGroupPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteEntitlementGroup, no response returned");
	        }
	   
	    public RaptureEntitlementGroup addEntitlementGroup(CallingContext context,  string groupName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddEntitlementGroupPayload requestObj = new AddEntitlementGroupPayload();
	        requestObj.groupName = groupName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDENTITLEMENTGROUP", RaptureSerializer.SerializeJson<AddEntitlementGroupPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureEntitlementGroup>(resp.response.content);
	            }
	             throw new Exception("Error in addEntitlementGroup, no response returned");
	        }
	   
	    public RaptureEntitlementGroup addUserToEntitlementGroup(CallingContext context,  string groupName,  string userName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddUserToEntitlementGroupPayload requestObj = new AddUserToEntitlementGroupPayload();
	        requestObj.groupName = groupName;
	        requestObj.userName = userName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDUSERTOENTITLEMENTGROUP", RaptureSerializer.SerializeJson<AddUserToEntitlementGroupPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureEntitlementGroup>(resp.response.content);
	            }
	             throw new Exception("Error in addUserToEntitlementGroup, no response returned");
	        }
	   
	    public RaptureEntitlementGroup removeUserFromEntitlementGroup(CallingContext context,  string groupName,  string userName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RemoveUserFromEntitlementGroupPayload requestObj = new RemoveUserFromEntitlementGroupPayload();
	        requestObj.groupName = groupName;
	        requestObj.userName = userName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REMOVEUSERFROMENTITLEMENTGROUP", RaptureSerializer.SerializeJson<RemoveUserFromEntitlementGroupPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureEntitlementGroup>(resp.response.content);
	            }
	             throw new Exception("Error in removeUserFromEntitlementGroup, no response returned");
	        }
	   
	    public List<RaptureEntitlement> findEntitlementsByUser(CallingContext context,  string username)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            FindEntitlementsByUserPayload requestObj = new FindEntitlementsByUserPayload();
	        requestObj.username = username;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("FINDENTITLEMENTSBYUSER", RaptureSerializer.SerializeJson<FindEntitlementsByUserPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureEntitlement>>(resp.response.content);
	            }
	             throw new Exception("Error in findEntitlementsByUser, no response returned");
	        }
	   
	    public List<RaptureEntitlement> findEntitlementsByGroup(CallingContext context,  string groupname)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            FindEntitlementsByGroupPayload requestObj = new FindEntitlementsByGroupPayload();
	        requestObj.groupname = groupname;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("FINDENTITLEMENTSBYGROUP", RaptureSerializer.SerializeJson<FindEntitlementsByGroupPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureEntitlement>>(resp.response.content);
	            }
	             throw new Exception("Error in findEntitlementsByGroup, no response returned");
	        }
	   
	    public List<RaptureEntitlement> findEntitlementsBySelf(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            FindEntitlementsBySelfPayload requestObj = new FindEntitlementsBySelfPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("FINDENTITLEMENTSBYSELF", RaptureSerializer.SerializeJson<FindEntitlementsBySelfPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureEntitlement>>(resp.response.content);
	            }
	             throw new Exception("Error in findEntitlementsBySelf, no response returned");
	        }
	
	       public List<RaptureEntitlement> getEntitlements() {
	            return getEntitlements(null);
	       }

	       public RaptureEntitlement getEntitlement(string entitlementName) {
	            return getEntitlement(null,entitlementName);
	       }

	       public RaptureEntitlement getEntitlementByAddress(string entitlementURI) {
	            return getEntitlementByAddress(null,entitlementURI);
	       }

	       public RaptureEntitlementGroup getEntitlementGroup(string groupName) {
	            return getEntitlementGroup(null,groupName);
	       }

	       public RaptureEntitlementGroup getEntitlementGroupByAddress(string groupURI) {
	            return getEntitlementGroupByAddress(null,groupURI);
	       }

	       public List<RaptureEntitlementGroup> getEntitlementGroups() {
	            return getEntitlementGroups(null);
	       }

	       public RaptureEntitlement addEntitlement(string entitlementName, string initialGroup) {
	            return addEntitlement(null,entitlementName,initialGroup);
	       }

	       public RaptureEntitlement addGroupToEntitlement(string entitlementName, string groupName) {
	            return addGroupToEntitlement(null,entitlementName,groupName);
	       }

	       public RaptureEntitlement removeGroupFromEntitlement(string entitlementName, string groupName) {
	            return removeGroupFromEntitlement(null,entitlementName,groupName);
	       }

	       public void deleteEntitlement(string entitlementName) {
	            return deleteEntitlement(null,entitlementName);
	       }

	       public void deleteEntitlementGroup(string groupName) {
	            return deleteEntitlementGroup(null,groupName);
	       }

	       public RaptureEntitlementGroup addEntitlementGroup(string groupName) {
	            return addEntitlementGroup(null,groupName);
	       }

	       public RaptureEntitlementGroup addUserToEntitlementGroup(string groupName, string userName) {
	            return addUserToEntitlementGroup(null,groupName,userName);
	       }

	       public RaptureEntitlementGroup removeUserFromEntitlementGroup(string groupName, string userName) {
	            return removeUserFromEntitlementGroup(null,groupName,userName);
	       }

	       public List<RaptureEntitlement> findEntitlementsByUser(string username) {
	            return findEntitlementsByUser(null,username);
	       }

	       public List<RaptureEntitlement> findEntitlementsByGroup(string groupname) {
	            return findEntitlementsByGroup(null,groupname);
	       }

	       public List<RaptureEntitlement> findEntitlementsBySelf() {
	            return findEntitlementsBySelf(null);
	       }

}
}


