/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.series
{

public class HttpSeriesApi : BaseHttpApi , SeriesApi, ScriptSeriesApi {
	public HttpSeriesApi(HttpLoginApi login) : base(login, "series") {
	
	}
		
	   
	    public void createSeriesRepo(CallingContext context,  string seriesRepoUri,  string config)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateSeriesRepoPayload requestObj = new CreateSeriesRepoPayload();
	        requestObj.seriesRepoUri = seriesRepoUri;
	        requestObj.config = config;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATESERIESREPO", RaptureSerializer.SerializeJson<CreateSeriesRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in createSeriesRepo, no response returned");
	        }
	   
	    public bool seriesRepoExists(CallingContext context,  string seriesRepoUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SeriesRepoExistsPayload requestObj = new SeriesRepoExistsPayload();
	        requestObj.seriesRepoUri = seriesRepoUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SERIESREPOEXISTS", RaptureSerializer.SerializeJson<SeriesRepoExistsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in seriesRepoExists, no response returned");
	        }
	   
	    public bool seriesExists(CallingContext context,  string seriesUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SeriesExistsPayload requestObj = new SeriesExistsPayload();
	        requestObj.seriesUri = seriesUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SERIESEXISTS", RaptureSerializer.SerializeJson<SeriesExistsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in seriesExists, no response returned");
	        }
	   
	    public SeriesRepoConfig getSeriesRepoConfig(CallingContext context,  string seriesRepoUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetSeriesRepoConfigPayload requestObj = new GetSeriesRepoConfigPayload();
	        requestObj.seriesRepoUri = seriesRepoUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSERIESREPOCONFIG", RaptureSerializer.SerializeJson<GetSeriesRepoConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<SeriesRepoConfig>(resp.response.content);
	            }
	             throw new Exception("Error in getSeriesRepoConfig, no response returned");
	        }
	   
	    public List<SeriesRepoConfig> getSeriesRepoConfigs(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetSeriesRepoConfigsPayload requestObj = new GetSeriesRepoConfigsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSERIESREPOCONFIGS", RaptureSerializer.SerializeJson<GetSeriesRepoConfigsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<SeriesRepoConfig>>(resp.response.content);
	            }
	             throw new Exception("Error in getSeriesRepoConfigs, no response returned");
	        }
	   
	    public void deleteSeriesRepo(CallingContext context,  string seriesRepoUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteSeriesRepoPayload requestObj = new DeleteSeriesRepoPayload();
	        requestObj.seriesRepoUri = seriesRepoUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETESERIESREPO", RaptureSerializer.SerializeJson<DeleteSeriesRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteSeriesRepo, no response returned");
	        }
	   
	    public void deleteSeries(CallingContext context,  string seriesRepoUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteSeriesPayload requestObj = new DeleteSeriesPayload();
	        requestObj.seriesRepoUri = seriesRepoUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETESERIES", RaptureSerializer.SerializeJson<DeleteSeriesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteSeries, no response returned");
	        }
	   
	    public List<string> deleteSeriesByUriPrefix(CallingContext context,  string seriesUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteSeriesByUriPrefixPayload requestObj = new DeleteSeriesByUriPrefixPayload();
	        requestObj.seriesUri = seriesUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETESERIESBYURIPREFIX", RaptureSerializer.SerializeJson<DeleteSeriesByUriPrefixPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in deleteSeriesByUriPrefix, no response returned");
	        }
	   
	    public void addDoubleToSeries(CallingContext context,  string seriesUri,  string pointKey,  double pointValue)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddDoubleToSeriesPayload requestObj = new AddDoubleToSeriesPayload();
	        requestObj.seriesUri = seriesUri;
	        requestObj.pointKey = pointKey;
	        requestObj.pointValue = pointValue;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDDOUBLETOSERIES", RaptureSerializer.SerializeJson<AddDoubleToSeriesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addDoubleToSeries, no response returned");
	        }
	   
	    public void addLongToSeries(CallingContext context,  string seriesUri,  string pointKey,  long pointValue)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddLongToSeriesPayload requestObj = new AddLongToSeriesPayload();
	        requestObj.seriesUri = seriesUri;
	        requestObj.pointKey = pointKey;
	        requestObj.pointValue = pointValue;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDLONGTOSERIES", RaptureSerializer.SerializeJson<AddLongToSeriesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addLongToSeries, no response returned");
	        }
	   
	    public void addStringToSeries(CallingContext context,  string seriesUri,  string pointKey,  string pointValue)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddStringToSeriesPayload requestObj = new AddStringToSeriesPayload();
	        requestObj.seriesUri = seriesUri;
	        requestObj.pointKey = pointKey;
	        requestObj.pointValue = pointValue;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDSTRINGTOSERIES", RaptureSerializer.SerializeJson<AddStringToSeriesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addStringToSeries, no response returned");
	        }
	   
	    public void addStructureToSeries(CallingContext context,  string seriesUri,  string pointKey,  string pointValue)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddStructureToSeriesPayload requestObj = new AddStructureToSeriesPayload();
	        requestObj.seriesUri = seriesUri;
	        requestObj.pointKey = pointKey;
	        requestObj.pointValue = pointValue;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDSTRUCTURETOSERIES", RaptureSerializer.SerializeJson<AddStructureToSeriesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addStructureToSeries, no response returned");
	        }
	   
	    public void addDoublesToSeries(CallingContext context,  string seriesUri,  List<string> pointKeys,  List<double> pointValues)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddDoublesToSeriesPayload requestObj = new AddDoublesToSeriesPayload();
	        requestObj.seriesUri = seriesUri;
	        requestObj.pointKeys = pointKeys;
	        requestObj.pointValues = pointValues;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDDOUBLESTOSERIES", RaptureSerializer.SerializeJson<AddDoublesToSeriesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addDoublesToSeries, no response returned");
	        }
	   
	    public void addLongsToSeries(CallingContext context,  string seriesUri,  List<string> pointKeys,  List<long> pointValues)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddLongsToSeriesPayload requestObj = new AddLongsToSeriesPayload();
	        requestObj.seriesUri = seriesUri;
	        requestObj.pointKeys = pointKeys;
	        requestObj.pointValues = pointValues;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDLONGSTOSERIES", RaptureSerializer.SerializeJson<AddLongsToSeriesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addLongsToSeries, no response returned");
	        }
	   
	    public void addStringsToSeries(CallingContext context,  string seriesUri,  List<string> pointKeys,  List<string> pointValues)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddStringsToSeriesPayload requestObj = new AddStringsToSeriesPayload();
	        requestObj.seriesUri = seriesUri;
	        requestObj.pointKeys = pointKeys;
	        requestObj.pointValues = pointValues;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDSTRINGSTOSERIES", RaptureSerializer.SerializeJson<AddStringsToSeriesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addStringsToSeries, no response returned");
	        }
	   
	    public void addStructuresToSeries(CallingContext context,  string seriesUri,  List<string> pointKeys,  List<string> pointValues)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddStructuresToSeriesPayload requestObj = new AddStructuresToSeriesPayload();
	        requestObj.seriesUri = seriesUri;
	        requestObj.pointKeys = pointKeys;
	        requestObj.pointValues = pointValues;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDSTRUCTURESTOSERIES", RaptureSerializer.SerializeJson<AddStructuresToSeriesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addStructuresToSeries, no response returned");
	        }
	   
	    public void deletePointsFromSeriesByPointKey(CallingContext context,  string seriesUri,  List<string> pointKeys)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeletePointsFromSeriesByPointKeyPayload requestObj = new DeletePointsFromSeriesByPointKeyPayload();
	        requestObj.seriesUri = seriesUri;
	        requestObj.pointKeys = pointKeys;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEPOINTSFROMSERIESBYPOINTKEY", RaptureSerializer.SerializeJson<DeletePointsFromSeriesByPointKeyPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deletePointsFromSeriesByPointKey, no response returned");
	        }
	   
	    public void deletePointsFromSeries(CallingContext context,  string seriesUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeletePointsFromSeriesPayload requestObj = new DeletePointsFromSeriesPayload();
	        requestObj.seriesUri = seriesUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEPOINTSFROMSERIES", RaptureSerializer.SerializeJson<DeletePointsFromSeriesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deletePointsFromSeries, no response returned");
	        }
	   
	    public SeriesPoint getLastPoint(CallingContext context,  string seriesUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetLastPointPayload requestObj = new GetLastPointPayload();
	        requestObj.seriesUri = seriesUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETLASTPOINT", RaptureSerializer.SerializeJson<GetLastPointPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<SeriesPoint>(resp.response.content);
	            }
	             throw new Exception("Error in getLastPoint, no response returned");
	        }
	   
	    public List<SeriesPoint> getPoints(CallingContext context,  string seriesUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetPointsPayload requestObj = new GetPointsPayload();
	        requestObj.seriesUri = seriesUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETPOINTS", RaptureSerializer.SerializeJson<GetPointsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<SeriesPoint>>(resp.response.content);
	            }
	             throw new Exception("Error in getPoints, no response returned");
	        }
	   
	    public List<SeriesPoint> getPointsAfter(CallingContext context,  string seriesUri,  string startColumn,  int maxNumber)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetPointsAfterPayload requestObj = new GetPointsAfterPayload();
	        requestObj.seriesUri = seriesUri;
	        requestObj.startColumn = startColumn;
	        requestObj.maxNumber = maxNumber;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETPOINTSAFTER", RaptureSerializer.SerializeJson<GetPointsAfterPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<SeriesPoint>>(resp.response.content);
	            }
	             throw new Exception("Error in getPointsAfter, no response returned");
	        }
	   
	    public List<SeriesPoint> getPointsAfterReverse(CallingContext context,  string seriesUri,  string startColumn,  int maxNumber)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetPointsAfterReversePayload requestObj = new GetPointsAfterReversePayload();
	        requestObj.seriesUri = seriesUri;
	        requestObj.startColumn = startColumn;
	        requestObj.maxNumber = maxNumber;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETPOINTSAFTERREVERSE", RaptureSerializer.SerializeJson<GetPointsAfterReversePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<SeriesPoint>>(resp.response.content);
	            }
	             throw new Exception("Error in getPointsAfterReverse, no response returned");
	        }
	   
	    public List<SeriesPoint> getPointsInRange(CallingContext context,  string seriesUri,  string startColumn,  string endColumn,  int maxNumber)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetPointsInRangePayload requestObj = new GetPointsInRangePayload();
	        requestObj.seriesUri = seriesUri;
	        requestObj.startColumn = startColumn;
	        requestObj.endColumn = endColumn;
	        requestObj.maxNumber = maxNumber;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETPOINTSINRANGE", RaptureSerializer.SerializeJson<GetPointsInRangePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<SeriesPoint>>(resp.response.content);
	            }
	             throw new Exception("Error in getPointsInRange, no response returned");
	        }
	   
	    public List<SeriesDouble> getPointsAsDoubles(CallingContext context,  string seriesUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetPointsAsDoublesPayload requestObj = new GetPointsAsDoublesPayload();
	        requestObj.seriesUri = seriesUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETPOINTSASDOUBLES", RaptureSerializer.SerializeJson<GetPointsAsDoublesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<SeriesDouble>>(resp.response.content);
	            }
	             throw new Exception("Error in getPointsAsDoubles, no response returned");
	        }
	   
	    public List<SeriesDouble> getPointsAfterAsDoubles(CallingContext context,  string seriesUri,  string startColumn,  int maxNumber)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetPointsAfterAsDoublesPayload requestObj = new GetPointsAfterAsDoublesPayload();
	        requestObj.seriesUri = seriesUri;
	        requestObj.startColumn = startColumn;
	        requestObj.maxNumber = maxNumber;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETPOINTSAFTERASDOUBLES", RaptureSerializer.SerializeJson<GetPointsAfterAsDoublesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<SeriesDouble>>(resp.response.content);
	            }
	             throw new Exception("Error in getPointsAfterAsDoubles, no response returned");
	        }
	   
	    public List<SeriesDouble> getPointsInRangeAsDoubles(CallingContext context,  string seriesUri,  string startColumn,  string endColumn,  int maxNumber)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetPointsInRangeAsDoublesPayload requestObj = new GetPointsInRangeAsDoublesPayload();
	        requestObj.seriesUri = seriesUri;
	        requestObj.startColumn = startColumn;
	        requestObj.endColumn = endColumn;
	        requestObj.maxNumber = maxNumber;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETPOINTSINRANGEASDOUBLES", RaptureSerializer.SerializeJson<GetPointsInRangeAsDoublesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<SeriesDouble>>(resp.response.content);
	            }
	             throw new Exception("Error in getPointsInRangeAsDoubles, no response returned");
	        }
	   
	    public List<SeriesString> getPointsAsStrings(CallingContext context,  string seriesUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetPointsAsStringsPayload requestObj = new GetPointsAsStringsPayload();
	        requestObj.seriesUri = seriesUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETPOINTSASSTRINGS", RaptureSerializer.SerializeJson<GetPointsAsStringsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<SeriesString>>(resp.response.content);
	            }
	             throw new Exception("Error in getPointsAsStrings, no response returned");
	        }
	   
	    public List<SeriesString> getPointsAfterAsStrings(CallingContext context,  string seriesUri,  string startColumn,  int maxNumber)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetPointsAfterAsStringsPayload requestObj = new GetPointsAfterAsStringsPayload();
	        requestObj.seriesUri = seriesUri;
	        requestObj.startColumn = startColumn;
	        requestObj.maxNumber = maxNumber;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETPOINTSAFTERASSTRINGS", RaptureSerializer.SerializeJson<GetPointsAfterAsStringsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<SeriesString>>(resp.response.content);
	            }
	             throw new Exception("Error in getPointsAfterAsStrings, no response returned");
	        }
	   
	    public List<SeriesString> getPointsInRangeAsStrings(CallingContext context,  string seriesUri,  string startColumn,  string endColumn,  int maxNumber)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetPointsInRangeAsStringsPayload requestObj = new GetPointsInRangeAsStringsPayload();
	        requestObj.seriesUri = seriesUri;
	        requestObj.startColumn = startColumn;
	        requestObj.endColumn = endColumn;
	        requestObj.maxNumber = maxNumber;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETPOINTSINRANGEASSTRINGS", RaptureSerializer.SerializeJson<GetPointsInRangeAsStringsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<SeriesString>>(resp.response.content);
	            }
	             throw new Exception("Error in getPointsInRangeAsStrings, no response returned");
	        }
	   
	    public List<SeriesPoint> runSeriesScript(CallingContext context,  string scriptContent,  List<string> arguments)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RunSeriesScriptPayload requestObj = new RunSeriesScriptPayload();
	        requestObj.scriptContent = scriptContent;
	        requestObj.arguments = arguments;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RUNSERIESSCRIPT", RaptureSerializer.SerializeJson<RunSeriesScriptPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<SeriesPoint>>(resp.response.content);
	            }
	             throw new Exception("Error in runSeriesScript, no response returned");
	        }
	   
	    public void runSeriesScriptQuiet(CallingContext context,  string scriptContent,  List<string> arguments)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RunSeriesScriptQuietPayload requestObj = new RunSeriesScriptQuietPayload();
	        requestObj.scriptContent = scriptContent;
	        requestObj.arguments = arguments;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RUNSERIESSCRIPTQUIET", RaptureSerializer.SerializeJson<RunSeriesScriptQuietPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in runSeriesScriptQuiet, no response returned");
	        }
	   
	    public Dictionary<string, RaptureFolderInfo> listSeriesByUriPrefix(CallingContext context,  string uriPrefix,  int depth)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ListSeriesByUriPrefixPayload requestObj = new ListSeriesByUriPrefixPayload();
	        requestObj.uriPrefix = uriPrefix;
	        requestObj.depth = depth;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("LISTSERIESBYURIPREFIX", RaptureSerializer.SerializeJson<ListSeriesByUriPrefixPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, RaptureFolderInfo>>(resp.response.content);
	            }
	             throw new Exception("Error in listSeriesByUriPrefix, no response returned");
	        }
	
	       public void createSeriesRepo(string seriesRepoUri, string config) {
	            return createSeriesRepo(null,seriesRepoUri,config);
	       }

	       public bool seriesRepoExists(string seriesRepoUri) {
	            return seriesRepoExists(null,seriesRepoUri);
	       }

	       public bool seriesExists(string seriesUri) {
	            return seriesExists(null,seriesUri);
	       }

	       public SeriesRepoConfig getSeriesRepoConfig(string seriesRepoUri) {
	            return getSeriesRepoConfig(null,seriesRepoUri);
	       }

	       public List<SeriesRepoConfig> getSeriesRepoConfigs() {
	            return getSeriesRepoConfigs(null);
	       }

	       public void deleteSeriesRepo(string seriesRepoUri) {
	            return deleteSeriesRepo(null,seriesRepoUri);
	       }

	       public void deleteSeries(string seriesRepoUri) {
	            return deleteSeries(null,seriesRepoUri);
	       }

	       public List<string> deleteSeriesByUriPrefix(string seriesUri) {
	            return deleteSeriesByUriPrefix(null,seriesUri);
	       }

	       public void addDoubleToSeries(string seriesUri, string pointKey, double pointValue) {
	            return addDoubleToSeries(null,seriesUri,pointKey,pointValue);
	       }

	       public void addLongToSeries(string seriesUri, string pointKey, long pointValue) {
	            return addLongToSeries(null,seriesUri,pointKey,pointValue);
	       }

	       public void addStringToSeries(string seriesUri, string pointKey, string pointValue) {
	            return addStringToSeries(null,seriesUri,pointKey,pointValue);
	       }

	       public void addStructureToSeries(string seriesUri, string pointKey, string pointValue) {
	            return addStructureToSeries(null,seriesUri,pointKey,pointValue);
	       }

	       public void addDoublesToSeries(string seriesUri, List<string> pointKeys, List<double> pointValues) {
	            return addDoublesToSeries(null,seriesUri,pointKeys,pointValues);
	       }

	       public void addLongsToSeries(string seriesUri, List<string> pointKeys, List<long> pointValues) {
	            return addLongsToSeries(null,seriesUri,pointKeys,pointValues);
	       }

	       public void addStringsToSeries(string seriesUri, List<string> pointKeys, List<string> pointValues) {
	            return addStringsToSeries(null,seriesUri,pointKeys,pointValues);
	       }

	       public void addStructuresToSeries(string seriesUri, List<string> pointKeys, List<string> pointValues) {
	            return addStructuresToSeries(null,seriesUri,pointKeys,pointValues);
	       }

	       public void deletePointsFromSeriesByPointKey(string seriesUri, List<string> pointKeys) {
	            return deletePointsFromSeriesByPointKey(null,seriesUri,pointKeys);
	       }

	       public void deletePointsFromSeries(string seriesUri) {
	            return deletePointsFromSeries(null,seriesUri);
	       }

	       public SeriesPoint getLastPoint(string seriesUri) {
	            return getLastPoint(null,seriesUri);
	       }

	       public List<SeriesPoint> getPoints(string seriesUri) {
	            return getPoints(null,seriesUri);
	       }

	       public List<SeriesPoint> getPointsAfter(string seriesUri, string startColumn, int maxNumber) {
	            return getPointsAfter(null,seriesUri,startColumn,maxNumber);
	       }

	       public List<SeriesPoint> getPointsAfterReverse(string seriesUri, string startColumn, int maxNumber) {
	            return getPointsAfterReverse(null,seriesUri,startColumn,maxNumber);
	       }

	       public List<SeriesPoint> getPointsInRange(string seriesUri, string startColumn, string endColumn, int maxNumber) {
	            return getPointsInRange(null,seriesUri,startColumn,endColumn,maxNumber);
	       }

	       public List<SeriesDouble> getPointsAsDoubles(string seriesUri) {
	            return getPointsAsDoubles(null,seriesUri);
	       }

	       public List<SeriesDouble> getPointsAfterAsDoubles(string seriesUri, string startColumn, int maxNumber) {
	            return getPointsAfterAsDoubles(null,seriesUri,startColumn,maxNumber);
	       }

	       public List<SeriesDouble> getPointsInRangeAsDoubles(string seriesUri, string startColumn, string endColumn, int maxNumber) {
	            return getPointsInRangeAsDoubles(null,seriesUri,startColumn,endColumn,maxNumber);
	       }

	       public List<SeriesString> getPointsAsStrings(string seriesUri) {
	            return getPointsAsStrings(null,seriesUri);
	       }

	       public List<SeriesString> getPointsAfterAsStrings(string seriesUri, string startColumn, int maxNumber) {
	            return getPointsAfterAsStrings(null,seriesUri,startColumn,maxNumber);
	       }

	       public List<SeriesString> getPointsInRangeAsStrings(string seriesUri, string startColumn, string endColumn, int maxNumber) {
	            return getPointsInRangeAsStrings(null,seriesUri,startColumn,endColumn,maxNumber);
	       }

	       public List<SeriesPoint> runSeriesScript(string scriptContent, List<string> arguments) {
	            return runSeriesScript(null,scriptContent,arguments);
	       }

	       public void runSeriesScriptQuiet(string scriptContent, List<string> arguments) {
	            return runSeriesScriptQuiet(null,scriptContent,arguments);
	       }

	       public Dictionary<string, RaptureFolderInfo> listSeriesByUriPrefix(string uriPrefix, int depth) {
	            return listSeriesByUriPrefix(null,uriPrefix,depth);
	       }

}
}


