/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.environment
{

public class HttpEnvironmentApi : BaseHttpApi , EnvironmentApi, ScriptEnvironmentApi {
	public HttpEnvironmentApi(HttpLoginApi login) : base(login, "environment") {
	
	}
		
	   
	    public RaptureNetwork getNetworkInfo(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetNetworkInfoPayload requestObj = new GetNetworkInfoPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETNETWORKINFO", RaptureSerializer.SerializeJson<GetNetworkInfoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureNetwork>(resp.response.content);
	            }
	             throw new Exception("Error in getNetworkInfo, no response returned");
	        }
	   
	    public RaptureNetwork setNetworkInfo(CallingContext context,  RaptureNetwork network)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetNetworkInfoPayload requestObj = new SetNetworkInfoPayload();
	        requestObj.network = network;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETNETWORKINFO", RaptureSerializer.SerializeJson<SetNetworkInfoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureNetwork>(resp.response.content);
	            }
	             throw new Exception("Error in setNetworkInfo, no response returned");
	        }
	   
	    public RaptureServerInfo getThisServer(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetThisServerPayload requestObj = new GetThisServerPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETTHISSERVER", RaptureSerializer.SerializeJson<GetThisServerPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureServerInfo>(resp.response.content);
	            }
	             throw new Exception("Error in getThisServer, no response returned");
	        }
	   
	    public List<RaptureServerInfo> getServers(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetServersPayload requestObj = new GetServersPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSERVERS", RaptureSerializer.SerializeJson<GetServersPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureServerInfo>>(resp.response.content);
	            }
	             throw new Exception("Error in getServers, no response returned");
	        }
	   
	    public RaptureServerInfo setThisServer(CallingContext context,  RaptureServerInfo info)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetThisServerPayload requestObj = new SetThisServerPayload();
	        requestObj.info = info;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETTHISSERVER", RaptureSerializer.SerializeJson<SetThisServerPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureServerInfo>(resp.response.content);
	            }
	             throw new Exception("Error in setThisServer, no response returned");
	        }
	   
	    public void setApplianceMode(CallingContext context,  bool mode)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetApplianceModePayload requestObj = new SetApplianceModePayload();
	        requestObj.mode = mode;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETAPPLIANCEMODE", RaptureSerializer.SerializeJson<SetApplianceModePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setApplianceMode, no response returned");
	        }
	   
	    public bool getApplianceMode(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetApplianceModePayload requestObj = new GetApplianceModePayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETAPPLIANCEMODE", RaptureSerializer.SerializeJson<GetApplianceModePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in getApplianceMode, no response returned");
	        }
	   
	    public List<RaptureServerStatus> getServerStatus(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetServerStatusPayload requestObj = new GetServerStatusPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSERVERSTATUS", RaptureSerializer.SerializeJson<GetServerStatusPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureServerStatus>>(resp.response.content);
	            }
	             throw new Exception("Error in getServerStatus, no response returned");
	        }
	   
	    public LicenseInfo getLicenseInfo(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetLicenseInfoPayload requestObj = new GetLicenseInfoPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETLICENSEINFO", RaptureSerializer.SerializeJson<GetLicenseInfoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<LicenseInfo>(resp.response.content);
	            }
	             throw new Exception("Error in getLicenseInfo, no response returned");
	        }
	
	       public RaptureNetwork getNetworkInfo() {
	            return getNetworkInfo(null);
	       }

	       public RaptureNetwork setNetworkInfo(RaptureNetwork network) {
	            return setNetworkInfo(null,network);
	       }

	       public RaptureServerInfo getThisServer() {
	            return getThisServer(null);
	       }

	       public List<RaptureServerInfo> getServers() {
	            return getServers(null);
	       }

	       public RaptureServerInfo setThisServer(RaptureServerInfo info) {
	            return setThisServer(null,info);
	       }

	       public void setApplianceMode(bool mode) {
	            return setApplianceMode(null,mode);
	       }

	       public bool getApplianceMode() {
	            return getApplianceMode(null);
	       }

	       public List<RaptureServerStatus> getServerStatus() {
	            return getServerStatus(null);
	       }

	       public LicenseInfo getLicenseInfo() {
	            return getLicenseInfo(null);
	       }

}
}


