/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.repo
{

public class HttpRepoApi : BaseHttpApi , RepoApi, ScriptRepoApi {
	public HttpRepoApi(HttpLoginApi login) : base(login, "repo") {
	
	}
		
	   
	    public ContentEnvelope getContent(CallingContext context,  string raptureURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetContentPayload requestObj = new GetContentPayload();
	        requestObj.raptureURI = raptureURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETCONTENT", RaptureSerializer.SerializeJson<GetContentPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<ContentEnvelope>(resp.response.content);
	            }
	             throw new Exception("Error in getContent, no response returned");
	        }
	   
	    public void putContent(CallingContext context,  string raptureURI,  Object content,  string comment)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PutContentPayload requestObj = new PutContentPayload();
	        requestObj.raptureURI = raptureURI;
	        requestObj.content = content;
	        requestObj.comment = comment;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUTCONTENT", RaptureSerializer.SerializeJson<PutContentPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in putContent, no response returned");
	        }
	   
	    public void deleteContent(CallingContext context,  string raptureURI,  string comment)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteContentPayload requestObj = new DeleteContentPayload();
	        requestObj.raptureURI = raptureURI;
	        requestObj.comment = comment;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETECONTENT", RaptureSerializer.SerializeJson<DeleteContentPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteContent, no response returned");
	        }
	
	       public ContentEnvelope getContent(string raptureURI) {
	            return getContent(null,raptureURI);
	       }

	       public void putContent(string raptureURI, Object content, string comment) {
	            return putContent(null,raptureURI,content,comment);
	       }

	       public void deleteContent(string raptureURI, string comment) {
	            return deleteContent(null,raptureURI,comment);
	       }

}
}


