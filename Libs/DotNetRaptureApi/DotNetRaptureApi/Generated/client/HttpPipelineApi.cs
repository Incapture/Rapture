/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.pipeline
{

public class HttpPipelineApi : BaseHttpApi , PipelineApi, ScriptPipelineApi {
	public HttpPipelineApi(HttpLoginApi login) : base(login, "pipeline") {
	
	}
		
	   
	    public void removeServerCategory(CallingContext context,  string category)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RemoveServerCategoryPayload requestObj = new RemoveServerCategoryPayload();
	        requestObj.category = category;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REMOVESERVERCATEGORY", RaptureSerializer.SerializeJson<RemoveServerCategoryPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in removeServerCategory, no response returned");
	        }
	   
	    public List<string> getServerCategories(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetServerCategoriesPayload requestObj = new GetServerCategoriesPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSERVERCATEGORIES", RaptureSerializer.SerializeJson<GetServerCategoriesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in getServerCategories, no response returned");
	        }
	   
	    public List<CategoryQueueBindings> getBoundExchanges(CallingContext context,  string category)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetBoundExchangesPayload requestObj = new GetBoundExchangesPayload();
	        requestObj.category = category;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETBOUNDEXCHANGES", RaptureSerializer.SerializeJson<GetBoundExchangesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<CategoryQueueBindings>>(resp.response.content);
	            }
	             throw new Exception("Error in getBoundExchanges, no response returned");
	        }
	   
	    public void deregisterPipelineExchange(CallingContext context,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeregisterPipelineExchangePayload requestObj = new DeregisterPipelineExchangePayload();
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DEREGISTERPIPELINEEXCHANGE", RaptureSerializer.SerializeJson<DeregisterPipelineExchangePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deregisterPipelineExchange, no response returned");
	        }
	   
	    public List<string> getExchanges(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetExchangesPayload requestObj = new GetExchangesPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETEXCHANGES", RaptureSerializer.SerializeJson<GetExchangesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in getExchanges, no response returned");
	        }
	   
	    public RaptureExchange getExchange(CallingContext context,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetExchangePayload requestObj = new GetExchangePayload();
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETEXCHANGE", RaptureSerializer.SerializeJson<GetExchangePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureExchange>(resp.response.content);
	            }
	             throw new Exception("Error in getExchange, no response returned");
	        }
	   
	    public void publishMessageToCategory(CallingContext context,  RapturePipelineTask task)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PublishMessageToCategoryPayload requestObj = new PublishMessageToCategoryPayload();
	        requestObj.task = task;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUBLISHMESSAGETOCATEGORY", RaptureSerializer.SerializeJson<PublishMessageToCategoryPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in publishMessageToCategory, no response returned");
	        }
	   
	    public void broadcastMessageToCategory(CallingContext context,  RapturePipelineTask task)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            BroadcastMessageToCategoryPayload requestObj = new BroadcastMessageToCategoryPayload();
	        requestObj.task = task;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("BROADCASTMESSAGETOCATEGORY", RaptureSerializer.SerializeJson<BroadcastMessageToCategoryPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in broadcastMessageToCategory, no response returned");
	        }
	   
	    public void broadcastMessageToAll(CallingContext context,  RapturePipelineTask task)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            BroadcastMessageToAllPayload requestObj = new BroadcastMessageToAllPayload();
	        requestObj.task = task;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("BROADCASTMESSAGETOALL", RaptureSerializer.SerializeJson<BroadcastMessageToAllPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in broadcastMessageToAll, no response returned");
	        }
	   
	    public PipelineTaskStatus getStatus(CallingContext context,  string taskId)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetStatusPayload requestObj = new GetStatusPayload();
	        requestObj.taskId = taskId;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSTATUS", RaptureSerializer.SerializeJson<GetStatusPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<PipelineTaskStatus>(resp.response.content);
	            }
	             throw new Exception("Error in getStatus, no response returned");
	        }
	   
	    public List<RapturePipelineTask> queryTasks(CallingContext context,  string query)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            QueryTasksPayload requestObj = new QueryTasksPayload();
	        requestObj.query = query;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("QUERYTASKS", RaptureSerializer.SerializeJson<QueryTasksPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RapturePipelineTask>>(resp.response.content);
	            }
	             throw new Exception("Error in queryTasks, no response returned");
	        }
	   
	    public List<RapturePipelineTask> queryTasksOld(CallingContext context,  TableQuery query)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            QueryTasksOldPayload requestObj = new QueryTasksOldPayload();
	        requestObj.query = query;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("QUERYTASKSOLD", RaptureSerializer.SerializeJson<QueryTasksOldPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RapturePipelineTask>>(resp.response.content);
	            }
	             throw new Exception("Error in queryTasksOld, no response returned");
	        }
	   
	    public long getLatestTaskEpoch(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetLatestTaskEpochPayload requestObj = new GetLatestTaskEpochPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETLATESTTASKEPOCH", RaptureSerializer.SerializeJson<GetLatestTaskEpochPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<long>(resp.response.content);
	            }
	             throw new Exception("Error in getLatestTaskEpoch, no response returned");
	        }
	   
	    public void drainPipeline(CallingContext context,  string exchange)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DrainPipelinePayload requestObj = new DrainPipelinePayload();
	        requestObj.exchange = exchange;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DRAINPIPELINE", RaptureSerializer.SerializeJson<DrainPipelinePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in drainPipeline, no response returned");
	        }
	   
	    public void registerExchangeDomain(CallingContext context,  string domainURI,  string config)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RegisterExchangeDomainPayload requestObj = new RegisterExchangeDomainPayload();
	        requestObj.domainURI = domainURI;
	        requestObj.config = config;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REGISTEREXCHANGEDOMAIN", RaptureSerializer.SerializeJson<RegisterExchangeDomainPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in registerExchangeDomain, no response returned");
	        }
	   
	    public void deregisterExchangeDomain(CallingContext context,  string domainURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeregisterExchangeDomainPayload requestObj = new DeregisterExchangeDomainPayload();
	        requestObj.domainURI = domainURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DEREGISTEREXCHANGEDOMAIN", RaptureSerializer.SerializeJson<DeregisterExchangeDomainPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deregisterExchangeDomain, no response returned");
	        }
	   
	    public List<string> getExchangeDomains(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetExchangeDomainsPayload requestObj = new GetExchangeDomainsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETEXCHANGEDOMAINS", RaptureSerializer.SerializeJson<GetExchangeDomainsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in getExchangeDomains, no response returned");
	        }
	   
	    public void setupStandardCategory(CallingContext context,  string category)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetupStandardCategoryPayload requestObj = new SetupStandardCategoryPayload();
	        requestObj.category = category;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETUPSTANDARDCATEGORY", RaptureSerializer.SerializeJson<SetupStandardCategoryPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setupStandardCategory, no response returned");
	        }
	   
	    public Dictionary<string, Object> makeRPC(CallingContext context,  string queueName,  string fnName,  Dictionary<string, Object> rparams,  long timeoutInSeconds)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            MakeRPCPayload requestObj = new MakeRPCPayload();
	        requestObj.queueName = queueName;
	        requestObj.fnName = fnName;
	        requestObj.rparams = rparams;
	        requestObj.timeoutInSeconds = timeoutInSeconds;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("MAKERPC", RaptureSerializer.SerializeJson<MakeRPCPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, Object>>(resp.response.content);
	            }
	             throw new Exception("Error in makeRPC, no response returned");
	        }
	   
	    public void createTopicExchange(CallingContext context,  string domain,  string exchange)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateTopicExchangePayload requestObj = new CreateTopicExchangePayload();
	        requestObj.domain = domain;
	        requestObj.exchange = exchange;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATETOPICEXCHANGE", RaptureSerializer.SerializeJson<CreateTopicExchangePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in createTopicExchange, no response returned");
	        }
	   
	    public void publishTopicMessage(CallingContext context,  string domain,  string exchange,  string topic,  string message)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PublishTopicMessagePayload requestObj = new PublishTopicMessagePayload();
	        requestObj.domain = domain;
	        requestObj.exchange = exchange;
	        requestObj.topic = topic;
	        requestObj.message = message;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUBLISHTOPICMESSAGE", RaptureSerializer.SerializeJson<PublishTopicMessagePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in publishTopicMessage, no response returned");
	        }
	
	       public void removeServerCategory(string category) {
	            return removeServerCategory(null,category);
	       }

	       public List<string> getServerCategories() {
	            return getServerCategories(null);
	       }

	       public List<CategoryQueueBindings> getBoundExchanges(string category) {
	            return getBoundExchanges(null,category);
	       }

	       public void deregisterPipelineExchange(string name) {
	            return deregisterPipelineExchange(null,name);
	       }

	       public List<string> getExchanges() {
	            return getExchanges(null);
	       }

	       public RaptureExchange getExchange(string name) {
	            return getExchange(null,name);
	       }

	       public void publishMessageToCategory(RapturePipelineTask task) {
	            return publishMessageToCategory(null,task);
	       }

	       public void broadcastMessageToCategory(RapturePipelineTask task) {
	            return broadcastMessageToCategory(null,task);
	       }

	       public void broadcastMessageToAll(RapturePipelineTask task) {
	            return broadcastMessageToAll(null,task);
	       }

	       public PipelineTaskStatus getStatus(string taskId) {
	            return getStatus(null,taskId);
	       }

	       public List<RapturePipelineTask> queryTasks(string query) {
	            return queryTasks(null,query);
	       }

	       public List<RapturePipelineTask> queryTasksOld(TableQuery query) {
	            return queryTasksOld(null,query);
	       }

	       public long getLatestTaskEpoch() {
	            return getLatestTaskEpoch(null);
	       }

	       public void drainPipeline(string exchange) {
	            return drainPipeline(null,exchange);
	       }

	       public void registerExchangeDomain(string domainURI, string config) {
	            return registerExchangeDomain(null,domainURI,config);
	       }

	       public void deregisterExchangeDomain(string domainURI) {
	            return deregisterExchangeDomain(null,domainURI);
	       }

	       public List<string> getExchangeDomains() {
	            return getExchangeDomains(null);
	       }

	       public void setupStandardCategory(string category) {
	            return setupStandardCategory(null,category);
	       }

	       public Dictionary<string, Object> makeRPC(string queueName, string fnName, Dictionary<string, Object> rparams, long timeoutInSeconds) {
	            return makeRPC(null,queueName,fnName,rparams,timeoutInSeconds);
	       }

	       public void createTopicExchange(string domain, string exchange) {
	            return createTopicExchange(null,domain,exchange);
	       }

	       public void publishTopicMessage(string domain, string exchange, string topic, string message) {
	            return publishTopicMessage(null,domain,exchange,topic,message);
	       }

}
}


