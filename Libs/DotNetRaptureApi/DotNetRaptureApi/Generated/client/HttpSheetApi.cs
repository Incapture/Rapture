/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.sheet
{

public class HttpSheetApi : BaseHttpApi , SheetApi, ScriptSheetApi {
	public HttpSheetApi(HttpLoginApi login) : base(login, "sheet") {
	
	}
		
	   
	    public void createSheetRepo(CallingContext context,  string sheetURI,  string config)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateSheetRepoPayload requestObj = new CreateSheetRepoPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.config = config;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATESHEETREPO", RaptureSerializer.SerializeJson<CreateSheetRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in createSheetRepo, no response returned");
	        }
	   
	    public SheetRepoConfig getSheetRepoConfig(CallingContext context,  string sheetURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetSheetRepoConfigPayload requestObj = new GetSheetRepoConfigPayload();
	        requestObj.sheetURI = sheetURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSHEETREPOCONFIG", RaptureSerializer.SerializeJson<GetSheetRepoConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<SheetRepoConfig>(resp.response.content);
	            }
	             throw new Exception("Error in getSheetRepoConfig, no response returned");
	        }
	   
	    public List<SheetRepoConfig> getSheetRepoConfigs(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetSheetRepoConfigsPayload requestObj = new GetSheetRepoConfigsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSHEETREPOCONFIGS", RaptureSerializer.SerializeJson<GetSheetRepoConfigsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<SheetRepoConfig>>(resp.response.content);
	            }
	             throw new Exception("Error in getSheetRepoConfigs, no response returned");
	        }
	   
	    public RaptureSheet createSheet(CallingContext context,  string sheetURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateSheetPayload requestObj = new CreateSheetPayload();
	        requestObj.sheetURI = sheetURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATESHEET", RaptureSerializer.SerializeJson<CreateSheetPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureSheet>(resp.response.content);
	            }
	             throw new Exception("Error in createSheet, no response returned");
	        }
	   
	    public RaptureSheet deleteSheet(CallingContext context,  string sheetURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteSheetPayload requestObj = new DeleteSheetPayload();
	        requestObj.sheetURI = sheetURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETESHEET", RaptureSerializer.SerializeJson<DeleteSheetPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureSheet>(resp.response.content);
	            }
	             throw new Exception("Error in deleteSheet, no response returned");
	        }
	   
	    public bool sheetExists(CallingContext context,  string sheetURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SheetExistsPayload requestObj = new SheetExistsPayload();
	        requestObj.sheetURI = sheetURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SHEETEXISTS", RaptureSerializer.SerializeJson<SheetExistsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in sheetExists, no response returned");
	        }
	   
	    public void deleteSheetRepo(CallingContext context,  string repoURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteSheetRepoPayload requestObj = new DeleteSheetRepoPayload();
	        requestObj.repoURI = repoURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETESHEETREPO", RaptureSerializer.SerializeJson<DeleteSheetRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteSheetRepo, no response returned");
	        }
	   
	    public bool sheetRepoExists(CallingContext context,  string repoURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SheetRepoExistsPayload requestObj = new SheetRepoExistsPayload();
	        requestObj.repoURI = repoURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SHEETREPOEXISTS", RaptureSerializer.SerializeJson<SheetRepoExistsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in sheetRepoExists, no response returned");
	        }
	   
	    public Dictionary<string, RaptureFolderInfo> listSheetsByUriPrefix(CallingContext context,  string uriPrefix,  int depth)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ListSheetsByUriPrefixPayload requestObj = new ListSheetsByUriPrefixPayload();
	        requestObj.uriPrefix = uriPrefix;
	        requestObj.depth = depth;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("LISTSHEETSBYURIPREFIX", RaptureSerializer.SerializeJson<ListSheetsByUriPrefixPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, RaptureFolderInfo>>(resp.response.content);
	            }
	             throw new Exception("Error in listSheetsByUriPrefix, no response returned");
	        }
	   
	    public List<string> deleteSheetsByUriPrefix(CallingContext context,  string uriPrefix)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteSheetsByUriPrefixPayload requestObj = new DeleteSheetsByUriPrefixPayload();
	        requestObj.uriPrefix = uriPrefix;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETESHEETSBYURIPREFIX", RaptureSerializer.SerializeJson<DeleteSheetsByUriPrefixPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in deleteSheetsByUriPrefix, no response returned");
	        }
	   
	    public string setSheetCell(CallingContext context,  string sheetURI,  int row,  int column,  string value,  int tabId)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetSheetCellPayload requestObj = new SetSheetCellPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.row = row;
	        requestObj.column = column;
	        requestObj.value = value;
	        requestObj.tabId = tabId;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETSHEETCELL", RaptureSerializer.SerializeJson<SetSheetCellPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in setSheetCell, no response returned");
	        }
	   
	    public void setBlock(CallingContext context,  string sheetURI,  int startRow,  int startColumn,  List<string> values,  int height,  int width,  int tabId)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetBlockPayload requestObj = new SetBlockPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.startRow = startRow;
	        requestObj.startColumn = startColumn;
	        requestObj.values = values;
	        requestObj.height = height;
	        requestObj.width = width;
	        requestObj.tabId = tabId;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETBLOCK", RaptureSerializer.SerializeJson<SetBlockPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setBlock, no response returned");
	        }
	   
	    public string getSheetCell(CallingContext context,  string sheetURI,  int row,  int column,  int tabId)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetSheetCellPayload requestObj = new GetSheetCellPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.row = row;
	        requestObj.column = column;
	        requestObj.tabId = tabId;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSHEETCELL", RaptureSerializer.SerializeJson<GetSheetCellPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in getSheetCell, no response returned");
	        }
	   
	    public List<RaptureSheetCell> findCellsByEpoch(CallingContext context,  string sheetURI,  int tabId,  long epoch)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            FindCellsByEpochPayload requestObj = new FindCellsByEpochPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.tabId = tabId;
	        requestObj.epoch = epoch;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("FINDCELLSBYEPOCH", RaptureSerializer.SerializeJson<FindCellsByEpochPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureSheetCell>>(resp.response.content);
	            }
	             throw new Exception("Error in findCellsByEpoch, no response returned");
	        }
	   
	    public SheetAndMeta getSheetAndMeta(CallingContext context,  string sheetURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetSheetAndMetaPayload requestObj = new GetSheetAndMetaPayload();
	        requestObj.sheetURI = sheetURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSHEETANDMETA", RaptureSerializer.SerializeJson<GetSheetAndMetaPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<SheetAndMeta>(resp.response.content);
	            }
	             throw new Exception("Error in getSheetAndMeta, no response returned");
	        }
	   
	    public void exportSheetAsPdf(CallingContext context,  string sheetURI,  string blobURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ExportSheetAsPdfPayload requestObj = new ExportSheetAsPdfPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.blobURI = blobURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("EXPORTSHEETASPDF", RaptureSerializer.SerializeJson<ExportSheetAsPdfPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in exportSheetAsPdf, no response returned");
	        }
	   
	    public List<RaptureSheetStyle> getAllStyles(CallingContext context,  string sheetURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetAllStylesPayload requestObj = new GetAllStylesPayload();
	        requestObj.sheetURI = sheetURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETALLSTYLES", RaptureSerializer.SerializeJson<GetAllStylesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureSheetStyle>>(resp.response.content);
	            }
	             throw new Exception("Error in getAllStyles, no response returned");
	        }
	   
	    public void removeStyle(CallingContext context,  string sheetURI,  string styleName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RemoveStylePayload requestObj = new RemoveStylePayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.styleName = styleName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REMOVESTYLE", RaptureSerializer.SerializeJson<RemoveStylePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in removeStyle, no response returned");
	        }
	   
	    public RaptureSheetStyle createStyle(CallingContext context,  string sheetURI,  RaptureSheetStyle style)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateStylePayload requestObj = new CreateStylePayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.style = style;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATESTYLE", RaptureSerializer.SerializeJson<CreateStylePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureSheetStyle>(resp.response.content);
	            }
	             throw new Exception("Error in createStyle, no response returned");
	        }
	   
	    public List<RaptureSheetScript> getAllScripts(CallingContext context,  string sheetURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetAllScriptsPayload requestObj = new GetAllScriptsPayload();
	        requestObj.sheetURI = sheetURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETALLSCRIPTS", RaptureSerializer.SerializeJson<GetAllScriptsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureSheetScript>>(resp.response.content);
	            }
	             throw new Exception("Error in getAllScripts, no response returned");
	        }
	   
	    public void removeScript(CallingContext context,  string sheetURI,  string scriptName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RemoveScriptPayload requestObj = new RemoveScriptPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.scriptName = scriptName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REMOVESCRIPT", RaptureSerializer.SerializeJson<RemoveScriptPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in removeScript, no response returned");
	        }
	   
	    public RaptureSheetScript createScript(CallingContext context,  string sheetURI,  string scriptName,  RaptureSheetScript script)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateScriptPayload requestObj = new CreateScriptPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.scriptName = scriptName;
	        requestObj.script = script;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATESCRIPT", RaptureSerializer.SerializeJson<CreateScriptPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureSheetScript>(resp.response.content);
	            }
	             throw new Exception("Error in createScript, no response returned");
	        }
	   
	    public void runScriptOnSheet(CallingContext context,  string sheetURI,  string scriptName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RunScriptOnSheetPayload requestObj = new RunScriptOnSheetPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.scriptName = scriptName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RUNSCRIPTONSHEET", RaptureSerializer.SerializeJson<RunScriptOnSheetPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in runScriptOnSheet, no response returned");
	        }
	   
	    public RaptureSheetScript getSheetScript(CallingContext context,  string sheetURI,  string scriptName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetSheetScriptPayload requestObj = new GetSheetScriptPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.scriptName = scriptName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSHEETSCRIPT", RaptureSerializer.SerializeJson<GetSheetScriptPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureSheetScript>(resp.response.content);
	            }
	             throw new Exception("Error in getSheetScript, no response returned");
	        }
	   
	    public string exportSheetAsScript(CallingContext context,  string sheetURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ExportSheetAsScriptPayload requestObj = new ExportSheetAsScriptPayload();
	        requestObj.sheetURI = sheetURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("EXPORTSHEETASSCRIPT", RaptureSerializer.SerializeJson<ExportSheetAsScriptPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in exportSheetAsScript, no response returned");
	        }
	   
	    public List<RaptureSheetRange> getSheetNamedSelections(CallingContext context,  string sheetURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetSheetNamedSelectionsPayload requestObj = new GetSheetNamedSelectionsPayload();
	        requestObj.sheetURI = sheetURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSHEETNAMEDSELECTIONS", RaptureSerializer.SerializeJson<GetSheetNamedSelectionsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureSheetRange>>(resp.response.content);
	            }
	             throw new Exception("Error in getSheetNamedSelections, no response returned");
	        }
	   
	    public void deleteSheetNamedSelection(CallingContext context,  string sheetURI,  string rangeName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteSheetNamedSelectionPayload requestObj = new DeleteSheetNamedSelectionPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.rangeName = rangeName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETESHEETNAMEDSELECTION", RaptureSerializer.SerializeJson<DeleteSheetNamedSelectionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteSheetNamedSelection, no response returned");
	        }
	   
	    public RaptureSheetRange createSheetNamedSelection(CallingContext context,  string sheetURI,  string rangeName,  RaptureSheetRange range)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateSheetNamedSelectionPayload requestObj = new CreateSheetNamedSelectionPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.rangeName = rangeName;
	        requestObj.range = range;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATESHEETNAMEDSELECTION", RaptureSerializer.SerializeJson<CreateSheetNamedSelectionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureSheetRange>(resp.response.content);
	            }
	             throw new Exception("Error in createSheetNamedSelection, no response returned");
	        }
	   
	    public List<RaptureSheetNote> getSheetNotes(CallingContext context,  string sheetURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetSheetNotesPayload requestObj = new GetSheetNotesPayload();
	        requestObj.sheetURI = sheetURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSHEETNOTES", RaptureSerializer.SerializeJson<GetSheetNotesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureSheetNote>>(resp.response.content);
	            }
	             throw new Exception("Error in getSheetNotes, no response returned");
	        }
	   
	    public void deleteSheetNote(CallingContext context,  string sheetURI,  string noteId)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteSheetNotePayload requestObj = new DeleteSheetNotePayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.noteId = noteId;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETESHEETNOTE", RaptureSerializer.SerializeJson<DeleteSheetNotePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteSheetNote, no response returned");
	        }
	   
	    public RaptureSheetNote createSheetNote(CallingContext context,  string sheetURI,  RaptureSheetNote note)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateSheetNotePayload requestObj = new CreateSheetNotePayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.note = note;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATESHEETNOTE", RaptureSerializer.SerializeJson<CreateSheetNotePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureSheetNote>(resp.response.content);
	            }
	             throw new Exception("Error in createSheetNote, no response returned");
	        }
	   
	    public void cloneSheet(CallingContext context,  string sheetURI,  string newSheetURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CloneSheetPayload requestObj = new CloneSheetPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.newSheetURI = newSheetURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CLONESHEET", RaptureSerializer.SerializeJson<CloneSheetPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in cloneSheet, no response returned");
	        }
	   
	    public List<RaptureSheetRow> getSheetNamedSelection(CallingContext context,  string sheetURI,  string rangeName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetSheetNamedSelectionPayload requestObj = new GetSheetNamedSelectionPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.rangeName = rangeName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSHEETNAMEDSELECTION", RaptureSerializer.SerializeJson<GetSheetNamedSelectionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureSheetRow>>(resp.response.content);
	            }
	             throw new Exception("Error in getSheetNamedSelection, no response returned");
	        }
	   
	    public void deleteSheetColumn(CallingContext context,  string sheetURI,  int column)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteSheetColumnPayload requestObj = new DeleteSheetColumnPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.column = column;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETESHEETCOLUMN", RaptureSerializer.SerializeJson<DeleteSheetColumnPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteSheetColumn, no response returned");
	        }
	   
	    public void deleteSheetRow(CallingContext context,  string sheetURI,  int row)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteSheetRowPayload requestObj = new DeleteSheetRowPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.row = row;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETESHEETROW", RaptureSerializer.SerializeJson<DeleteSheetRowPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteSheetRow, no response returned");
	        }
	   
	    public void deleteSheetCell(CallingContext context,  string sheetURI,  int row,  int column,  int tabId)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteSheetCellPayload requestObj = new DeleteSheetCellPayload();
	        requestObj.sheetURI = sheetURI;
	        requestObj.row = row;
	        requestObj.column = column;
	        requestObj.tabId = tabId;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETESHEETCELL", RaptureSerializer.SerializeJson<DeleteSheetCellPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteSheetCell, no response returned");
	        }
	
	       public void createSheetRepo(string sheetURI, string config) {
	            return createSheetRepo(null,sheetURI,config);
	       }

	       public SheetRepoConfig getSheetRepoConfig(string sheetURI) {
	            return getSheetRepoConfig(null,sheetURI);
	       }

	       public List<SheetRepoConfig> getSheetRepoConfigs() {
	            return getSheetRepoConfigs(null);
	       }

	       public RaptureSheet createSheet(string sheetURI) {
	            return createSheet(null,sheetURI);
	       }

	       public RaptureSheet deleteSheet(string sheetURI) {
	            return deleteSheet(null,sheetURI);
	       }

	       public bool sheetExists(string sheetURI) {
	            return sheetExists(null,sheetURI);
	       }

	       public void deleteSheetRepo(string repoURI) {
	            return deleteSheetRepo(null,repoURI);
	       }

	       public bool sheetRepoExists(string repoURI) {
	            return sheetRepoExists(null,repoURI);
	       }

	       public Dictionary<string, RaptureFolderInfo> listSheetsByUriPrefix(string uriPrefix, int depth) {
	            return listSheetsByUriPrefix(null,uriPrefix,depth);
	       }

	       public List<string> deleteSheetsByUriPrefix(string uriPrefix) {
	            return deleteSheetsByUriPrefix(null,uriPrefix);
	       }

	       public string setSheetCell(string sheetURI, int row, int column, string value, int tabId) {
	            return setSheetCell(null,sheetURI,row,column,value,tabId);
	       }

	       public void setBlock(string sheetURI, int startRow, int startColumn, List<string> values, int height, int width, int tabId) {
	            return setBlock(null,sheetURI,startRow,startColumn,values,height,width,tabId);
	       }

	       public string getSheetCell(string sheetURI, int row, int column, int tabId) {
	            return getSheetCell(null,sheetURI,row,column,tabId);
	       }

	       public List<RaptureSheetCell> findCellsByEpoch(string sheetURI, int tabId, long epoch) {
	            return findCellsByEpoch(null,sheetURI,tabId,epoch);
	       }

	       public SheetAndMeta getSheetAndMeta(string sheetURI) {
	            return getSheetAndMeta(null,sheetURI);
	       }

	       public void exportSheetAsPdf(string sheetURI, string blobURI) {
	            return exportSheetAsPdf(null,sheetURI,blobURI);
	       }

	       public List<RaptureSheetStyle> getAllStyles(string sheetURI) {
	            return getAllStyles(null,sheetURI);
	       }

	       public void removeStyle(string sheetURI, string styleName) {
	            return removeStyle(null,sheetURI,styleName);
	       }

	       public RaptureSheetStyle createStyle(string sheetURI, RaptureSheetStyle style) {
	            return createStyle(null,sheetURI,style);
	       }

	       public List<RaptureSheetScript> getAllScripts(string sheetURI) {
	            return getAllScripts(null,sheetURI);
	       }

	       public void removeScript(string sheetURI, string scriptName) {
	            return removeScript(null,sheetURI,scriptName);
	       }

	       public RaptureSheetScript createScript(string sheetURI, string scriptName, RaptureSheetScript script) {
	            return createScript(null,sheetURI,scriptName,script);
	       }

	       public void runScriptOnSheet(string sheetURI, string scriptName) {
	            return runScriptOnSheet(null,sheetURI,scriptName);
	       }

	       public RaptureSheetScript getSheetScript(string sheetURI, string scriptName) {
	            return getSheetScript(null,sheetURI,scriptName);
	       }

	       public string exportSheetAsScript(string sheetURI) {
	            return exportSheetAsScript(null,sheetURI);
	       }

	       public List<RaptureSheetRange> getSheetNamedSelections(string sheetURI) {
	            return getSheetNamedSelections(null,sheetURI);
	       }

	       public void deleteSheetNamedSelection(string sheetURI, string rangeName) {
	            return deleteSheetNamedSelection(null,sheetURI,rangeName);
	       }

	       public RaptureSheetRange createSheetNamedSelection(string sheetURI, string rangeName, RaptureSheetRange range) {
	            return createSheetNamedSelection(null,sheetURI,rangeName,range);
	       }

	       public List<RaptureSheetNote> getSheetNotes(string sheetURI) {
	            return getSheetNotes(null,sheetURI);
	       }

	       public void deleteSheetNote(string sheetURI, string noteId) {
	            return deleteSheetNote(null,sheetURI,noteId);
	       }

	       public RaptureSheetNote createSheetNote(string sheetURI, RaptureSheetNote note) {
	            return createSheetNote(null,sheetURI,note);
	       }

	       public void cloneSheet(string sheetURI, string newSheetURI) {
	            return cloneSheet(null,sheetURI,newSheetURI);
	       }

	       public List<RaptureSheetRow> getSheetNamedSelection(string sheetURI, string rangeName) {
	            return getSheetNamedSelection(null,sheetURI,rangeName);
	       }

	       public void deleteSheetColumn(string sheetURI, int column) {
	            return deleteSheetColumn(null,sheetURI,column);
	       }

	       public void deleteSheetRow(string sheetURI, int row) {
	            return deleteSheetRow(null,sheetURI,row);
	       }

	       public void deleteSheetCell(string sheetURI, int row, int column, int tabId) {
	            return deleteSheetCell(null,sheetURI,row,column,tabId);
	       }

}
}


