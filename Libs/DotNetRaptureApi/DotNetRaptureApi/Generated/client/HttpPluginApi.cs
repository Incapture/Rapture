/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.plugin
{

public class HttpPluginApi : BaseHttpApi , PluginApi, ScriptPluginApi {
	public HttpPluginApi(HttpLoginApi login) : base(login, "plugin") {
	
	}
		
	   
	    public List<PluginConfig> getInstalledPlugins(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetInstalledPluginsPayload requestObj = new GetInstalledPluginsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETINSTALLEDPLUGINS", RaptureSerializer.SerializeJson<GetInstalledPluginsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<PluginConfig>>(resp.response.content);
	            }
	             throw new Exception("Error in getInstalledPlugins, no response returned");
	        }
	   
	    public PluginManifest getPluginManifest(CallingContext context,  string manifestUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetPluginManifestPayload requestObj = new GetPluginManifestPayload();
	        requestObj.manifestUri = manifestUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETPLUGINMANIFEST", RaptureSerializer.SerializeJson<GetPluginManifestPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<PluginManifest>(resp.response.content);
	            }
	             throw new Exception("Error in getPluginManifest, no response returned");
	        }
	   
	    public void recordPlugin(CallingContext context,  PluginConfig plugin)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RecordPluginPayload requestObj = new RecordPluginPayload();
	        requestObj.plugin = plugin;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RECORDPLUGIN", RaptureSerializer.SerializeJson<RecordPluginPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in recordPlugin, no response returned");
	        }
	   
	    public void installPlugin(CallingContext context,  PluginManifest manifest,  Dictionary<string, PluginTransportItem> payload)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            InstallPluginPayload requestObj = new InstallPluginPayload();
	        requestObj.manifest = manifest;
	        requestObj.payload = payload;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("INSTALLPLUGIN", RaptureSerializer.SerializeJson<InstallPluginPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in installPlugin, no response returned");
	        }
	   
	    public void installPluginItem(CallingContext context,  string pluginName,  PluginTransportItem item)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            InstallPluginItemPayload requestObj = new InstallPluginItemPayload();
	        requestObj.pluginName = pluginName;
	        requestObj.item = item;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("INSTALLPLUGINITEM", RaptureSerializer.SerializeJson<InstallPluginItemPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in installPluginItem, no response returned");
	        }
	   
	    public void uninstallPlugin(CallingContext context,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            UninstallPluginPayload requestObj = new UninstallPluginPayload();
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("UNINSTALLPLUGIN", RaptureSerializer.SerializeJson<UninstallPluginPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in uninstallPlugin, no response returned");
	        }
	   
	    public void uninstallPluginItem(CallingContext context,  PluginTransportItem item)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            UninstallPluginItemPayload requestObj = new UninstallPluginItemPayload();
	        requestObj.item = item;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("UNINSTALLPLUGINITEM", RaptureSerializer.SerializeJson<UninstallPluginItemPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in uninstallPluginItem, no response returned");
	        }
	   
	    public void deletePluginManifest(CallingContext context,  string manifestUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeletePluginManifestPayload requestObj = new DeletePluginManifestPayload();
	        requestObj.manifestUri = manifestUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEPLUGINMANIFEST", RaptureSerializer.SerializeJson<DeletePluginManifestPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deletePluginManifest, no response returned");
	        }
	   
	    public PluginTransportItem getPluginItem(CallingContext context,  string uri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetPluginItemPayload requestObj = new GetPluginItemPayload();
	        requestObj.uri = uri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETPLUGINITEM", RaptureSerializer.SerializeJson<GetPluginItemPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<PluginTransportItem>(resp.response.content);
	            }
	             throw new Exception("Error in getPluginItem, no response returned");
	        }
	   
	    public Dictionary<string, string> verifyPlugin(CallingContext context,  string plugin)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            VerifyPluginPayload requestObj = new VerifyPluginPayload();
	        requestObj.plugin = plugin;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("VERIFYPLUGIN", RaptureSerializer.SerializeJson<VerifyPluginPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, string>>(resp.response.content);
	            }
	             throw new Exception("Error in verifyPlugin, no response returned");
	        }
	   
	    public void createManifest(CallingContext context,  string pluginName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateManifestPayload requestObj = new CreateManifestPayload();
	        requestObj.pluginName = pluginName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEMANIFEST", RaptureSerializer.SerializeJson<CreateManifestPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in createManifest, no response returned");
	        }
	   
	    public void addManifestItem(CallingContext context,  string pluginName,  string uri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddManifestItemPayload requestObj = new AddManifestItemPayload();
	        requestObj.pluginName = pluginName;
	        requestObj.uri = uri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDMANIFESTITEM", RaptureSerializer.SerializeJson<AddManifestItemPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addManifestItem, no response returned");
	        }
	   
	    public void addManifestDataFolder(CallingContext context,  string pluginName,  string uri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddManifestDataFolderPayload requestObj = new AddManifestDataFolderPayload();
	        requestObj.pluginName = pluginName;
	        requestObj.uri = uri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDMANIFESTDATAFOLDER", RaptureSerializer.SerializeJson<AddManifestDataFolderPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addManifestDataFolder, no response returned");
	        }
	   
	    public void removeManifestDataFolder(CallingContext context,  string pluginName,  string uri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RemoveManifestDataFolderPayload requestObj = new RemoveManifestDataFolderPayload();
	        requestObj.pluginName = pluginName;
	        requestObj.uri = uri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REMOVEMANIFESTDATAFOLDER", RaptureSerializer.SerializeJson<RemoveManifestDataFolderPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in removeManifestDataFolder, no response returned");
	        }
	   
	    public void setManifestVersion(CallingContext context,  string pluginName,  string version)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetManifestVersionPayload requestObj = new SetManifestVersionPayload();
	        requestObj.pluginName = pluginName;
	        requestObj.version = version;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETMANIFESTVERSION", RaptureSerializer.SerializeJson<SetManifestVersionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setManifestVersion, no response returned");
	        }
	   
	    public void removeItemFromManifest(CallingContext context,  string pluginName,  string uri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RemoveItemFromManifestPayload requestObj = new RemoveItemFromManifestPayload();
	        requestObj.pluginName = pluginName;
	        requestObj.uri = uri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REMOVEITEMFROMMANIFEST", RaptureSerializer.SerializeJson<RemoveItemFromManifestPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in removeItemFromManifest, no response returned");
	        }
	   
	    public string exportPlugin(CallingContext context,  string pluginName,  string path)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ExportPluginPayload requestObj = new ExportPluginPayload();
	        requestObj.pluginName = pluginName;
	        requestObj.path = path;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("EXPORTPLUGIN", RaptureSerializer.SerializeJson<ExportPluginPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in exportPlugin, no response returned");
	        }
	
	       public List<PluginConfig> getInstalledPlugins() {
	            return getInstalledPlugins(null);
	       }

	       public PluginManifest getPluginManifest(string manifestUri) {
	            return getPluginManifest(null,manifestUri);
	       }

	       public void recordPlugin(PluginConfig plugin) {
	            return recordPlugin(null,plugin);
	       }

	       public void installPlugin(PluginManifest manifest, Dictionary<string, PluginTransportItem> payload) {
	            return installPlugin(null,manifest,payload);
	       }

	       public void installPluginItem(string pluginName, PluginTransportItem item) {
	            return installPluginItem(null,pluginName,item);
	       }

	       public void uninstallPlugin(string name) {
	            return uninstallPlugin(null,name);
	       }

	       public void uninstallPluginItem(PluginTransportItem item) {
	            return uninstallPluginItem(null,item);
	       }

	       public void deletePluginManifest(string manifestUri) {
	            return deletePluginManifest(null,manifestUri);
	       }

	       public PluginTransportItem getPluginItem(string uri) {
	            return getPluginItem(null,uri);
	       }

	       public Dictionary<string, string> verifyPlugin(string plugin) {
	            return verifyPlugin(null,plugin);
	       }

	       public void createManifest(string pluginName) {
	            return createManifest(null,pluginName);
	       }

	       public void addManifestItem(string pluginName, string uri) {
	            return addManifestItem(null,pluginName,uri);
	       }

	       public void addManifestDataFolder(string pluginName, string uri) {
	            return addManifestDataFolder(null,pluginName,uri);
	       }

	       public void removeManifestDataFolder(string pluginName, string uri) {
	            return removeManifestDataFolder(null,pluginName,uri);
	       }

	       public void setManifestVersion(string pluginName, string version) {
	            return setManifestVersion(null,pluginName,version);
	       }

	       public void removeItemFromManifest(string pluginName, string uri) {
	            return removeItemFromManifest(null,pluginName,uri);
	       }

	       public string exportPlugin(string pluginName, string path) {
	            return exportPlugin(null,pluginName,path);
	       }

}
}


