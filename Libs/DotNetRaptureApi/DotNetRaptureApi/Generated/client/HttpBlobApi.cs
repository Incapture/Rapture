/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.blob
{

public class HttpBlobApi : BaseHttpApi , BlobApi, ScriptBlobApi {
	public HttpBlobApi(HttpLoginApi login) : base(login, "blob") {
	
	}
		
	   
	    public void createBlobRepo(CallingContext context,  string blobRepoUri,  string config,  string metaConfig)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateBlobRepoPayload requestObj = new CreateBlobRepoPayload();
	        requestObj.blobRepoUri = blobRepoUri;
	        requestObj.config = config;
	        requestObj.metaConfig = metaConfig;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEBLOBREPO", RaptureSerializer.SerializeJson<CreateBlobRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in createBlobRepo, no response returned");
	        }
	   
	    public BlobRepoConfig getBlobRepoConfig(CallingContext context,  string blobRepoUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetBlobRepoConfigPayload requestObj = new GetBlobRepoConfigPayload();
	        requestObj.blobRepoUri = blobRepoUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETBLOBREPOCONFIG", RaptureSerializer.SerializeJson<GetBlobRepoConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<BlobRepoConfig>(resp.response.content);
	            }
	             throw new Exception("Error in getBlobRepoConfig, no response returned");
	        }
	   
	    public List<BlobRepoConfig> getBlobRepoConfigs(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetBlobRepoConfigsPayload requestObj = new GetBlobRepoConfigsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETBLOBREPOCONFIGS", RaptureSerializer.SerializeJson<GetBlobRepoConfigsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<BlobRepoConfig>>(resp.response.content);
	            }
	             throw new Exception("Error in getBlobRepoConfigs, no response returned");
	        }
	   
	    public void deleteBlobRepo(CallingContext context,  string repoUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteBlobRepoPayload requestObj = new DeleteBlobRepoPayload();
	        requestObj.repoUri = repoUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEBLOBREPO", RaptureSerializer.SerializeJson<DeleteBlobRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteBlobRepo, no response returned");
	        }
	   
	    public bool blobRepoExists(CallingContext context,  string repoUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            BlobRepoExistsPayload requestObj = new BlobRepoExistsPayload();
	        requestObj.repoUri = repoUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("BLOBREPOEXISTS", RaptureSerializer.SerializeJson<BlobRepoExistsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in blobRepoExists, no response returned");
	        }
	   
	    public bool blobExists(CallingContext context,  string blobUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            BlobExistsPayload requestObj = new BlobExistsPayload();
	        requestObj.blobUri = blobUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("BLOBEXISTS", RaptureSerializer.SerializeJson<BlobExistsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in blobExists, no response returned");
	        }
	   
	    public void addBlobContent(CallingContext context,  string blobUri,  byte[] content)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddBlobContentPayload requestObj = new AddBlobContentPayload();
	        requestObj.blobUri = blobUri;
	        requestObj.content = content;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDBLOBCONTENT", RaptureSerializer.SerializeJson<AddBlobContentPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addBlobContent, no response returned");
	        }
	   
	    public void putBlob(CallingContext context,  string blobUri,  byte[] content,  string contentType)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PutBlobPayload requestObj = new PutBlobPayload();
	        requestObj.blobUri = blobUri;
	        requestObj.content = content;
	        requestObj.contentType = contentType;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUTBLOB", RaptureSerializer.SerializeJson<PutBlobPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in putBlob, no response returned");
	        }
	   
	    public BlobContainer getBlob(CallingContext context,  string blobUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetBlobPayload requestObj = new GetBlobPayload();
	        requestObj.blobUri = blobUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETBLOB", RaptureSerializer.SerializeJson<GetBlobPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<BlobContainer>(resp.response.content);
	            }
	             throw new Exception("Error in getBlob, no response returned");
	        }
	   
	    public void deleteBlob(CallingContext context,  string blobUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteBlobPayload requestObj = new DeleteBlobPayload();
	        requestObj.blobUri = blobUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEBLOB", RaptureSerializer.SerializeJson<DeleteBlobPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteBlob, no response returned");
	        }
	   
	    public long getBlobSize(CallingContext context,  string blobUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetBlobSizePayload requestObj = new GetBlobSizePayload();
	        requestObj.blobUri = blobUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETBLOBSIZE", RaptureSerializer.SerializeJson<GetBlobSizePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<long>(resp.response.content);
	            }
	             throw new Exception("Error in getBlobSize, no response returned");
	        }
	   
	    public Dictionary<string, string> getBlobMetaData(CallingContext context,  string blobUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetBlobMetaDataPayload requestObj = new GetBlobMetaDataPayload();
	        requestObj.blobUri = blobUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETBLOBMETADATA", RaptureSerializer.SerializeJson<GetBlobMetaDataPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, string>>(resp.response.content);
	            }
	             throw new Exception("Error in getBlobMetaData, no response returned");
	        }
	   
	    public Dictionary<string, RaptureFolderInfo> listBlobsByUriPrefix(CallingContext context,  string uriPrefix,  int depth)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ListBlobsByUriPrefixPayload requestObj = new ListBlobsByUriPrefixPayload();
	        requestObj.uriPrefix = uriPrefix;
	        requestObj.depth = depth;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("LISTBLOBSBYURIPREFIX", RaptureSerializer.SerializeJson<ListBlobsByUriPrefixPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, RaptureFolderInfo>>(resp.response.content);
	            }
	             throw new Exception("Error in listBlobsByUriPrefix, no response returned");
	        }
	   
	    public List<string> deleteBlobsByUriPrefix(CallingContext context,  string uriPrefix)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteBlobsByUriPrefixPayload requestObj = new DeleteBlobsByUriPrefixPayload();
	        requestObj.uriPrefix = uriPrefix;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEBLOBSBYURIPREFIX", RaptureSerializer.SerializeJson<DeleteBlobsByUriPrefixPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in deleteBlobsByUriPrefix, no response returned");
	        }
	
	       public void createBlobRepo(string blobRepoUri, string config, string metaConfig) {
	            return createBlobRepo(null,blobRepoUri,config,metaConfig);
	       }

	       public BlobRepoConfig getBlobRepoConfig(string blobRepoUri) {
	            return getBlobRepoConfig(null,blobRepoUri);
	       }

	       public List<BlobRepoConfig> getBlobRepoConfigs() {
	            return getBlobRepoConfigs(null);
	       }

	       public void deleteBlobRepo(string repoUri) {
	            return deleteBlobRepo(null,repoUri);
	       }

	       public bool blobRepoExists(string repoUri) {
	            return blobRepoExists(null,repoUri);
	       }

	       public bool blobExists(string blobUri) {
	            return blobExists(null,blobUri);
	       }

	       public void addBlobContent(string blobUri, byte[] content) {
	            return addBlobContent(null,blobUri,content);
	       }

	       public void putBlob(string blobUri, byte[] content, string contentType) {
	            return putBlob(null,blobUri,content,contentType);
	       }

	       public BlobContainer getBlob(string blobUri) {
	            return getBlob(null,blobUri);
	       }

	       public void deleteBlob(string blobUri) {
	            return deleteBlob(null,blobUri);
	       }

	       public long getBlobSize(string blobUri) {
	            return getBlobSize(null,blobUri);
	       }

	       public Dictionary<string, string> getBlobMetaData(string blobUri) {
	            return getBlobMetaData(null,blobUri);
	       }

	       public Dictionary<string, RaptureFolderInfo> listBlobsByUriPrefix(string uriPrefix, int depth) {
	            return listBlobsByUriPrefix(null,uriPrefix,depth);
	       }

	       public List<string> deleteBlobsByUriPrefix(string uriPrefix) {
	            return deleteBlobsByUriPrefix(null,uriPrefix);
	       }

}
}


