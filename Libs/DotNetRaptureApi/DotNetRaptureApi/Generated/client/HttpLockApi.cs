/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.rlock
{

public class HttpRlockApi : BaseHttpApi , RlockApi, ScriptRlockApi {
	public HttpRlockApi(HttpLoginApi login) : base(login, "rlock") {
	
	}
		
	   
	    public List<RaptureLockConfig> getLockManagerConfigs(CallingContext context,  string managerUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetLockManagerConfigsPayload requestObj = new GetLockManagerConfigsPayload();
	        requestObj.managerUri = managerUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETLOCKMANAGERCONFIGS", RaptureSerializer.SerializeJson<GetLockManagerConfigsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureLockConfig>>(resp.response.content);
	            }
	             throw new Exception("Error in getLockManagerConfigs, no response returned");
	        }
	   
	    public RaptureLockConfig createLockManager(CallingContext context,  string managerUri,  string config,  string pathPosition)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateLockManagerPayload requestObj = new CreateLockManagerPayload();
	        requestObj.managerUri = managerUri;
	        requestObj.config = config;
	        requestObj.pathPosition = pathPosition;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATELOCKMANAGER", RaptureSerializer.SerializeJson<CreateLockManagerPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureLockConfig>(resp.response.content);
	            }
	             throw new Exception("Error in createLockManager, no response returned");
	        }
	   
	    public bool lockManagerExists(CallingContext context,  string managerUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            LockManagerExistsPayload requestObj = new LockManagerExistsPayload();
	        requestObj.managerUri = managerUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("LOCKMANAGEREXISTS", RaptureSerializer.SerializeJson<LockManagerExistsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in lockManagerExists, no response returned");
	        }
	   
	    public RaptureLockConfig getLockManagerConfig(CallingContext context,  string managerUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetLockManagerConfigPayload requestObj = new GetLockManagerConfigPayload();
	        requestObj.managerUri = managerUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETLOCKMANAGERCONFIG", RaptureSerializer.SerializeJson<GetLockManagerConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureLockConfig>(resp.response.content);
	            }
	             throw new Exception("Error in getLockManagerConfig, no response returned");
	        }
	   
	    public void deleteLockManager(CallingContext context,  string managerUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteLockManagerPayload requestObj = new DeleteLockManagerPayload();
	        requestObj.managerUri = managerUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETELOCKMANAGER", RaptureSerializer.SerializeJson<DeleteLockManagerPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteLockManager, no response returned");
	        }
	   
	    public LockHandle acquireLock(CallingContext context,  string managerUri,  string lockName,  long secondsToWait,  long secondsToKeep)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AcquireLockPayload requestObj = new AcquireLockPayload();
	        requestObj.managerUri = managerUri;
	        requestObj.lockName = lockName;
	        requestObj.secondsToWait = secondsToWait;
	        requestObj.secondsToKeep = secondsToKeep;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ACQUIRELOCK", RaptureSerializer.SerializeJson<AcquireLockPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<LockHandle>(resp.response.content);
	            }
	             throw new Exception("Error in acquireLock, no response returned");
	        }
	   
	    public bool releaseLock(CallingContext context,  string managerUri,  string lockName,  LockHandle lockHandle)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ReleaseLockPayload requestObj = new ReleaseLockPayload();
	        requestObj.managerUri = managerUri;
	        requestObj.lockName = lockName;
	        requestObj.lockHandle = lockHandle;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RELEASELOCK", RaptureSerializer.SerializeJson<ReleaseLockPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in releaseLock, no response returned");
	        }
	   
	    public void forceReleaseLock(CallingContext context,  string managerUri,  string lockName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ForceReleaseLockPayload requestObj = new ForceReleaseLockPayload();
	        requestObj.managerUri = managerUri;
	        requestObj.lockName = lockName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("FORCERELEASELOCK", RaptureSerializer.SerializeJson<ForceReleaseLockPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in forceReleaseLock, no response returned");
	        }
	
	       public List<RaptureLockConfig> getLockManagerConfigs(string managerUri) {
	            return getLockManagerConfigs(null,managerUri);
	       }

	       public RaptureLockConfig createLockManager(string managerUri, string config, string pathPosition) {
	            return createLockManager(null,managerUri,config,pathPosition);
	       }

	       public bool lockManagerExists(string managerUri) {
	            return lockManagerExists(null,managerUri);
	       }

	       public RaptureLockConfig getLockManagerConfig(string managerUri) {
	            return getLockManagerConfig(null,managerUri);
	       }

	       public void deleteLockManager(string managerUri) {
	            return deleteLockManager(null,managerUri);
	       }

	       public LockHandle acquireLock(string managerUri, string lockName, long secondsToWait, long secondsToKeep) {
	            return acquireLock(null,managerUri,lockName,secondsToWait,secondsToKeep);
	       }

	       public bool releaseLock(string managerUri, string lockName, LockHandle lockHandle) {
	            return releaseLock(null,managerUri,lockName,lockHandle);
	       }

	       public void forceReleaseLock(string managerUri, string lockName) {
	            return forceReleaseLock(null,managerUri,lockName);
	       }

}
}


