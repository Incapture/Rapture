/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.decision
{

public class HttpDecisionApi : BaseHttpApi , DecisionApi, ScriptDecisionApi {
	public HttpDecisionApi(HttpLoginApi login) : base(login, "decision") {
	
	}
		
	   
	    public List<Workflow> getAllWorkflows(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetAllWorkflowsPayload requestObj = new GetAllWorkflowsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETALLWORKFLOWS", RaptureSerializer.SerializeJson<GetAllWorkflowsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<Workflow>>(resp.response.content);
	            }
	             throw new Exception("Error in getAllWorkflows, no response returned");
	        }
	   
	    public List<RaptureFolderInfo> getWorkflowChildren(CallingContext context,  string workflowURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetWorkflowChildrenPayload requestObj = new GetWorkflowChildrenPayload();
	        requestObj.workflowURI = workflowURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETWORKFLOWCHILDREN", RaptureSerializer.SerializeJson<GetWorkflowChildrenPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureFolderInfo>>(resp.response.content);
	            }
	             throw new Exception("Error in getWorkflowChildren, no response returned");
	        }
	   
	    public List<RaptureFolderInfo> getWorkOrderChildren(CallingContext context,  string parentPath)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetWorkOrderChildrenPayload requestObj = new GetWorkOrderChildrenPayload();
	        requestObj.parentPath = parentPath;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETWORKORDERCHILDREN", RaptureSerializer.SerializeJson<GetWorkOrderChildrenPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureFolderInfo>>(resp.response.content);
	            }
	             throw new Exception("Error in getWorkOrderChildren, no response returned");
	        }
	   
	    public void putWorkflow(CallingContext context,  Workflow workflow)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PutWorkflowPayload requestObj = new PutWorkflowPayload();
	        requestObj.workflow = workflow;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUTWORKFLOW", RaptureSerializer.SerializeJson<PutWorkflowPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in putWorkflow, no response returned");
	        }
	   
	    public Workflow getWorkflow(CallingContext context,  string workflowURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetWorkflowPayload requestObj = new GetWorkflowPayload();
	        requestObj.workflowURI = workflowURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETWORKFLOW", RaptureSerializer.SerializeJson<GetWorkflowPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Workflow>(resp.response.content);
	            }
	             throw new Exception("Error in getWorkflow, no response returned");
	        }
	   
	    public Step getWorkflowStep(CallingContext context,  string stepURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetWorkflowStepPayload requestObj = new GetWorkflowStepPayload();
	        requestObj.stepURI = stepURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETWORKFLOWSTEP", RaptureSerializer.SerializeJson<GetWorkflowStepPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Step>(resp.response.content);
	            }
	             throw new Exception("Error in getWorkflowStep, no response returned");
	        }
	   
	    public string getStepCategory(CallingContext context,  string stepURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetStepCategoryPayload requestObj = new GetStepCategoryPayload();
	        requestObj.stepURI = stepURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSTEPCATEGORY", RaptureSerializer.SerializeJson<GetStepCategoryPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in getStepCategory, no response returned");
	        }
	   
	    public void addStep(CallingContext context,  string workflowURI,  Step step)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddStepPayload requestObj = new AddStepPayload();
	        requestObj.workflowURI = workflowURI;
	        requestObj.step = step;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDSTEP", RaptureSerializer.SerializeJson<AddStepPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addStep, no response returned");
	        }
	   
	    public void removeStep(CallingContext context,  string workflowURI,  string stepName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RemoveStepPayload requestObj = new RemoveStepPayload();
	        requestObj.workflowURI = workflowURI;
	        requestObj.stepName = stepName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REMOVESTEP", RaptureSerializer.SerializeJson<RemoveStepPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in removeStep, no response returned");
	        }
	   
	    public void addTransition(CallingContext context,  string workflowURI,  string stepName,  Transition transition)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddTransitionPayload requestObj = new AddTransitionPayload();
	        requestObj.workflowURI = workflowURI;
	        requestObj.stepName = stepName;
	        requestObj.transition = transition;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDTRANSITION", RaptureSerializer.SerializeJson<AddTransitionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addTransition, no response returned");
	        }
	   
	    public void removeTransition(CallingContext context,  string workflowURI,  string stepName,  string transitionName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RemoveTransitionPayload requestObj = new RemoveTransitionPayload();
	        requestObj.workflowURI = workflowURI;
	        requestObj.stepName = stepName;
	        requestObj.transitionName = transitionName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REMOVETRANSITION", RaptureSerializer.SerializeJson<RemoveTransitionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in removeTransition, no response returned");
	        }
	   
	    public void deleteWorkflow(CallingContext context,  string workflowURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteWorkflowPayload requestObj = new DeleteWorkflowPayload();
	        requestObj.workflowURI = workflowURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEWORKFLOW", RaptureSerializer.SerializeJson<DeleteWorkflowPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteWorkflow, no response returned");
	        }
	   
	    public void putWorkflowStepTemplate(CallingContext context,  WorkflowStepTemplate template)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PutWorkflowStepTemplatePayload requestObj = new PutWorkflowStepTemplatePayload();
	        requestObj.template = template;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUTWORKFLOWSTEPTEMPLATE", RaptureSerializer.SerializeJson<PutWorkflowStepTemplatePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in putWorkflowStepTemplate, no response returned");
	        }
	   
	    public WorkflowStepTemplate getWorkflowStepTemplate(CallingContext context,  string workflowStepTemplateURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetWorkflowStepTemplatePayload requestObj = new GetWorkflowStepTemplatePayload();
	        requestObj.workflowStepTemplateURI = workflowStepTemplateURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETWORKFLOWSTEPTEMPLATE", RaptureSerializer.SerializeJson<GetWorkflowStepTemplatePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<WorkflowStepTemplate>(resp.response.content);
	            }
	             throw new Exception("Error in getWorkflowStepTemplate, no response returned");
	        }
	   
	    public void deleteWorkflowStepTemplate(CallingContext context,  string workflowStepTemplateURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteWorkflowStepTemplatePayload requestObj = new DeleteWorkflowStepTemplatePayload();
	        requestObj.workflowStepTemplateURI = workflowStepTemplateURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEWORKFLOWSTEPTEMPLATE", RaptureSerializer.SerializeJson<DeleteWorkflowStepTemplatePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteWorkflowStepTemplate, no response returned");
	        }
	   
	    public List<RaptureFolderInfo> getWorflowStepTemplateChildren(CallingContext context,  string parentPath)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetWorflowStepTemplateChildrenPayload requestObj = new GetWorflowStepTemplateChildrenPayload();
	        requestObj.parentPath = parentPath;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETWORFLOWSTEPTEMPLATECHILDREN", RaptureSerializer.SerializeJson<GetWorflowStepTemplateChildrenPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureFolderInfo>>(resp.response.content);
	            }
	             throw new Exception("Error in getWorflowStepTemplateChildren, no response returned");
	        }
	   
	    public string createWorkOrder(CallingContext context,  string workflowURI,  Dictionary<string, string> argsMap)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateWorkOrderPayload requestObj = new CreateWorkOrderPayload();
	        requestObj.workflowURI = workflowURI;
	        requestObj.argsMap = argsMap;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEWORKORDER", RaptureSerializer.SerializeJson<CreateWorkOrderPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in createWorkOrder, no response returned");
	        }
	   
	    public CreateResponse createWorkOrderP(CallingContext context,  string workflowURI,  Dictionary<string, string> argsMap,  string appStatusUriPattern)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateWorkOrderPPayload requestObj = new CreateWorkOrderPPayload();
	        requestObj.workflowURI = workflowURI;
	        requestObj.argsMap = argsMap;
	        requestObj.appStatusUriPattern = appStatusUriPattern;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEWORKORDERP", RaptureSerializer.SerializeJson<CreateWorkOrderPPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<CreateResponse>(resp.response.content);
	            }
	             throw new Exception("Error in createWorkOrderP, no response returned");
	        }
	   
	    public void releaseWorkOrderLock(CallingContext context,  string workOrderURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ReleaseWorkOrderLockPayload requestObj = new ReleaseWorkOrderLockPayload();
	        requestObj.workOrderURI = workOrderURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RELEASEWORKORDERLOCK", RaptureSerializer.SerializeJson<ReleaseWorkOrderLockPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in releaseWorkOrderLock, no response returned");
	        }
	   
	    public WorkOrderStatus getWorkOrderStatus(CallingContext context,  string workOrderURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetWorkOrderStatusPayload requestObj = new GetWorkOrderStatusPayload();
	        requestObj.workOrderURI = workOrderURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETWORKORDERSTATUS", RaptureSerializer.SerializeJson<GetWorkOrderStatusPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<WorkOrderStatus>(resp.response.content);
	            }
	             throw new Exception("Error in getWorkOrderStatus, no response returned");
	        }
	   
	    public void writeWorkflowAuditEntry(CallingContext context,  string workOrderURI,  string message,  bool error)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            WriteWorkflowAuditEntryPayload requestObj = new WriteWorkflowAuditEntryPayload();
	        requestObj.workOrderURI = workOrderURI;
	        requestObj.message = message;
	        requestObj.error = error;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("WRITEWORKFLOWAUDITENTRY", RaptureSerializer.SerializeJson<WriteWorkflowAuditEntryPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in writeWorkflowAuditEntry, no response returned");
	        }
	   
	    public List<WorkOrder> getWorkOrdersByDay(CallingContext context,  long startTimeInstant)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetWorkOrdersByDayPayload requestObj = new GetWorkOrdersByDayPayload();
	        requestObj.startTimeInstant = startTimeInstant;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETWORKORDERSBYDAY", RaptureSerializer.SerializeJson<GetWorkOrdersByDayPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<WorkOrder>>(resp.response.content);
	            }
	             throw new Exception("Error in getWorkOrdersByDay, no response returned");
	        }
	   
	    public WorkOrder getWorkOrder(CallingContext context,  string workOrderURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetWorkOrderPayload requestObj = new GetWorkOrderPayload();
	        requestObj.workOrderURI = workOrderURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETWORKORDER", RaptureSerializer.SerializeJson<GetWorkOrderPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<WorkOrder>(resp.response.content);
	            }
	             throw new Exception("Error in getWorkOrder, no response returned");
	        }
	   
	    public Worker getWorker(CallingContext context,  string workOrderURI,  string workerId)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetWorkerPayload requestObj = new GetWorkerPayload();
	        requestObj.workOrderURI = workOrderURI;
	        requestObj.workerId = workerId;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETWORKER", RaptureSerializer.SerializeJson<GetWorkerPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Worker>(resp.response.content);
	            }
	             throw new Exception("Error in getWorker, no response returned");
	        }
	   
	    public void cancelWorkOrder(CallingContext context,  string workOrderURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CancelWorkOrderPayload requestObj = new CancelWorkOrderPayload();
	        requestObj.workOrderURI = workOrderURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CANCELWORKORDER", RaptureSerializer.SerializeJson<CancelWorkOrderPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in cancelWorkOrder, no response returned");
	        }
	   
	    public CreateResponse resumeWorkOrder(CallingContext context,  string workOrderURI,  string resumeStepURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ResumeWorkOrderPayload requestObj = new ResumeWorkOrderPayload();
	        requestObj.workOrderURI = workOrderURI;
	        requestObj.resumeStepURI = resumeStepURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RESUMEWORKORDER", RaptureSerializer.SerializeJson<ResumeWorkOrderPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<CreateResponse>(resp.response.content);
	            }
	             throw new Exception("Error in resumeWorkOrder, no response returned");
	        }
	   
	    public bool wasCancelCalled(CallingContext context,  string workOrderURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            WasCancelCalledPayload requestObj = new WasCancelCalledPayload();
	        requestObj.workOrderURI = workOrderURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("WASCANCELCALLED", RaptureSerializer.SerializeJson<WasCancelCalledPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in wasCancelCalled, no response returned");
	        }
	   
	    public WorkOrderCancellation getCancellationDetails(CallingContext context,  string workOrderURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetCancellationDetailsPayload requestObj = new GetCancellationDetailsPayload();
	        requestObj.workOrderURI = workOrderURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETCANCELLATIONDETAILS", RaptureSerializer.SerializeJson<GetCancellationDetailsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<WorkOrderCancellation>(resp.response.content);
	            }
	             throw new Exception("Error in getCancellationDetails, no response returned");
	        }
	   
	    public WorkOrderDebug getWorkOrderDebug(CallingContext context,  string workOrderURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetWorkOrderDebugPayload requestObj = new GetWorkOrderDebugPayload();
	        requestObj.workOrderURI = workOrderURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETWORKORDERDEBUG", RaptureSerializer.SerializeJson<GetWorkOrderDebugPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<WorkOrderDebug>(resp.response.content);
	            }
	             throw new Exception("Error in getWorkOrderDebug, no response returned");
	        }
	   
	    public void setWorkOrderIdGenConfig(CallingContext context,  string config,  bool force)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetWorkOrderIdGenConfigPayload requestObj = new SetWorkOrderIdGenConfigPayload();
	        requestObj.config = config;
	        requestObj.force = force;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETWORKORDERIDGENCONFIG", RaptureSerializer.SerializeJson<SetWorkOrderIdGenConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setWorkOrderIdGenConfig, no response returned");
	        }
	   
	    public void setContextLiteral(CallingContext context,  string workerURI,  string varAlias,  string literalValue)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetContextLiteralPayload requestObj = new SetContextLiteralPayload();
	        requestObj.workerURI = workerURI;
	        requestObj.varAlias = varAlias;
	        requestObj.literalValue = literalValue;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETCONTEXTLITERAL", RaptureSerializer.SerializeJson<SetContextLiteralPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setContextLiteral, no response returned");
	        }
	   
	    public void setContextLink(CallingContext context,  string workerURI,  string varAlias,  string expressionValue)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetContextLinkPayload requestObj = new SetContextLinkPayload();
	        requestObj.workerURI = workerURI;
	        requestObj.varAlias = varAlias;
	        requestObj.expressionValue = expressionValue;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETCONTEXTLINK", RaptureSerializer.SerializeJson<SetContextLinkPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setContextLink, no response returned");
	        }
	   
	    public string getContextValue(CallingContext context,  string workerURI,  string varAlias)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetContextValuePayload requestObj = new GetContextValuePayload();
	        requestObj.workerURI = workerURI;
	        requestObj.varAlias = varAlias;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETCONTEXTVALUE", RaptureSerializer.SerializeJson<GetContextValuePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in getContextValue, no response returned");
	        }
	   
	    public void addErrorToContext(CallingContext context,  string workerURI,  ErrorWrapper errorWrapper)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddErrorToContextPayload requestObj = new AddErrorToContextPayload();
	        requestObj.workerURI = workerURI;
	        requestObj.errorWrapper = errorWrapper;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDERRORTOCONTEXT", RaptureSerializer.SerializeJson<AddErrorToContextPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addErrorToContext, no response returned");
	        }
	   
	    public List<ErrorWrapper> getErrorsFromContext(CallingContext context,  string workerURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetErrorsFromContextPayload requestObj = new GetErrorsFromContextPayload();
	        requestObj.workerURI = workerURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETERRORSFROMCONTEXT", RaptureSerializer.SerializeJson<GetErrorsFromContextPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<ErrorWrapper>>(resp.response.content);
	            }
	             throw new Exception("Error in getErrorsFromContext, no response returned");
	        }
	   
	    public List<ErrorWrapper> getExceptionInfo(CallingContext context,  string workOrderURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetExceptionInfoPayload requestObj = new GetExceptionInfoPayload();
	        requestObj.workOrderURI = workOrderURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETEXCEPTIONINFO", RaptureSerializer.SerializeJson<GetExceptionInfoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<ErrorWrapper>>(resp.response.content);
	            }
	             throw new Exception("Error in getExceptionInfo, no response returned");
	        }
	   
	    public void reportStepProgress(CallingContext context,  string workerURI,  long stepStartTime,  string message,  long progress,  long max)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ReportStepProgressPayload requestObj = new ReportStepProgressPayload();
	        requestObj.workerURI = workerURI;
	        requestObj.stepStartTime = stepStartTime;
	        requestObj.message = message;
	        requestObj.progress = progress;
	        requestObj.max = max;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REPORTSTEPPROGRESS", RaptureSerializer.SerializeJson<ReportStepProgressPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in reportStepProgress, no response returned");
	        }
	   
	    public List<AppStatus> getAppStatuses(CallingContext context,  string prefix)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetAppStatusesPayload requestObj = new GetAppStatusesPayload();
	        requestObj.prefix = prefix;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETAPPSTATUSES", RaptureSerializer.SerializeJson<GetAppStatusesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<AppStatus>>(resp.response.content);
	            }
	             throw new Exception("Error in getAppStatuses, no response returned");
	        }
	   
	    public List<AppStatusDetails> getAppStatusDetails(CallingContext context,  string prefix,  List<string> extraContextValues)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetAppStatusDetailsPayload requestObj = new GetAppStatusDetailsPayload();
	        requestObj.prefix = prefix;
	        requestObj.extraContextValues = extraContextValues;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETAPPSTATUSDETAILS", RaptureSerializer.SerializeJson<GetAppStatusDetailsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<AppStatusDetails>>(resp.response.content);
	            }
	             throw new Exception("Error in getAppStatusDetails, no response returned");
	        }
	   
	    public WorkflowHistoricalMetrics getMonthlyMetrics(CallingContext context,  string workflowURI,  string jobURI,  string argsHashValue,  string state)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetMonthlyMetricsPayload requestObj = new GetMonthlyMetricsPayload();
	        requestObj.workflowURI = workflowURI;
	        requestObj.jobURI = jobURI;
	        requestObj.argsHashValue = argsHashValue;
	        requestObj.state = state;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETMONTHLYMETRICS", RaptureSerializer.SerializeJson<GetMonthlyMetricsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<WorkflowHistoricalMetrics>(resp.response.content);
	            }
	             throw new Exception("Error in getMonthlyMetrics, no response returned");
	        }
	   
	    public LogQueryResponse queryLogs(CallingContext context,  string workOrderURI,  long startTime,  long endTime,  long keepAlive,  long bufferSize,  string nextBatchId,  string stepName,  string stepStartTime)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            QueryLogsPayload requestObj = new QueryLogsPayload();
	        requestObj.workOrderURI = workOrderURI;
	        requestObj.startTime = startTime;
	        requestObj.endTime = endTime;
	        requestObj.keepAlive = keepAlive;
	        requestObj.bufferSize = bufferSize;
	        requestObj.nextBatchId = nextBatchId;
	        requestObj.stepName = stepName;
	        requestObj.stepStartTime = stepStartTime;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("QUERYLOGS", RaptureSerializer.SerializeJson<QueryLogsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<LogQueryResponse>(resp.response.content);
	            }
	             throw new Exception("Error in queryLogs, no response returned");
	        }
	
	       public List<Workflow> getAllWorkflows() {
	            return getAllWorkflows(null);
	       }

	       public List<RaptureFolderInfo> getWorkflowChildren(string workflowURI) {
	            return getWorkflowChildren(null,workflowURI);
	       }

	       public List<RaptureFolderInfo> getWorkOrderChildren(string parentPath) {
	            return getWorkOrderChildren(null,parentPath);
	       }

	       public void putWorkflow(Workflow workflow) {
	            return putWorkflow(null,workflow);
	       }

	       public Workflow getWorkflow(string workflowURI) {
	            return getWorkflow(null,workflowURI);
	       }

	       public Step getWorkflowStep(string stepURI) {
	            return getWorkflowStep(null,stepURI);
	       }

	       public string getStepCategory(string stepURI) {
	            return getStepCategory(null,stepURI);
	       }

	       public void addStep(string workflowURI, Step step) {
	            return addStep(null,workflowURI,step);
	       }

	       public void removeStep(string workflowURI, string stepName) {
	            return removeStep(null,workflowURI,stepName);
	       }

	       public void addTransition(string workflowURI, string stepName, Transition transition) {
	            return addTransition(null,workflowURI,stepName,transition);
	       }

	       public void removeTransition(string workflowURI, string stepName, string transitionName) {
	            return removeTransition(null,workflowURI,stepName,transitionName);
	       }

	       public void deleteWorkflow(string workflowURI) {
	            return deleteWorkflow(null,workflowURI);
	       }

	       public void putWorkflowStepTemplate(WorkflowStepTemplate template) {
	            return putWorkflowStepTemplate(null,template);
	       }

	       public WorkflowStepTemplate getWorkflowStepTemplate(string workflowStepTemplateURI) {
	            return getWorkflowStepTemplate(null,workflowStepTemplateURI);
	       }

	       public void deleteWorkflowStepTemplate(string workflowStepTemplateURI) {
	            return deleteWorkflowStepTemplate(null,workflowStepTemplateURI);
	       }

	       public List<RaptureFolderInfo> getWorflowStepTemplateChildren(string parentPath) {
	            return getWorflowStepTemplateChildren(null,parentPath);
	       }

	       public string createWorkOrder(string workflowURI, Dictionary<string, string> argsMap) {
	            return createWorkOrder(null,workflowURI,argsMap);
	       }

	       public CreateResponse createWorkOrderP(string workflowURI, Dictionary<string, string> argsMap, string appStatusUriPattern) {
	            return createWorkOrderP(null,workflowURI,argsMap,appStatusUriPattern);
	       }

	       public void releaseWorkOrderLock(string workOrderURI) {
	            return releaseWorkOrderLock(null,workOrderURI);
	       }

	       public WorkOrderStatus getWorkOrderStatus(string workOrderURI) {
	            return getWorkOrderStatus(null,workOrderURI);
	       }

	       public void writeWorkflowAuditEntry(string workOrderURI, string message, bool error) {
	            return writeWorkflowAuditEntry(null,workOrderURI,message,error);
	       }

	       public List<WorkOrder> getWorkOrdersByDay(long startTimeInstant) {
	            return getWorkOrdersByDay(null,startTimeInstant);
	       }

	       public WorkOrder getWorkOrder(string workOrderURI) {
	            return getWorkOrder(null,workOrderURI);
	       }

	       public Worker getWorker(string workOrderURI, string workerId) {
	            return getWorker(null,workOrderURI,workerId);
	       }

	       public void cancelWorkOrder(string workOrderURI) {
	            return cancelWorkOrder(null,workOrderURI);
	       }

	       public CreateResponse resumeWorkOrder(string workOrderURI, string resumeStepURI) {
	            return resumeWorkOrder(null,workOrderURI,resumeStepURI);
	       }

	       public bool wasCancelCalled(string workOrderURI) {
	            return wasCancelCalled(null,workOrderURI);
	       }

	       public WorkOrderCancellation getCancellationDetails(string workOrderURI) {
	            return getCancellationDetails(null,workOrderURI);
	       }

	       public WorkOrderDebug getWorkOrderDebug(string workOrderURI) {
	            return getWorkOrderDebug(null,workOrderURI);
	       }

	       public void setWorkOrderIdGenConfig(string config, bool force) {
	            return setWorkOrderIdGenConfig(null,config,force);
	       }

	       public void setContextLiteral(string workerURI, string varAlias, string literalValue) {
	            return setContextLiteral(null,workerURI,varAlias,literalValue);
	       }

	       public void setContextLink(string workerURI, string varAlias, string expressionValue) {
	            return setContextLink(null,workerURI,varAlias,expressionValue);
	       }

	       public string getContextValue(string workerURI, string varAlias) {
	            return getContextValue(null,workerURI,varAlias);
	       }

	       public void addErrorToContext(string workerURI, ErrorWrapper errorWrapper) {
	            return addErrorToContext(null,workerURI,errorWrapper);
	       }

	       public List<ErrorWrapper> getErrorsFromContext(string workerURI) {
	            return getErrorsFromContext(null,workerURI);
	       }

	       public List<ErrorWrapper> getExceptionInfo(string workOrderURI) {
	            return getExceptionInfo(null,workOrderURI);
	       }

	       public void reportStepProgress(string workerURI, long stepStartTime, string message, long progress, long max) {
	            return reportStepProgress(null,workerURI,stepStartTime,message,progress,max);
	       }

	       public List<AppStatus> getAppStatuses(string prefix) {
	            return getAppStatuses(null,prefix);
	       }

	       public List<AppStatusDetails> getAppStatusDetails(string prefix, List<string> extraContextValues) {
	            return getAppStatusDetails(null,prefix,extraContextValues);
	       }

	       public WorkflowHistoricalMetrics getMonthlyMetrics(string workflowURI, string jobURI, string argsHashValue, string state) {
	            return getMonthlyMetrics(null,workflowURI,jobURI,argsHashValue,state);
	       }

	       public LogQueryResponse queryLogs(string workOrderURI, long startTime, long endTime, long keepAlive, long bufferSize, string nextBatchId, string stepName, string stepStartTime) {
	            return queryLogs(null,workOrderURI,startTime,endTime,keepAlive,bufferSize,nextBatchId,stepName,stepStartTime);
	       }

}
}


