/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.idgen
{

public class HttpIdGenApi : BaseHttpApi , IdGenApi, ScriptIdGenApi {
	public HttpIdGenApi(HttpLoginApi login) : base(login, "idgen") {
	
	}
		
	   
	    public List<RaptureIdGenConfig> getIdGenConfigs(CallingContext context,  string authority)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetIdGenConfigsPayload requestObj = new GetIdGenConfigsPayload();
	        requestObj.authority = authority;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETIDGENCONFIGS", RaptureSerializer.SerializeJson<GetIdGenConfigsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureIdGenConfig>>(resp.response.content);
	            }
	             throw new Exception("Error in getIdGenConfigs, no response returned");
	        }
	   
	    public RaptureIdGenConfig getIdGenConfig(CallingContext context,  string idGenUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetIdGenConfigPayload requestObj = new GetIdGenConfigPayload();
	        requestObj.idGenUri = idGenUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETIDGENCONFIG", RaptureSerializer.SerializeJson<GetIdGenConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureIdGenConfig>(resp.response.content);
	            }
	             throw new Exception("Error in getIdGenConfig, no response returned");
	        }
	   
	    public RaptureIdGenConfig createIdGen(CallingContext context,  string idGenUri,  string config)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateIdGenPayload requestObj = new CreateIdGenPayload();
	        requestObj.idGenUri = idGenUri;
	        requestObj.config = config;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEIDGEN", RaptureSerializer.SerializeJson<CreateIdGenPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureIdGenConfig>(resp.response.content);
	            }
	             throw new Exception("Error in createIdGen, no response returned");
	        }
	   
	    public bool idGenExists(CallingContext context,  string idGenUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            IdGenExistsPayload requestObj = new IdGenExistsPayload();
	        requestObj.idGenUri = idGenUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("IDGENEXISTS", RaptureSerializer.SerializeJson<IdGenExistsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in idGenExists, no response returned");
	        }
	   
	    public void deleteIdGen(CallingContext context,  string idGenUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteIdGenPayload requestObj = new DeleteIdGenPayload();
	        requestObj.idGenUri = idGenUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEIDGEN", RaptureSerializer.SerializeJson<DeleteIdGenPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteIdGen, no response returned");
	        }
	   
	    public void setIdGen(CallingContext context,  string idGenUri,  long count)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetIdGenPayload requestObj = new SetIdGenPayload();
	        requestObj.idGenUri = idGenUri;
	        requestObj.count = count;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETIDGEN", RaptureSerializer.SerializeJson<SetIdGenPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setIdGen, no response returned");
	        }
	   
	    public string next(CallingContext context,  string idGenUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            NextPayload requestObj = new NextPayload();
	        requestObj.idGenUri = idGenUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("NEXT", RaptureSerializer.SerializeJson<NextPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in next, no response returned");
	        }
	   
	    public string nextIds(CallingContext context,  string idGenUri,  long num)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            NextIdsPayload requestObj = new NextIdsPayload();
	        requestObj.idGenUri = idGenUri;
	        requestObj.num = num;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("NEXTIDS", RaptureSerializer.SerializeJson<NextIdsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in nextIds, no response returned");
	        }
	   
	    public void setupDefaultIdGens(CallingContext context,  bool force)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetupDefaultIdGensPayload requestObj = new SetupDefaultIdGensPayload();
	        requestObj.force = force;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETUPDEFAULTIDGENS", RaptureSerializer.SerializeJson<SetupDefaultIdGensPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setupDefaultIdGens, no response returned");
	        }
	
	       public List<RaptureIdGenConfig> getIdGenConfigs(string authority) {
	            return getIdGenConfigs(null,authority);
	       }

	       public RaptureIdGenConfig getIdGenConfig(string idGenUri) {
	            return getIdGenConfig(null,idGenUri);
	       }

	       public RaptureIdGenConfig createIdGen(string idGenUri, string config) {
	            return createIdGen(null,idGenUri,config);
	       }

	       public bool idGenExists(string idGenUri) {
	            return idGenExists(null,idGenUri);
	       }

	       public void deleteIdGen(string idGenUri) {
	            return deleteIdGen(null,idGenUri);
	       }

	       public void setIdGen(string idGenUri, long count) {
	            return setIdGen(null,idGenUri,count);
	       }

	       public string next(string idGenUri) {
	            return next(null,idGenUri);
	       }

	       public string nextIds(string idGenUri, long num) {
	            return nextIds(null,idGenUri,num);
	       }

	       public void setupDefaultIdGens(bool force) {
	            return setupDefaultIdGens(null,force);
	       }

}
}


