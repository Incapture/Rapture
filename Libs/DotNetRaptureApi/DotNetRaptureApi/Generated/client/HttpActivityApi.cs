/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.activity
{

public class HttpActivityApi : BaseHttpApi , ActivityApi, ScriptActivityApi {
	public HttpActivityApi(HttpLoginApi login) : base(login, "activity") {
	
	}
		
	   
	    public string createActivity(CallingContext context,  string description,  string message,  long progress,  long max)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateActivityPayload requestObj = new CreateActivityPayload();
	        requestObj.description = description;
	        requestObj.message = message;
	        requestObj.progress = progress;
	        requestObj.max = max;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEACTIVITY", RaptureSerializer.SerializeJson<CreateActivityPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in createActivity, no response returned");
	        }
	   
	    public bool updateActivity(CallingContext context,  string activityId,  string message,  long progress,  long max)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            UpdateActivityPayload requestObj = new UpdateActivityPayload();
	        requestObj.activityId = activityId;
	        requestObj.message = message;
	        requestObj.progress = progress;
	        requestObj.max = max;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("UPDATEACTIVITY", RaptureSerializer.SerializeJson<UpdateActivityPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in updateActivity, no response returned");
	        }
	   
	    public bool finishActivity(CallingContext context,  string activityId,  string message)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            FinishActivityPayload requestObj = new FinishActivityPayload();
	        requestObj.activityId = activityId;
	        requestObj.message = message;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("FINISHACTIVITY", RaptureSerializer.SerializeJson<FinishActivityPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in finishActivity, no response returned");
	        }
	   
	    public bool requestAbortActivity(CallingContext context,  string activityId,  string message)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RequestAbortActivityPayload requestObj = new RequestAbortActivityPayload();
	        requestObj.activityId = activityId;
	        requestObj.message = message;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REQUESTABORTACTIVITY", RaptureSerializer.SerializeJson<RequestAbortActivityPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in requestAbortActivity, no response returned");
	        }
	   
	    public ActivityQueryResponse queryByExpiryTime(CallingContext context,  string nextBatchId,  long batchSize,  long lastSeen)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            QueryByExpiryTimePayload requestObj = new QueryByExpiryTimePayload();
	        requestObj.nextBatchId = nextBatchId;
	        requestObj.batchSize = batchSize;
	        requestObj.lastSeen = lastSeen;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("QUERYBYEXPIRYTIME", RaptureSerializer.SerializeJson<QueryByExpiryTimePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<ActivityQueryResponse>(resp.response.content);
	            }
	             throw new Exception("Error in queryByExpiryTime, no response returned");
	        }
	   
	    public Activity getById(CallingContext context,  string activityId)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetByIdPayload requestObj = new GetByIdPayload();
	        requestObj.activityId = activityId;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETBYID", RaptureSerializer.SerializeJson<GetByIdPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Activity>(resp.response.content);
	            }
	             throw new Exception("Error in getById, no response returned");
	        }
	
	       public string createActivity(string description, string message, long progress, long max) {
	            return createActivity(null,description,message,progress,max);
	       }

	       public bool updateActivity(string activityId, string message, long progress, long max) {
	            return updateActivity(null,activityId,message,progress,max);
	       }

	       public bool finishActivity(string activityId, string message) {
	            return finishActivity(null,activityId,message);
	       }

	       public bool requestAbortActivity(string activityId, string message) {
	            return requestAbortActivity(null,activityId,message);
	       }

	       public ActivityQueryResponse queryByExpiryTime(string nextBatchId, long batchSize, long lastSeen) {
	            return queryByExpiryTime(null,nextBatchId,batchSize,lastSeen);
	       }

	       public Activity getById(string activityId) {
	            return getById(null,activityId);
	       }

}
}


