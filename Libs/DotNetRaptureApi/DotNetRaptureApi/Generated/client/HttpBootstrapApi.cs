/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.bootstrap
{

public class HttpBootstrapApi : BaseHttpApi , BootstrapApi, ScriptBootstrapApi {
	public HttpBootstrapApi(HttpLoginApi login) : base(login, "bootstrap") {
	
	}
		
	   
	    public void setEmphemeralRepo(CallingContext context,  string config)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetEmphemeralRepoPayload requestObj = new SetEmphemeralRepoPayload();
	        requestObj.config = config;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETEMPHEMERALREPO", RaptureSerializer.SerializeJson<SetEmphemeralRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setEmphemeralRepo, no response returned");
	        }
	   
	    public void setConfigRepo(CallingContext context,  string config)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetConfigRepoPayload requestObj = new SetConfigRepoPayload();
	        requestObj.config = config;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETCONFIGREPO", RaptureSerializer.SerializeJson<SetConfigRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setConfigRepo, no response returned");
	        }
	   
	    public void setSettingsRepo(CallingContext context,  string config)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetSettingsRepoPayload requestObj = new SetSettingsRepoPayload();
	        requestObj.config = config;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETSETTINGSREPO", RaptureSerializer.SerializeJson<SetSettingsRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setSettingsRepo, no response returned");
	        }
	   
	    public void migrateConfigRepo(CallingContext context,  string newConfig)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            MigrateConfigRepoPayload requestObj = new MigrateConfigRepoPayload();
	        requestObj.newConfig = newConfig;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("MIGRATECONFIGREPO", RaptureSerializer.SerializeJson<MigrateConfigRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in migrateConfigRepo, no response returned");
	        }
	   
	    public void migrateEphemeralRepo(CallingContext context,  string newConfig)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            MigrateEphemeralRepoPayload requestObj = new MigrateEphemeralRepoPayload();
	        requestObj.newConfig = newConfig;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("MIGRATEEPHEMERALREPO", RaptureSerializer.SerializeJson<MigrateEphemeralRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in migrateEphemeralRepo, no response returned");
	        }
	   
	    public void migrateSettingsRepo(CallingContext context,  string newConfig)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            MigrateSettingsRepoPayload requestObj = new MigrateSettingsRepoPayload();
	        requestObj.newConfig = newConfig;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("MIGRATESETTINGSREPO", RaptureSerializer.SerializeJson<MigrateSettingsRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in migrateSettingsRepo, no response returned");
	        }
	   
	    public string getConfigRepo(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetConfigRepoPayload requestObj = new GetConfigRepoPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETCONFIGREPO", RaptureSerializer.SerializeJson<GetConfigRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in getConfigRepo, no response returned");
	        }
	   
	    public string getSettingsRepo(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetSettingsRepoPayload requestObj = new GetSettingsRepoPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSETTINGSREPO", RaptureSerializer.SerializeJson<GetSettingsRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in getSettingsRepo, no response returned");
	        }
	   
	    public string getEphemeralRepo(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetEphemeralRepoPayload requestObj = new GetEphemeralRepoPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETEPHEMERALREPO", RaptureSerializer.SerializeJson<GetEphemeralRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in getEphemeralRepo, no response returned");
	        }
	   
	    public void restartBootstrap(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RestartBootstrapPayload requestObj = new RestartBootstrapPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RESTARTBOOTSTRAP", RaptureSerializer.SerializeJson<RestartBootstrapPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in restartBootstrap, no response returned");
	        }
	   
	    public void addScriptClass(CallingContext context,  string keyword,  string className)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddScriptClassPayload requestObj = new AddScriptClassPayload();
	        requestObj.keyword = keyword;
	        requestObj.className = className;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDSCRIPTCLASS", RaptureSerializer.SerializeJson<AddScriptClassPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addScriptClass, no response returned");
	        }
	   
	    public Dictionary<string, string> getScriptClasses(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetScriptClassesPayload requestObj = new GetScriptClassesPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSCRIPTCLASSES", RaptureSerializer.SerializeJson<GetScriptClassesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, string>>(resp.response.content);
	            }
	             throw new Exception("Error in getScriptClasses, no response returned");
	        }
	   
	    public bool deleteScriptClass(CallingContext context,  string keyword)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteScriptClassPayload requestObj = new DeleteScriptClassPayload();
	        requestObj.keyword = keyword;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETESCRIPTCLASS", RaptureSerializer.SerializeJson<DeleteScriptClassPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in deleteScriptClass, no response returned");
	        }
	
	       public void setEmphemeralRepo(string config) {
	            return setEmphemeralRepo(null,config);
	       }

	       public void setConfigRepo(string config) {
	            return setConfigRepo(null,config);
	       }

	       public void setSettingsRepo(string config) {
	            return setSettingsRepo(null,config);
	       }

	       public void migrateConfigRepo(string newConfig) {
	            return migrateConfigRepo(null,newConfig);
	       }

	       public void migrateEphemeralRepo(string newConfig) {
	            return migrateEphemeralRepo(null,newConfig);
	       }

	       public void migrateSettingsRepo(string newConfig) {
	            return migrateSettingsRepo(null,newConfig);
	       }

	       public string getConfigRepo() {
	            return getConfigRepo(null);
	       }

	       public string getSettingsRepo() {
	            return getSettingsRepo(null);
	       }

	       public string getEphemeralRepo() {
	            return getEphemeralRepo(null);
	       }

	       public void restartBootstrap() {
	            return restartBootstrap(null);
	       }

	       public void addScriptClass(string keyword, string className) {
	            return addScriptClass(null,keyword,className);
	       }

	       public Dictionary<string, string> getScriptClasses() {
	            return getScriptClasses(null);
	       }

	       public bool deleteScriptClass(string keyword) {
	            return deleteScriptClass(null,keyword);
	       }

}
}


