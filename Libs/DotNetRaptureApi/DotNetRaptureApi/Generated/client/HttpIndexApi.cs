/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.index
{

public class HttpIndexApi : BaseHttpApi , IndexApi, ScriptIndexApi {
	public HttpIndexApi(HttpLoginApi login) : base(login, "index") {
	
	}
		
	   
	    public IndexConfig createIndex(CallingContext context,  string indexUri,  string config)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateIndexPayload requestObj = new CreateIndexPayload();
	        requestObj.indexUri = indexUri;
	        requestObj.config = config;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEINDEX", RaptureSerializer.SerializeJson<CreateIndexPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<IndexConfig>(resp.response.content);
	            }
	             throw new Exception("Error in createIndex, no response returned");
	        }
	   
	    public IndexConfig getIndex(CallingContext context,  string indexUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetIndexPayload requestObj = new GetIndexPayload();
	        requestObj.indexUri = indexUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETINDEX", RaptureSerializer.SerializeJson<GetIndexPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<IndexConfig>(resp.response.content);
	            }
	             throw new Exception("Error in getIndex, no response returned");
	        }
	   
	    public void deleteIndex(CallingContext context,  string indexUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteIndexPayload requestObj = new DeleteIndexPayload();
	        requestObj.indexUri = indexUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEINDEX", RaptureSerializer.SerializeJson<DeleteIndexPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteIndex, no response returned");
	        }
	   
	    public TableQueryResult findIndex(CallingContext context,  string indexUri,  string query)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            FindIndexPayload requestObj = new FindIndexPayload();
	        requestObj.indexUri = indexUri;
	        requestObj.query = query;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("FINDINDEX", RaptureSerializer.SerializeJson<FindIndexPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<TableQueryResult>(resp.response.content);
	            }
	             throw new Exception("Error in findIndex, no response returned");
	        }
	
	       public IndexConfig createIndex(string indexUri, string config) {
	            return createIndex(null,indexUri,config);
	       }

	       public IndexConfig getIndex(string indexUri) {
	            return getIndex(null,indexUri);
	       }

	       public void deleteIndex(string indexUri) {
	            return deleteIndex(null,indexUri);
	       }

	       public TableQueryResult findIndex(string indexUri, string query) {
	            return findIndex(null,indexUri,query);
	       }

}
}


