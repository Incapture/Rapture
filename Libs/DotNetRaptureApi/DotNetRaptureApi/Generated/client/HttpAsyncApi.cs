/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.async
{

public class HttpAsyncApi : BaseHttpApi , AsyncApi, ScriptAsyncApi {
	public HttpAsyncApi(HttpLoginApi login) : base(login, "async") {
	
	}
		
	   
	    public string asyncReflexScript(CallingContext context,  string reflexScript,  Dictionary<string, string> parameters)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AsyncReflexScriptPayload requestObj = new AsyncReflexScriptPayload();
	        requestObj.reflexScript = reflexScript;
	        requestObj.parameters = parameters;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ASYNCREFLEXSCRIPT", RaptureSerializer.SerializeJson<AsyncReflexScriptPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in asyncReflexScript, no response returned");
	        }
	   
	    public string asyncReflexReference(CallingContext context,  string scriptURI,  Dictionary<string, string> parameters)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AsyncReflexReferencePayload requestObj = new AsyncReflexReferencePayload();
	        requestObj.scriptURI = scriptURI;
	        requestObj.parameters = parameters;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ASYNCREFLEXREFERENCE", RaptureSerializer.SerializeJson<AsyncReflexReferencePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in asyncReflexReference, no response returned");
	        }
	   
	    public WorkOrderStatus asyncStatus(CallingContext context,  string taskId)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AsyncStatusPayload requestObj = new AsyncStatusPayload();
	        requestObj.taskId = taskId;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ASYNCSTATUS", RaptureSerializer.SerializeJson<AsyncStatusPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<WorkOrderStatus>(resp.response.content);
	            }
	             throw new Exception("Error in asyncStatus, no response returned");
	        }
	   
	    public void setupDefaultWorkflows(CallingContext context,  bool force)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetupDefaultWorkflowsPayload requestObj = new SetupDefaultWorkflowsPayload();
	        requestObj.force = force;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETUPDEFAULTWORKFLOWS", RaptureSerializer.SerializeJson<SetupDefaultWorkflowsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setupDefaultWorkflows, no response returned");
	        }
	
	       public string asyncReflexScript(string reflexScript, Dictionary<string, string> parameters) {
	            return asyncReflexScript(null,reflexScript,parameters);
	       }

	       public string asyncReflexReference(string scriptURI, Dictionary<string, string> parameters) {
	            return asyncReflexReference(null,scriptURI,parameters);
	       }

	       public WorkOrderStatus asyncStatus(string taskId) {
	            return asyncStatus(null,taskId);
	       }

	       public void setupDefaultWorkflows(bool force) {
	            return setupDefaultWorkflows(null,force);
	       }

}
}


