/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.jar
{

public class HttpJarApi : BaseHttpApi , JarApi, ScriptJarApi {
	public HttpJarApi(HttpLoginApi login) : base(login, "jar") {
	
	}
		
	   
	    public bool jarExists(CallingContext context,  string jarUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            JarExistsPayload requestObj = new JarExistsPayload();
	        requestObj.jarUri = jarUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("JAREXISTS", RaptureSerializer.SerializeJson<JarExistsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in jarExists, no response returned");
	        }
	   
	    public void putJar(CallingContext context,  string jarUri,  byte[] jarContent)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PutJarPayload requestObj = new PutJarPayload();
	        requestObj.jarUri = jarUri;
	        requestObj.jarContent = jarContent;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUTJAR", RaptureSerializer.SerializeJson<PutJarPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in putJar, no response returned");
	        }
	   
	    public BlobContainer getJar(CallingContext context,  string jarUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetJarPayload requestObj = new GetJarPayload();
	        requestObj.jarUri = jarUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETJAR", RaptureSerializer.SerializeJson<GetJarPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<BlobContainer>(resp.response.content);
	            }
	             throw new Exception("Error in getJar, no response returned");
	        }
	   
	    public void deleteJar(CallingContext context,  string jarUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteJarPayload requestObj = new DeleteJarPayload();
	        requestObj.jarUri = jarUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEJAR", RaptureSerializer.SerializeJson<DeleteJarPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteJar, no response returned");
	        }
	   
	    public long getJarSize(CallingContext context,  string jarUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetJarSizePayload requestObj = new GetJarSizePayload();
	        requestObj.jarUri = jarUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETJARSIZE", RaptureSerializer.SerializeJson<GetJarSizePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<long>(resp.response.content);
	            }
	             throw new Exception("Error in getJarSize, no response returned");
	        }
	   
	    public Dictionary<string, string> getJarMetaData(CallingContext context,  string jarUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetJarMetaDataPayload requestObj = new GetJarMetaDataPayload();
	        requestObj.jarUri = jarUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETJARMETADATA", RaptureSerializer.SerializeJson<GetJarMetaDataPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, string>>(resp.response.content);
	            }
	             throw new Exception("Error in getJarMetaData, no response returned");
	        }
	   
	    public Dictionary<string, RaptureFolderInfo> listJarsByUriPrefix(CallingContext context,  string uriPrefix,  int depth)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ListJarsByUriPrefixPayload requestObj = new ListJarsByUriPrefixPayload();
	        requestObj.uriPrefix = uriPrefix;
	        requestObj.depth = depth;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("LISTJARSBYURIPREFIX", RaptureSerializer.SerializeJson<ListJarsByUriPrefixPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, RaptureFolderInfo>>(resp.response.content);
	            }
	             throw new Exception("Error in listJarsByUriPrefix, no response returned");
	        }
	   
	    public bool jarIsEnabled(CallingContext context,  string jarUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            JarIsEnabledPayload requestObj = new JarIsEnabledPayload();
	        requestObj.jarUri = jarUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("JARISENABLED", RaptureSerializer.SerializeJson<JarIsEnabledPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in jarIsEnabled, no response returned");
	        }
	   
	    public void enableJar(CallingContext context,  string jarUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            EnableJarPayload requestObj = new EnableJarPayload();
	        requestObj.jarUri = jarUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ENABLEJAR", RaptureSerializer.SerializeJson<EnableJarPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in enableJar, no response returned");
	        }
	   
	    public void disableJar(CallingContext context,  string jarUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DisableJarPayload requestObj = new DisableJarPayload();
	        requestObj.jarUri = jarUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DISABLEJAR", RaptureSerializer.SerializeJson<DisableJarPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in disableJar, no response returned");
	        }
	
	       public bool jarExists(string jarUri) {
	            return jarExists(null,jarUri);
	       }

	       public void putJar(string jarUri, byte[] jarContent) {
	            return putJar(null,jarUri,jarContent);
	       }

	       public BlobContainer getJar(string jarUri) {
	            return getJar(null,jarUri);
	       }

	       public void deleteJar(string jarUri) {
	            return deleteJar(null,jarUri);
	       }

	       public long getJarSize(string jarUri) {
	            return getJarSize(null,jarUri);
	       }

	       public Dictionary<string, string> getJarMetaData(string jarUri) {
	            return getJarMetaData(null,jarUri);
	       }

	       public Dictionary<string, RaptureFolderInfo> listJarsByUriPrefix(string uriPrefix, int depth) {
	            return listJarsByUriPrefix(null,uriPrefix,depth);
	       }

	       public bool jarIsEnabled(string jarUri) {
	            return jarIsEnabled(null,jarUri);
	       }

	       public void enableJar(string jarUri) {
	            return enableJar(null,jarUri);
	       }

	       public void disableJar(string jarUri) {
	            return disableJar(null,jarUri);
	       }

}
}


