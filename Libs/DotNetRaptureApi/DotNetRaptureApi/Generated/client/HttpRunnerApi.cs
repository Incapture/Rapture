/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.runner
{

public class HttpRunnerApi : BaseHttpApi , RunnerApi, ScriptRunnerApi {
	public HttpRunnerApi(HttpLoginApi login) : base(login, "runner") {
	
	}
		
	   
	    public RaptureServerGroup createServerGroup(CallingContext context,  string name,  string description)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateServerGroupPayload requestObj = new CreateServerGroupPayload();
	        requestObj.name = name;
	        requestObj.description = description;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATESERVERGROUP", RaptureSerializer.SerializeJson<CreateServerGroupPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureServerGroup>(resp.response.content);
	            }
	             throw new Exception("Error in createServerGroup, no response returned");
	        }
	   
	    public void deleteServerGroup(CallingContext context,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteServerGroupPayload requestObj = new DeleteServerGroupPayload();
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETESERVERGROUP", RaptureSerializer.SerializeJson<DeleteServerGroupPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteServerGroup, no response returned");
	        }
	   
	    public List<RaptureServerGroup> getAllServerGroups(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetAllServerGroupsPayload requestObj = new GetAllServerGroupsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETALLSERVERGROUPS", RaptureSerializer.SerializeJson<GetAllServerGroupsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureServerGroup>>(resp.response.content);
	            }
	             throw new Exception("Error in getAllServerGroups, no response returned");
	        }
	   
	    public List<RaptureApplicationDefinition> getAllApplicationDefinitions(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetAllApplicationDefinitionsPayload requestObj = new GetAllApplicationDefinitionsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETALLAPPLICATIONDEFINITIONS", RaptureSerializer.SerializeJson<GetAllApplicationDefinitionsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureApplicationDefinition>>(resp.response.content);
	            }
	             throw new Exception("Error in getAllApplicationDefinitions, no response returned");
	        }
	   
	    public List<RaptureLibraryDefinition> getAllLibraryDefinitions(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetAllLibraryDefinitionsPayload requestObj = new GetAllLibraryDefinitionsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETALLLIBRARYDEFINITIONS", RaptureSerializer.SerializeJson<GetAllLibraryDefinitionsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureLibraryDefinition>>(resp.response.content);
	            }
	             throw new Exception("Error in getAllLibraryDefinitions, no response returned");
	        }
	   
	    public List<RaptureApplicationInstance> getAllApplicationInstances(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetAllApplicationInstancesPayload requestObj = new GetAllApplicationInstancesPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETALLAPPLICATIONINSTANCES", RaptureSerializer.SerializeJson<GetAllApplicationInstancesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureApplicationInstance>>(resp.response.content);
	            }
	             throw new Exception("Error in getAllApplicationInstances, no response returned");
	        }
	   
	    public RaptureServerGroup getServerGroup(CallingContext context,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetServerGroupPayload requestObj = new GetServerGroupPayload();
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSERVERGROUP", RaptureSerializer.SerializeJson<GetServerGroupPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureServerGroup>(resp.response.content);
	            }
	             throw new Exception("Error in getServerGroup, no response returned");
	        }
	   
	    public RaptureServerGroup addGroupInclusion(CallingContext context,  string name,  string inclusion)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddGroupInclusionPayload requestObj = new AddGroupInclusionPayload();
	        requestObj.name = name;
	        requestObj.inclusion = inclusion;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDGROUPINCLUSION", RaptureSerializer.SerializeJson<AddGroupInclusionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureServerGroup>(resp.response.content);
	            }
	             throw new Exception("Error in addGroupInclusion, no response returned");
	        }
	   
	    public RaptureServerGroup removeGroupInclusion(CallingContext context,  string name,  string inclusion)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RemoveGroupInclusionPayload requestObj = new RemoveGroupInclusionPayload();
	        requestObj.name = name;
	        requestObj.inclusion = inclusion;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REMOVEGROUPINCLUSION", RaptureSerializer.SerializeJson<RemoveGroupInclusionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureServerGroup>(resp.response.content);
	            }
	             throw new Exception("Error in removeGroupInclusion, no response returned");
	        }
	   
	    public RaptureServerGroup addGroupExclusion(CallingContext context,  string name,  string exclusion)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddGroupExclusionPayload requestObj = new AddGroupExclusionPayload();
	        requestObj.name = name;
	        requestObj.exclusion = exclusion;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDGROUPEXCLUSION", RaptureSerializer.SerializeJson<AddGroupExclusionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureServerGroup>(resp.response.content);
	            }
	             throw new Exception("Error in addGroupExclusion, no response returned");
	        }
	   
	    public RaptureServerGroup removeGroupExclusion(CallingContext context,  string name,  string exclusion)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RemoveGroupExclusionPayload requestObj = new RemoveGroupExclusionPayload();
	        requestObj.name = name;
	        requestObj.exclusion = exclusion;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REMOVEGROUPEXCLUSION", RaptureSerializer.SerializeJson<RemoveGroupExclusionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureServerGroup>(resp.response.content);
	            }
	             throw new Exception("Error in removeGroupExclusion, no response returned");
	        }
	   
	    public RaptureServerGroup removeGroupEntry(CallingContext context,  string name,  string entry)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RemoveGroupEntryPayload requestObj = new RemoveGroupEntryPayload();
	        requestObj.name = name;
	        requestObj.entry = entry;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REMOVEGROUPENTRY", RaptureSerializer.SerializeJson<RemoveGroupEntryPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureServerGroup>(resp.response.content);
	            }
	             throw new Exception("Error in removeGroupEntry, no response returned");
	        }
	   
	    public RaptureApplicationDefinition createApplicationDefinition(CallingContext context,  string name,  string ver,  string description)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateApplicationDefinitionPayload requestObj = new CreateApplicationDefinitionPayload();
	        requestObj.name = name;
	        requestObj.ver = ver;
	        requestObj.description = description;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEAPPLICATIONDEFINITION", RaptureSerializer.SerializeJson<CreateApplicationDefinitionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureApplicationDefinition>(resp.response.content);
	            }
	             throw new Exception("Error in createApplicationDefinition, no response returned");
	        }
	   
	    public void deleteApplicationDefinition(CallingContext context,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteApplicationDefinitionPayload requestObj = new DeleteApplicationDefinitionPayload();
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEAPPLICATIONDEFINITION", RaptureSerializer.SerializeJson<DeleteApplicationDefinitionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteApplicationDefinition, no response returned");
	        }
	   
	    public RaptureApplicationDefinition updateApplicationVersion(CallingContext context,  string name,  string ver)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            UpdateApplicationVersionPayload requestObj = new UpdateApplicationVersionPayload();
	        requestObj.name = name;
	        requestObj.ver = ver;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("UPDATEAPPLICATIONVERSION", RaptureSerializer.SerializeJson<UpdateApplicationVersionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureApplicationDefinition>(resp.response.content);
	            }
	             throw new Exception("Error in updateApplicationVersion, no response returned");
	        }
	   
	    public RaptureLibraryDefinition createLibraryDefinition(CallingContext context,  string name,  string ver,  string description)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateLibraryDefinitionPayload requestObj = new CreateLibraryDefinitionPayload();
	        requestObj.name = name;
	        requestObj.ver = ver;
	        requestObj.description = description;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATELIBRARYDEFINITION", RaptureSerializer.SerializeJson<CreateLibraryDefinitionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureLibraryDefinition>(resp.response.content);
	            }
	             throw new Exception("Error in createLibraryDefinition, no response returned");
	        }
	   
	    public void deleteLibraryDefinition(CallingContext context,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteLibraryDefinitionPayload requestObj = new DeleteLibraryDefinitionPayload();
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETELIBRARYDEFINITION", RaptureSerializer.SerializeJson<DeleteLibraryDefinitionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteLibraryDefinition, no response returned");
	        }
	   
	    public RaptureLibraryDefinition getLibraryDefinition(CallingContext context,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetLibraryDefinitionPayload requestObj = new GetLibraryDefinitionPayload();
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETLIBRARYDEFINITION", RaptureSerializer.SerializeJson<GetLibraryDefinitionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureLibraryDefinition>(resp.response.content);
	            }
	             throw new Exception("Error in getLibraryDefinition, no response returned");
	        }
	   
	    public RaptureLibraryDefinition updateLibraryVersion(CallingContext context,  string name,  string ver)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            UpdateLibraryVersionPayload requestObj = new UpdateLibraryVersionPayload();
	        requestObj.name = name;
	        requestObj.ver = ver;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("UPDATELIBRARYVERSION", RaptureSerializer.SerializeJson<UpdateLibraryVersionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureLibraryDefinition>(resp.response.content);
	            }
	             throw new Exception("Error in updateLibraryVersion, no response returned");
	        }
	   
	    public RaptureServerGroup addLibraryToGroup(CallingContext context,  string serverGroup,  string libraryName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddLibraryToGroupPayload requestObj = new AddLibraryToGroupPayload();
	        requestObj.serverGroup = serverGroup;
	        requestObj.libraryName = libraryName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDLIBRARYTOGROUP", RaptureSerializer.SerializeJson<AddLibraryToGroupPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureServerGroup>(resp.response.content);
	            }
	             throw new Exception("Error in addLibraryToGroup, no response returned");
	        }
	   
	    public RaptureServerGroup removeLibraryFromGroup(CallingContext context,  string serverGroup,  string libraryName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RemoveLibraryFromGroupPayload requestObj = new RemoveLibraryFromGroupPayload();
	        requestObj.serverGroup = serverGroup;
	        requestObj.libraryName = libraryName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REMOVELIBRARYFROMGROUP", RaptureSerializer.SerializeJson<RemoveLibraryFromGroupPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureServerGroup>(resp.response.content);
	            }
	             throw new Exception("Error in removeLibraryFromGroup, no response returned");
	        }
	   
	    public RaptureApplicationInstance createApplicationInstance(CallingContext context,  string name,  string description,  string serverGroup,  string appName,  string timeRange,  int retryCount,  string parameters,  string apiUser)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateApplicationInstancePayload requestObj = new CreateApplicationInstancePayload();
	        requestObj.name = name;
	        requestObj.description = description;
	        requestObj.serverGroup = serverGroup;
	        requestObj.appName = appName;
	        requestObj.timeRange = timeRange;
	        requestObj.retryCount = retryCount;
	        requestObj.parameters = parameters;
	        requestObj.apiUser = apiUser;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEAPPLICATIONINSTANCE", RaptureSerializer.SerializeJson<CreateApplicationInstancePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureApplicationInstance>(resp.response.content);
	            }
	             throw new Exception("Error in createApplicationInstance, no response returned");
	        }
	   
	    public RaptureApplicationStatus runApplication(CallingContext context,  string appName,  string queueName,  Dictionary<string, string> parameterInput,  Dictionary<string, string> parameterOutput)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RunApplicationPayload requestObj = new RunApplicationPayload();
	        requestObj.appName = appName;
	        requestObj.queueName = queueName;
	        requestObj.parameterInput = parameterInput;
	        requestObj.parameterOutput = parameterOutput;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RUNAPPLICATION", RaptureSerializer.SerializeJson<RunApplicationPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureApplicationStatus>(resp.response.content);
	            }
	             throw new Exception("Error in runApplication, no response returned");
	        }
	   
	    public RaptureApplicationStatus runCustomApplication(CallingContext context,  string appName,  string queueName,  Dictionary<string, string> parameterInput,  Dictionary<string, string> parameterOutput,  string customApplicationPath)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RunCustomApplicationPayload requestObj = new RunCustomApplicationPayload();
	        requestObj.appName = appName;
	        requestObj.queueName = queueName;
	        requestObj.parameterInput = parameterInput;
	        requestObj.parameterOutput = parameterOutput;
	        requestObj.customApplicationPath = customApplicationPath;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RUNCUSTOMAPPLICATION", RaptureSerializer.SerializeJson<RunCustomApplicationPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureApplicationStatus>(resp.response.content);
	            }
	             throw new Exception("Error in runCustomApplication, no response returned");
	        }
	   
	    public RaptureApplicationStatus getApplicationStatus(CallingContext context,  string applicationStatusURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetApplicationStatusPayload requestObj = new GetApplicationStatusPayload();
	        requestObj.applicationStatusURI = applicationStatusURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETAPPLICATIONSTATUS", RaptureSerializer.SerializeJson<GetApplicationStatusPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureApplicationStatus>(resp.response.content);
	            }
	             throw new Exception("Error in getApplicationStatus, no response returned");
	        }
	   
	    public List<RaptureApplicationStatus> getApplicationStatuses(CallingContext context,  string date)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetApplicationStatusesPayload requestObj = new GetApplicationStatusesPayload();
	        requestObj.date = date;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETAPPLICATIONSTATUSES", RaptureSerializer.SerializeJson<GetApplicationStatusesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureApplicationStatus>>(resp.response.content);
	            }
	             throw new Exception("Error in getApplicationStatuses, no response returned");
	        }
	   
	    public List<string> getApplicationStatusDates(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetApplicationStatusDatesPayload requestObj = new GetApplicationStatusDatesPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETAPPLICATIONSTATUSDATES", RaptureSerializer.SerializeJson<GetApplicationStatusDatesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in getApplicationStatusDates, no response returned");
	        }
	   
	    public void archiveApplicationStatuses(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ArchiveApplicationStatusesPayload requestObj = new ArchiveApplicationStatusesPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ARCHIVEAPPLICATIONSTATUSES", RaptureSerializer.SerializeJson<ArchiveApplicationStatusesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in archiveApplicationStatuses, no response returned");
	        }
	   
	    public RaptureApplicationStatus changeApplicationStatus(CallingContext context,  string applicationStatusURI,  RaptureApplicationStatusStep statusCode,  string message)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ChangeApplicationStatusPayload requestObj = new ChangeApplicationStatusPayload();
	        requestObj.applicationStatusURI = applicationStatusURI;
	        requestObj.statusCode = statusCode;
	        requestObj.message = message;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CHANGEAPPLICATIONSTATUS", RaptureSerializer.SerializeJson<ChangeApplicationStatusPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureApplicationStatus>(resp.response.content);
	            }
	             throw new Exception("Error in changeApplicationStatus, no response returned");
	        }
	   
	    public void recordStatusMessages(CallingContext context,  string applicationStatusURI,  List<string> messages)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RecordStatusMessagesPayload requestObj = new RecordStatusMessagesPayload();
	        requestObj.applicationStatusURI = applicationStatusURI;
	        requestObj.messages = messages;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RECORDSTATUSMESSAGES", RaptureSerializer.SerializeJson<RecordStatusMessagesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in recordStatusMessages, no response returned");
	        }
	   
	    public RaptureApplicationStatus terminateApplication(CallingContext context,  string applicationStatusURI,  string reasonMessage)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            TerminateApplicationPayload requestObj = new TerminateApplicationPayload();
	        requestObj.applicationStatusURI = applicationStatusURI;
	        requestObj.reasonMessage = reasonMessage;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("TERMINATEAPPLICATION", RaptureSerializer.SerializeJson<TerminateApplicationPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureApplicationStatus>(resp.response.content);
	            }
	             throw new Exception("Error in terminateApplication, no response returned");
	        }
	   
	    public void deleteApplicationInstance(CallingContext context,  string name,  string serverGroup)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteApplicationInstancePayload requestObj = new DeleteApplicationInstancePayload();
	        requestObj.name = name;
	        requestObj.serverGroup = serverGroup;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEAPPLICATIONINSTANCE", RaptureSerializer.SerializeJson<DeleteApplicationInstancePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteApplicationInstance, no response returned");
	        }
	   
	    public RaptureApplicationInstance getApplicationInstance(CallingContext context,  string name,  string serverGroup)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetApplicationInstancePayload requestObj = new GetApplicationInstancePayload();
	        requestObj.name = name;
	        requestObj.serverGroup = serverGroup;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETAPPLICATIONINSTANCE", RaptureSerializer.SerializeJson<GetApplicationInstancePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureApplicationInstance>(resp.response.content);
	            }
	             throw new Exception("Error in getApplicationInstance, no response returned");
	        }
	   
	    public void updateStatus(CallingContext context,  string name,  string serverGroup,  string myServer,  string status,  bool finished)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            UpdateStatusPayload requestObj = new UpdateStatusPayload();
	        requestObj.name = name;
	        requestObj.serverGroup = serverGroup;
	        requestObj.myServer = myServer;
	        requestObj.status = status;
	        requestObj.finished = finished;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("UPDATESTATUS", RaptureSerializer.SerializeJson<UpdateStatusPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in updateStatus, no response returned");
	        }
	   
	    public List<string> getApplicationsForServerGroup(CallingContext context,  string serverGroup)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetApplicationsForServerGroupPayload requestObj = new GetApplicationsForServerGroupPayload();
	        requestObj.serverGroup = serverGroup;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETAPPLICATIONSFORSERVERGROUP", RaptureSerializer.SerializeJson<GetApplicationsForServerGroupPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in getApplicationsForServerGroup, no response returned");
	        }
	   
	    public List<RaptureApplicationInstance> getApplicationsForServer(CallingContext context,  string serverName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetApplicationsForServerPayload requestObj = new GetApplicationsForServerPayload();
	        requestObj.serverName = serverName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETAPPLICATIONSFORSERVER", RaptureSerializer.SerializeJson<GetApplicationsForServerPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureApplicationInstance>>(resp.response.content);
	            }
	             throw new Exception("Error in getApplicationsForServer, no response returned");
	        }
	   
	    public RaptureApplicationDefinition getApplicationDefinition(CallingContext context,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetApplicationDefinitionPayload requestObj = new GetApplicationDefinitionPayload();
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETAPPLICATIONDEFINITION", RaptureSerializer.SerializeJson<GetApplicationDefinitionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureApplicationDefinition>(resp.response.content);
	            }
	             throw new Exception("Error in getApplicationDefinition, no response returned");
	        }
	   
	    public void setRunnerConfig(CallingContext context,  string name,  string value)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetRunnerConfigPayload requestObj = new SetRunnerConfigPayload();
	        requestObj.name = name;
	        requestObj.value = value;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETRUNNERCONFIG", RaptureSerializer.SerializeJson<SetRunnerConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setRunnerConfig, no response returned");
	        }
	   
	    public void deleteRunnerConfig(CallingContext context,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteRunnerConfigPayload requestObj = new DeleteRunnerConfigPayload();
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETERUNNERCONFIG", RaptureSerializer.SerializeJson<DeleteRunnerConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteRunnerConfig, no response returned");
	        }
	   
	    public RaptureRunnerConfig getRunnerConfig(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetRunnerConfigPayload requestObj = new GetRunnerConfigPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETRUNNERCONFIG", RaptureSerializer.SerializeJson<GetRunnerConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureRunnerConfig>(resp.response.content);
	            }
	             throw new Exception("Error in getRunnerConfig, no response returned");
	        }
	   
	    public void recordRunnerStatus(CallingContext context,  string serverName,  string serverGroup,  string appInstance,  string appName,  string status)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RecordRunnerStatusPayload requestObj = new RecordRunnerStatusPayload();
	        requestObj.serverName = serverName;
	        requestObj.serverGroup = serverGroup;
	        requestObj.appInstance = appInstance;
	        requestObj.appName = appName;
	        requestObj.status = status;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RECORDRUNNERSTATUS", RaptureSerializer.SerializeJson<RecordRunnerStatusPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in recordRunnerStatus, no response returned");
	        }
	   
	    public void recordInstanceCapabilities(CallingContext context,  string serverName,  string instanceName,  Dictionary<string, Object> capabilities)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RecordInstanceCapabilitiesPayload requestObj = new RecordInstanceCapabilitiesPayload();
	        requestObj.serverName = serverName;
	        requestObj.instanceName = instanceName;
	        requestObj.capabilities = capabilities;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RECORDINSTANCECAPABILITIES", RaptureSerializer.SerializeJson<RecordInstanceCapabilitiesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in recordInstanceCapabilities, no response returned");
	        }
	   
	    public Dictionary<string, RaptureInstanceCapabilities> getCapabilities(CallingContext context,  string serverName,  List<string> instanceNames)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetCapabilitiesPayload requestObj = new GetCapabilitiesPayload();
	        requestObj.serverName = serverName;
	        requestObj.instanceNames = instanceNames;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETCAPABILITIES", RaptureSerializer.SerializeJson<GetCapabilitiesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, RaptureInstanceCapabilities>>(resp.response.content);
	            }
	             throw new Exception("Error in getCapabilities, no response returned");
	        }
	   
	    public List<string> getRunnerServers(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetRunnerServersPayload requestObj = new GetRunnerServersPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETRUNNERSERVERS", RaptureSerializer.SerializeJson<GetRunnerServersPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in getRunnerServers, no response returned");
	        }
	   
	    public RaptureRunnerStatus getRunnerStatus(CallingContext context,  string serverName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetRunnerStatusPayload requestObj = new GetRunnerStatusPayload();
	        requestObj.serverName = serverName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETRUNNERSTATUS", RaptureSerializer.SerializeJson<GetRunnerStatusPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureRunnerStatus>(resp.response.content);
	            }
	             throw new Exception("Error in getRunnerStatus, no response returned");
	        }
	   
	    public void cleanRunnerStatus(CallingContext context,  int ageInMinutes)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CleanRunnerStatusPayload requestObj = new CleanRunnerStatusPayload();
	        requestObj.ageInMinutes = ageInMinutes;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CLEANRUNNERSTATUS", RaptureSerializer.SerializeJson<CleanRunnerStatusPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in cleanRunnerStatus, no response returned");
	        }
	   
	    public void markForRestart(CallingContext context,  string serverName,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            MarkForRestartPayload requestObj = new MarkForRestartPayload();
	        requestObj.serverName = serverName;
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("MARKFORRESTART", RaptureSerializer.SerializeJson<MarkForRestartPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in markForRestart, no response returned");
	        }
	
	       public RaptureServerGroup createServerGroup(string name, string description) {
	            return createServerGroup(null,name,description);
	       }

	       public void deleteServerGroup(string name) {
	            return deleteServerGroup(null,name);
	       }

	       public List<RaptureServerGroup> getAllServerGroups() {
	            return getAllServerGroups(null);
	       }

	       public List<RaptureApplicationDefinition> getAllApplicationDefinitions() {
	            return getAllApplicationDefinitions(null);
	       }

	       public List<RaptureLibraryDefinition> getAllLibraryDefinitions() {
	            return getAllLibraryDefinitions(null);
	       }

	       public List<RaptureApplicationInstance> getAllApplicationInstances() {
	            return getAllApplicationInstances(null);
	       }

	       public RaptureServerGroup getServerGroup(string name) {
	            return getServerGroup(null,name);
	       }

	       public RaptureServerGroup addGroupInclusion(string name, string inclusion) {
	            return addGroupInclusion(null,name,inclusion);
	       }

	       public RaptureServerGroup removeGroupInclusion(string name, string inclusion) {
	            return removeGroupInclusion(null,name,inclusion);
	       }

	       public RaptureServerGroup addGroupExclusion(string name, string exclusion) {
	            return addGroupExclusion(null,name,exclusion);
	       }

	       public RaptureServerGroup removeGroupExclusion(string name, string exclusion) {
	            return removeGroupExclusion(null,name,exclusion);
	       }

	       public RaptureServerGroup removeGroupEntry(string name, string entry) {
	            return removeGroupEntry(null,name,entry);
	       }

	       public RaptureApplicationDefinition createApplicationDefinition(string name, string ver, string description) {
	            return createApplicationDefinition(null,name,ver,description);
	       }

	       public void deleteApplicationDefinition(string name) {
	            return deleteApplicationDefinition(null,name);
	       }

	       public RaptureApplicationDefinition updateApplicationVersion(string name, string ver) {
	            return updateApplicationVersion(null,name,ver);
	       }

	       public RaptureLibraryDefinition createLibraryDefinition(string name, string ver, string description) {
	            return createLibraryDefinition(null,name,ver,description);
	       }

	       public void deleteLibraryDefinition(string name) {
	            return deleteLibraryDefinition(null,name);
	       }

	       public RaptureLibraryDefinition getLibraryDefinition(string name) {
	            return getLibraryDefinition(null,name);
	       }

	       public RaptureLibraryDefinition updateLibraryVersion(string name, string ver) {
	            return updateLibraryVersion(null,name,ver);
	       }

	       public RaptureServerGroup addLibraryToGroup(string serverGroup, string libraryName) {
	            return addLibraryToGroup(null,serverGroup,libraryName);
	       }

	       public RaptureServerGroup removeLibraryFromGroup(string serverGroup, string libraryName) {
	            return removeLibraryFromGroup(null,serverGroup,libraryName);
	       }

	       public RaptureApplicationInstance createApplicationInstance(string name, string description, string serverGroup, string appName, string timeRange, int retryCount, string parameters, string apiUser) {
	            return createApplicationInstance(null,name,description,serverGroup,appName,timeRange,retryCount,parameters,apiUser);
	       }

	       public RaptureApplicationStatus runApplication(string appName, string queueName, Dictionary<string, string> parameterInput, Dictionary<string, string> parameterOutput) {
	            return runApplication(null,appName,queueName,parameterInput,parameterOutput);
	       }

	       public RaptureApplicationStatus runCustomApplication(string appName, string queueName, Dictionary<string, string> parameterInput, Dictionary<string, string> parameterOutput, string customApplicationPath) {
	            return runCustomApplication(null,appName,queueName,parameterInput,parameterOutput,customApplicationPath);
	       }

	       public RaptureApplicationStatus getApplicationStatus(string applicationStatusURI) {
	            return getApplicationStatus(null,applicationStatusURI);
	       }

	       public List<RaptureApplicationStatus> getApplicationStatuses(string date) {
	            return getApplicationStatuses(null,date);
	       }

	       public List<string> getApplicationStatusDates() {
	            return getApplicationStatusDates(null);
	       }

	       public void archiveApplicationStatuses() {
	            return archiveApplicationStatuses(null);
	       }

	       public RaptureApplicationStatus changeApplicationStatus(string applicationStatusURI, RaptureApplicationStatusStep statusCode, string message) {
	            return changeApplicationStatus(null,applicationStatusURI,statusCode,message);
	       }

	       public void recordStatusMessages(string applicationStatusURI, List<string> messages) {
	            return recordStatusMessages(null,applicationStatusURI,messages);
	       }

	       public RaptureApplicationStatus terminateApplication(string applicationStatusURI, string reasonMessage) {
	            return terminateApplication(null,applicationStatusURI,reasonMessage);
	       }

	       public void deleteApplicationInstance(string name, string serverGroup) {
	            return deleteApplicationInstance(null,name,serverGroup);
	       }

	       public RaptureApplicationInstance getApplicationInstance(string name, string serverGroup) {
	            return getApplicationInstance(null,name,serverGroup);
	       }

	       public void updateStatus(string name, string serverGroup, string myServer, string status, bool finished) {
	            return updateStatus(null,name,serverGroup,myServer,status,finished);
	       }

	       public List<string> getApplicationsForServerGroup(string serverGroup) {
	            return getApplicationsForServerGroup(null,serverGroup);
	       }

	       public List<RaptureApplicationInstance> getApplicationsForServer(string serverName) {
	            return getApplicationsForServer(null,serverName);
	       }

	       public RaptureApplicationDefinition getApplicationDefinition(string name) {
	            return getApplicationDefinition(null,name);
	       }

	       public void setRunnerConfig(string name, string value) {
	            return setRunnerConfig(null,name,value);
	       }

	       public void deleteRunnerConfig(string name) {
	            return deleteRunnerConfig(null,name);
	       }

	       public RaptureRunnerConfig getRunnerConfig() {
	            return getRunnerConfig(null);
	       }

	       public void recordRunnerStatus(string serverName, string serverGroup, string appInstance, string appName, string status) {
	            return recordRunnerStatus(null,serverName,serverGroup,appInstance,appName,status);
	       }

	       public void recordInstanceCapabilities(string serverName, string instanceName, Dictionary<string, Object> capabilities) {
	            return recordInstanceCapabilities(null,serverName,instanceName,capabilities);
	       }

	       public Dictionary<string, RaptureInstanceCapabilities> getCapabilities(string serverName, List<string> instanceNames) {
	            return getCapabilities(null,serverName,instanceNames);
	       }

	       public List<string> getRunnerServers() {
	            return getRunnerServers(null);
	       }

	       public RaptureRunnerStatus getRunnerStatus(string serverName) {
	            return getRunnerStatus(null,serverName);
	       }

	       public void cleanRunnerStatus(int ageInMinutes) {
	            return cleanRunnerStatus(null,ageInMinutes);
	       }

	       public void markForRestart(string serverName, string name) {
	            return markForRestart(null,serverName,name);
	       }

}
}


