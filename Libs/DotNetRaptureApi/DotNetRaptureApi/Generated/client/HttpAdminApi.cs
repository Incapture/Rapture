/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.admin
{

public class HttpAdminApi : BaseHttpApi , AdminApi, ScriptAdminApi {
	public HttpAdminApi(HttpLoginApi login) : base(login, "admin") {
	
	}
		
	   
	    public Dictionary<string, string> getSystemProperties(CallingContext context,  List<string> keys)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetSystemPropertiesPayload requestObj = new GetSystemPropertiesPayload();
	        requestObj.keys = keys;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSYSTEMPROPERTIES", RaptureSerializer.SerializeJson<GetSystemPropertiesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, string>>(resp.response.content);
	            }
	             throw new Exception("Error in getSystemProperties, no response returned");
	        }
	   
	    public List<RepoConfig> getRepoConfig(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetRepoConfigPayload requestObj = new GetRepoConfigPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETREPOCONFIG", RaptureSerializer.SerializeJson<GetRepoConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RepoConfig>>(resp.response.content);
	            }
	             throw new Exception("Error in getRepoConfig, no response returned");
	        }
	   
	    public List<CallingContext> getSessionsForUser(CallingContext context,  string user)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetSessionsForUserPayload requestObj = new GetSessionsForUserPayload();
	        requestObj.user = user;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSESSIONSFORUSER", RaptureSerializer.SerializeJson<GetSessionsForUserPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<CallingContext>>(resp.response.content);
	            }
	             throw new Exception("Error in getSessionsForUser, no response returned");
	        }
	   
	    public List<string> getTags(CallingContext context,  string raptureURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetTagsPayload requestObj = new GetTagsPayload();
	        requestObj.raptureURI = raptureURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETTAGS", RaptureSerializer.SerializeJson<GetTagsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in getTags, no response returned");
	        }
	   
	    public void deleteUser(CallingContext context,  string userName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteUserPayload requestObj = new DeleteUserPayload();
	        requestObj.userName = userName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEUSER", RaptureSerializer.SerializeJson<DeleteUserPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteUser, no response returned");
	        }
	   
	    public void destroyUser(CallingContext context,  string userName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DestroyUserPayload requestObj = new DestroyUserPayload();
	        requestObj.userName = userName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DESTROYUSER", RaptureSerializer.SerializeJson<DestroyUserPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in destroyUser, no response returned");
	        }
	   
	    public void restoreUser(CallingContext context,  string userName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RestoreUserPayload requestObj = new RestoreUserPayload();
	        requestObj.userName = userName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RESTOREUSER", RaptureSerializer.SerializeJson<RestoreUserPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in restoreUser, no response returned");
	        }
	   
	    public void addUser(CallingContext context,  string userName,  string description,  string hashPassword,  string email)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddUserPayload requestObj = new AddUserPayload();
	        requestObj.userName = userName;
	        requestObj.description = description;
	        requestObj.hashPassword = hashPassword;
	        requestObj.email = email;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDUSER", RaptureSerializer.SerializeJson<AddUserPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addUser, no response returned");
	        }
	   
	    public bool doesUserExist(CallingContext context,  string userName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DoesUserExistPayload requestObj = new DoesUserExistPayload();
	        requestObj.userName = userName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DOESUSEREXIST", RaptureSerializer.SerializeJson<DoesUserExistPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in doesUserExist, no response returned");
	        }
	   
	    public RaptureUser getUser(CallingContext context,  string userName)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetUserPayload requestObj = new GetUserPayload();
	        requestObj.userName = userName;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETUSER", RaptureSerializer.SerializeJson<GetUserPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureUser>(resp.response.content);
	            }
	             throw new Exception("Error in getUser, no response returned");
	        }
	   
	    public RaptureUser generateApiUser(CallingContext context,  string prefix,  string description)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GenerateApiUserPayload requestObj = new GenerateApiUserPayload();
	        requestObj.prefix = prefix;
	        requestObj.description = description;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GENERATEAPIUSER", RaptureSerializer.SerializeJson<GenerateApiUserPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureUser>(resp.response.content);
	            }
	             throw new Exception("Error in generateApiUser, no response returned");
	        }
	   
	    public void resetUserPassword(CallingContext context,  string userName,  string newHashPassword)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ResetUserPasswordPayload requestObj = new ResetUserPasswordPayload();
	        requestObj.userName = userName;
	        requestObj.newHashPassword = newHashPassword;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RESETUSERPASSWORD", RaptureSerializer.SerializeJson<ResetUserPasswordPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in resetUserPassword, no response returned");
	        }
	   
	    public string createPasswordResetToken(CallingContext context,  string username)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreatePasswordResetTokenPayload requestObj = new CreatePasswordResetTokenPayload();
	        requestObj.username = username;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEPASSWORDRESETTOKEN", RaptureSerializer.SerializeJson<CreatePasswordResetTokenPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in createPasswordResetToken, no response returned");
	        }
	   
	    public void cancelPasswordResetToken(CallingContext context,  string username)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CancelPasswordResetTokenPayload requestObj = new CancelPasswordResetTokenPayload();
	        requestObj.username = username;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CANCELPASSWORDRESETTOKEN", RaptureSerializer.SerializeJson<CancelPasswordResetTokenPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in cancelPasswordResetToken, no response returned");
	        }
	   
	    public void updateUserEmail(CallingContext context,  string userName,  string newEmail)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            UpdateUserEmailPayload requestObj = new UpdateUserEmailPayload();
	        requestObj.userName = userName;
	        requestObj.newEmail = newEmail;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("UPDATEUSEREMAIL", RaptureSerializer.SerializeJson<UpdateUserEmailPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in updateUserEmail, no response returned");
	        }
	   
	    public List<RaptureRemote> getRemotes(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetRemotesPayload requestObj = new GetRemotesPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETREMOTES", RaptureSerializer.SerializeJson<GetRemotesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureRemote>>(resp.response.content);
	            }
	             throw new Exception("Error in getRemotes, no response returned");
	        }
	   
	    public RaptureRemote addRemote(CallingContext context,  string name,  string description,  string url,  string apiKey,  string optP)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddRemotePayload requestObj = new AddRemotePayload();
	        requestObj.name = name;
	        requestObj.description = description;
	        requestObj.url = url;
	        requestObj.apiKey = apiKey;
	        requestObj.optP = optP;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDREMOTE", RaptureSerializer.SerializeJson<AddRemotePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureRemote>(resp.response.content);
	            }
	             throw new Exception("Error in addRemote, no response returned");
	        }
	   
	    public void deleteRemote(CallingContext context,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteRemotePayload requestObj = new DeleteRemotePayload();
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEREMOTE", RaptureSerializer.SerializeJson<DeleteRemotePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteRemote, no response returned");
	        }
	   
	    public void updateRemoteApiKey(CallingContext context,  string name,  string apiKey)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            UpdateRemoteApiKeyPayload requestObj = new UpdateRemoteApiKeyPayload();
	        requestObj.name = name;
	        requestObj.apiKey = apiKey;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("UPDATEREMOTEAPIKEY", RaptureSerializer.SerializeJson<UpdateRemoteApiKeyPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in updateRemoteApiKey, no response returned");
	        }
	   
	    public void setRemote(CallingContext context,  string raptureURI,  string remote,  string remoteURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetRemotePayload requestObj = new SetRemotePayload();
	        requestObj.raptureURI = raptureURI;
	        requestObj.remote = remote;
	        requestObj.remoteURI = remoteURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETREMOTE", RaptureSerializer.SerializeJson<SetRemotePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setRemote, no response returned");
	        }
	   
	    public void clearRemote(CallingContext context,  string raptureURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ClearRemotePayload requestObj = new ClearRemotePayload();
	        requestObj.raptureURI = raptureURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CLEARREMOTE", RaptureSerializer.SerializeJson<ClearRemotePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in clearRemote, no response returned");
	        }
	   
	    public void pullRemote(CallingContext context,  string raptureURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PullRemotePayload requestObj = new PullRemotePayload();
	        requestObj.raptureURI = raptureURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PULLREMOTE", RaptureSerializer.SerializeJson<PullRemotePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in pullRemote, no response returned");
	        }
	   
	    public void addTemplate(CallingContext context,  string name,  string template,  bool overwrite)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddTemplatePayload requestObj = new AddTemplatePayload();
	        requestObj.name = name;
	        requestObj.template = template;
	        requestObj.overwrite = overwrite;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDTEMPLATE", RaptureSerializer.SerializeJson<AddTemplatePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addTemplate, no response returned");
	        }
	   
	    public string runTemplate(CallingContext context,  string name,  string parameters)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RunTemplatePayload requestObj = new RunTemplatePayload();
	        requestObj.name = name;
	        requestObj.parameters = parameters;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RUNTEMPLATE", RaptureSerializer.SerializeJson<RunTemplatePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in runTemplate, no response returned");
	        }
	   
	    public string getTemplate(CallingContext context,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetTemplatePayload requestObj = new GetTemplatePayload();
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETTEMPLATE", RaptureSerializer.SerializeJson<GetTemplatePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in getTemplate, no response returned");
	        }
	   
	    public void copyDocumentRepo(CallingContext context,  string srcAuthority,  string targAuthority,  bool wipe)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CopyDocumentRepoPayload requestObj = new CopyDocumentRepoPayload();
	        requestObj.srcAuthority = srcAuthority;
	        requestObj.targAuthority = targAuthority;
	        requestObj.wipe = wipe;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("COPYDOCUMENTREPO", RaptureSerializer.SerializeJson<CopyDocumentRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in copyDocumentRepo, no response returned");
	        }
	   
	    public void addIPToWhiteList(CallingContext context,  string ipAddress)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddIPToWhiteListPayload requestObj = new AddIPToWhiteListPayload();
	        requestObj.ipAddress = ipAddress;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDIPTOWHITELIST", RaptureSerializer.SerializeJson<AddIPToWhiteListPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addIPToWhiteList, no response returned");
	        }
	   
	    public void removeIPFromWhiteList(CallingContext context,  string ipAddress)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RemoveIPFromWhiteListPayload requestObj = new RemoveIPFromWhiteListPayload();
	        requestObj.ipAddress = ipAddress;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REMOVEIPFROMWHITELIST", RaptureSerializer.SerializeJson<RemoveIPFromWhiteListPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in removeIPFromWhiteList, no response returned");
	        }
	   
	    public List<string> getIPWhiteList(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetIPWhiteListPayload requestObj = new GetIPWhiteListPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETIPWHITELIST", RaptureSerializer.SerializeJson<GetIPWhiteListPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in getIPWhiteList, no response returned");
	        }
	   
	    public string runBatchScript(CallingContext context,  string script)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RunBatchScriptPayload requestObj = new RunBatchScriptPayload();
	        requestObj.script = script;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RUNBATCHSCRIPT", RaptureSerializer.SerializeJson<RunBatchScriptPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in runBatchScript, no response returned");
	        }
	   
	    public List<RaptureUser> getAllUsers(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetAllUsersPayload requestObj = new GetAllUsersPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETALLUSERS", RaptureSerializer.SerializeJson<GetAllUsersPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureUser>>(resp.response.content);
	            }
	             throw new Exception("Error in getAllUsers, no response returned");
	        }
	   
	    public void initiateTypeConversion(CallingContext context,  string raptureURI,  string newConfig,  int versionsToKeep)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            InitiateTypeConversionPayload requestObj = new InitiateTypeConversionPayload();
	        requestObj.raptureURI = raptureURI;
	        requestObj.newConfig = newConfig;
	        requestObj.versionsToKeep = versionsToKeep;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("INITIATETYPECONVERSION", RaptureSerializer.SerializeJson<InitiateTypeConversionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in initiateTypeConversion, no response returned");
	        }
	   
	    public void putArchiveConfig(CallingContext context,  string raptureURI,  TypeArchiveConfig config)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PutArchiveConfigPayload requestObj = new PutArchiveConfigPayload();
	        requestObj.raptureURI = raptureURI;
	        requestObj.config = config;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUTARCHIVECONFIG", RaptureSerializer.SerializeJson<PutArchiveConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in putArchiveConfig, no response returned");
	        }
	   
	    public TypeArchiveConfig getArchiveConfig(CallingContext context,  string raptureURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetArchiveConfigPayload requestObj = new GetArchiveConfigPayload();
	        requestObj.raptureURI = raptureURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETARCHIVECONFIG", RaptureSerializer.SerializeJson<GetArchiveConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<TypeArchiveConfig>(resp.response.content);
	            }
	             throw new Exception("Error in getArchiveConfig, no response returned");
	        }
	   
	    public void deleteArchiveConfig(CallingContext context,  string raptureURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteArchiveConfigPayload requestObj = new DeleteArchiveConfigPayload();
	        requestObj.raptureURI = raptureURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEARCHIVECONFIG", RaptureSerializer.SerializeJson<DeleteArchiveConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteArchiveConfig, no response returned");
	        }
	   
	    public bool ping(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PingPayload requestObj = new PingPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PING", RaptureSerializer.SerializeJson<PingPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in ping, no response returned");
	        }
	   
	    public void addMetadata(CallingContext context,  Dictionary<string, string> values,  bool overwrite)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AddMetadataPayload requestObj = new AddMetadataPayload();
	        requestObj.values = values;
	        requestObj.overwrite = overwrite;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ADDMETADATA", RaptureSerializer.SerializeJson<AddMetadataPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in addMetadata, no response returned");
	        }
	   
	    public void setMOTD(CallingContext context,  string message)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetMOTDPayload requestObj = new SetMOTDPayload();
	        requestObj.message = message;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETMOTD", RaptureSerializer.SerializeJson<SetMOTDPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setMOTD, no response returned");
	        }
	   
	    public string getMOTD(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetMOTDPayload requestObj = new GetMOTDPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETMOTD", RaptureSerializer.SerializeJson<GetMOTDPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in getMOTD, no response returned");
	        }
	   
	    public void setEnvironmentName(CallingContext context,  string name)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetEnvironmentNamePayload requestObj = new SetEnvironmentNamePayload();
	        requestObj.name = name;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETENVIRONMENTNAME", RaptureSerializer.SerializeJson<SetEnvironmentNamePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setEnvironmentName, no response returned");
	        }
	   
	    public void setEnvironmentProperties(CallingContext context,  Dictionary<string, string> properties)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetEnvironmentPropertiesPayload requestObj = new SetEnvironmentPropertiesPayload();
	        requestObj.properties = properties;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETENVIRONMENTPROPERTIES", RaptureSerializer.SerializeJson<SetEnvironmentPropertiesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in setEnvironmentProperties, no response returned");
	        }
	   
	    public string getEnvironmentName(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetEnvironmentNamePayload requestObj = new GetEnvironmentNamePayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETENVIRONMENTNAME", RaptureSerializer.SerializeJson<GetEnvironmentNamePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in getEnvironmentName, no response returned");
	        }
	   
	    public Dictionary<string, string> getEnvironmentProperties(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetEnvironmentPropertiesPayload requestObj = new GetEnvironmentPropertiesPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETENVIRONMENTPROPERTIES", RaptureSerializer.SerializeJson<GetEnvironmentPropertiesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, string>>(resp.response.content);
	            }
	             throw new Exception("Error in getEnvironmentProperties, no response returned");
	        }
	   
	    public string encode(CallingContext context,  string toEncode)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            EncodePayload requestObj = new EncodePayload();
	        requestObj.toEncode = toEncode;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ENCODE", RaptureSerializer.SerializeJson<EncodePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in encode, no response returned");
	        }
	   
	    public string createURI(CallingContext context,  string path,  string leaf)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateURIPayload requestObj = new CreateURIPayload();
	        requestObj.path = path;
	        requestObj.leaf = leaf;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEURI", RaptureSerializer.SerializeJson<CreateURIPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in createURI, no response returned");
	        }
	   
	    public string createMultipartURI(CallingContext context,  List<string> elements)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateMultipartURIPayload requestObj = new CreateMultipartURIPayload();
	        requestObj.elements = elements;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEMULTIPARTURI", RaptureSerializer.SerializeJson<CreateMultipartURIPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in createMultipartURI, no response returned");
	        }
	   
	    public string decode(CallingContext context,  string encoded)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DecodePayload requestObj = new DecodePayload();
	        requestObj.encoded = encoded;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DECODE", RaptureSerializer.SerializeJson<DecodePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in decode, no response returned");
	        }
	   
	    public List<string> findGroupNamesByUser(CallingContext context,  string username)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            FindGroupNamesByUserPayload requestObj = new FindGroupNamesByUserPayload();
	        requestObj.username = username;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("FINDGROUPNAMESBYUSER", RaptureSerializer.SerializeJson<FindGroupNamesByUserPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in findGroupNamesByUser, no response returned");
	        }
	
	       public Dictionary<string, string> getSystemProperties(List<string> keys) {
	            return getSystemProperties(null,keys);
	       }

	       public List<RepoConfig> getRepoConfig() {
	            return getRepoConfig(null);
	       }

	       public List<CallingContext> getSessionsForUser(string user) {
	            return getSessionsForUser(null,user);
	       }

	       public List<string> getTags(string raptureURI) {
	            return getTags(null,raptureURI);
	       }

	       public void deleteUser(string userName) {
	            return deleteUser(null,userName);
	       }

	       public void destroyUser(string userName) {
	            return destroyUser(null,userName);
	       }

	       public void restoreUser(string userName) {
	            return restoreUser(null,userName);
	       }

	       public void addUser(string userName, string description, string hashPassword, string email) {
	            return addUser(null,userName,description,hashPassword,email);
	       }

	       public bool doesUserExist(string userName) {
	            return doesUserExist(null,userName);
	       }

	       public RaptureUser getUser(string userName) {
	            return getUser(null,userName);
	       }

	       public RaptureUser generateApiUser(string prefix, string description) {
	            return generateApiUser(null,prefix,description);
	       }

	       public void resetUserPassword(string userName, string newHashPassword) {
	            return resetUserPassword(null,userName,newHashPassword);
	       }

	       public string createPasswordResetToken(string username) {
	            return createPasswordResetToken(null,username);
	       }

	       public void cancelPasswordResetToken(string username) {
	            return cancelPasswordResetToken(null,username);
	       }

	       public void updateUserEmail(string userName, string newEmail) {
	            return updateUserEmail(null,userName,newEmail);
	       }

	       public List<RaptureRemote> getRemotes() {
	            return getRemotes(null);
	       }

	       public RaptureRemote addRemote(string name, string description, string url, string apiKey, string optP) {
	            return addRemote(null,name,description,url,apiKey,optP);
	       }

	       public void deleteRemote(string name) {
	            return deleteRemote(null,name);
	       }

	       public void updateRemoteApiKey(string name, string apiKey) {
	            return updateRemoteApiKey(null,name,apiKey);
	       }

	       public void setRemote(string raptureURI, string remote, string remoteURI) {
	            return setRemote(null,raptureURI,remote,remoteURI);
	       }

	       public void clearRemote(string raptureURI) {
	            return clearRemote(null,raptureURI);
	       }

	       public void pullRemote(string raptureURI) {
	            return pullRemote(null,raptureURI);
	       }

	       public void addTemplate(string name, string template, bool overwrite) {
	            return addTemplate(null,name,template,overwrite);
	       }

	       public string runTemplate(string name, string parameters) {
	            return runTemplate(null,name,parameters);
	       }

	       public string getTemplate(string name) {
	            return getTemplate(null,name);
	       }

	       public void copyDocumentRepo(string srcAuthority, string targAuthority, bool wipe) {
	            return copyDocumentRepo(null,srcAuthority,targAuthority,wipe);
	       }

	       public void addIPToWhiteList(string ipAddress) {
	            return addIPToWhiteList(null,ipAddress);
	       }

	       public void removeIPFromWhiteList(string ipAddress) {
	            return removeIPFromWhiteList(null,ipAddress);
	       }

	       public List<string> getIPWhiteList() {
	            return getIPWhiteList(null);
	       }

	       public string runBatchScript(string script) {
	            return runBatchScript(null,script);
	       }

	       public List<RaptureUser> getAllUsers() {
	            return getAllUsers(null);
	       }

	       public void initiateTypeConversion(string raptureURI, string newConfig, int versionsToKeep) {
	            return initiateTypeConversion(null,raptureURI,newConfig,versionsToKeep);
	       }

	       public void putArchiveConfig(string raptureURI, TypeArchiveConfig config) {
	            return putArchiveConfig(null,raptureURI,config);
	       }

	       public TypeArchiveConfig getArchiveConfig(string raptureURI) {
	            return getArchiveConfig(null,raptureURI);
	       }

	       public void deleteArchiveConfig(string raptureURI) {
	            return deleteArchiveConfig(null,raptureURI);
	       }

	       public bool ping() {
	            return ping(null);
	       }

	       public void addMetadata(Dictionary<string, string> values, bool overwrite) {
	            return addMetadata(null,values,overwrite);
	       }

	       public void setMOTD(string message) {
	            return setMOTD(null,message);
	       }

	       public string getMOTD() {
	            return getMOTD(null);
	       }

	       public void setEnvironmentName(string name) {
	            return setEnvironmentName(null,name);
	       }

	       public void setEnvironmentProperties(Dictionary<string, string> properties) {
	            return setEnvironmentProperties(null,properties);
	       }

	       public string getEnvironmentName() {
	            return getEnvironmentName(null);
	       }

	       public Dictionary<string, string> getEnvironmentProperties() {
	            return getEnvironmentProperties(null);
	       }

	       public string encode(string toEncode) {
	            return encode(null,toEncode);
	       }

	       public string createURI(string path, string leaf) {
	            return createURI(null,path,leaf);
	       }

	       public string createMultipartURI(List<string> elements) {
	            return createMultipartURI(null,elements);
	       }

	       public string decode(string encoded) {
	            return decode(null,encoded);
	       }

	       public List<string> findGroupNamesByUser(string username) {
	            return findGroupNamesByUser(null,username);
	       }

}
}


