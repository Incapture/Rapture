/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.doc
{

public class HttpDocApi : BaseHttpApi , DocApi, ScriptDocApi {
	public HttpDocApi(HttpLoginApi login) : base(login, "doc") {
	
	}
		
	   
	    public bool validateDocRepo(CallingContext context,  string docRepoUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ValidateDocRepoPayload requestObj = new ValidateDocRepoPayload();
	        requestObj.docRepoUri = docRepoUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("VALIDATEDOCREPO", RaptureSerializer.SerializeJson<ValidateDocRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in validateDocRepo, no response returned");
	        }
	   
	    public void createDocRepo(CallingContext context,  string docRepoUri,  string config)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateDocRepoPayload requestObj = new CreateDocRepoPayload();
	        requestObj.docRepoUri = docRepoUri;
	        requestObj.config = config;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEDOCREPO", RaptureSerializer.SerializeJson<CreateDocRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in createDocRepo, no response returned");
	        }
	   
	    public bool docRepoExists(CallingContext context,  string docRepoUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DocRepoExistsPayload requestObj = new DocRepoExistsPayload();
	        requestObj.docRepoUri = docRepoUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DOCREPOEXISTS", RaptureSerializer.SerializeJson<DocRepoExistsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in docRepoExists, no response returned");
	        }
	   
	    public bool docExists(CallingContext context,  string docUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DocExistsPayload requestObj = new DocExistsPayload();
	        requestObj.docUri = docUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DOCEXISTS", RaptureSerializer.SerializeJson<DocExistsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in docExists, no response returned");
	        }
	   
	    public DocumentRepoConfig getDocRepoConfig(CallingContext context,  string docRepoUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetDocRepoConfigPayload requestObj = new GetDocRepoConfigPayload();
	        requestObj.docRepoUri = docRepoUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETDOCREPOCONFIG", RaptureSerializer.SerializeJson<GetDocRepoConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<DocumentRepoConfig>(resp.response.content);
	            }
	             throw new Exception("Error in getDocRepoConfig, no response returned");
	        }
	   
	    public Dictionary<string, string> getDocRepoStatus(CallingContext context,  string docRepoUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetDocRepoStatusPayload requestObj = new GetDocRepoStatusPayload();
	        requestObj.docRepoUri = docRepoUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETDOCREPOSTATUS", RaptureSerializer.SerializeJson<GetDocRepoStatusPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, string>>(resp.response.content);
	            }
	             throw new Exception("Error in getDocRepoStatus, no response returned");
	        }
	   
	    public List<DocumentRepoConfig> getDocRepoConfigs(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetDocRepoConfigsPayload requestObj = new GetDocRepoConfigsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETDOCREPOCONFIGS", RaptureSerializer.SerializeJson<GetDocRepoConfigsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<DocumentRepoConfig>>(resp.response.content);
	            }
	             throw new Exception("Error in getDocRepoConfigs, no response returned");
	        }
	   
	    public void deleteDocRepo(CallingContext context,  string docRepoUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteDocRepoPayload requestObj = new DeleteDocRepoPayload();
	        requestObj.docRepoUri = docRepoUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEDOCREPO", RaptureSerializer.SerializeJson<DeleteDocRepoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteDocRepo, no response returned");
	        }
	   
	    public void archiveRepoDocs(CallingContext context,  string docRepoUri,  int versionLimit,  long timeLimit,  bool ensureVersionLimit)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ArchiveRepoDocsPayload requestObj = new ArchiveRepoDocsPayload();
	        requestObj.docRepoUri = docRepoUri;
	        requestObj.versionLimit = versionLimit;
	        requestObj.timeLimit = timeLimit;
	        requestObj.ensureVersionLimit = ensureVersionLimit;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ARCHIVEREPODOCS", RaptureSerializer.SerializeJson<ArchiveRepoDocsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in archiveRepoDocs, no response returned");
	        }
	   
	    public DocumentWithMeta getDocAndMeta(CallingContext context,  string docUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetDocAndMetaPayload requestObj = new GetDocAndMetaPayload();
	        requestObj.docUri = docUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETDOCANDMETA", RaptureSerializer.SerializeJson<GetDocAndMetaPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<DocumentWithMeta>(resp.response.content);
	            }
	             throw new Exception("Error in getDocAndMeta, no response returned");
	        }
	   
	    public DocumentMetadata getDocMeta(CallingContext context,  string docUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetDocMetaPayload requestObj = new GetDocMetaPayload();
	        requestObj.docUri = docUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETDOCMETA", RaptureSerializer.SerializeJson<GetDocMetaPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<DocumentMetadata>(resp.response.content);
	            }
	             throw new Exception("Error in getDocMeta, no response returned");
	        }
	   
	    public DocumentWithMeta revertDoc(CallingContext context,  string docUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RevertDocPayload requestObj = new RevertDocPayload();
	        requestObj.docUri = docUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REVERTDOC", RaptureSerializer.SerializeJson<RevertDocPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<DocumentWithMeta>(resp.response.content);
	            }
	             throw new Exception("Error in revertDoc, no response returned");
	        }
	   
	    public string getDoc(CallingContext context,  string docUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetDocPayload requestObj = new GetDocPayload();
	        requestObj.docUri = docUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETDOC", RaptureSerializer.SerializeJson<GetDocPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in getDoc, no response returned");
	        }
	   
	    public string putDoc(CallingContext context,  string docUri,  string content)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PutDocPayload requestObj = new PutDocPayload();
	        requestObj.docUri = docUri;
	        requestObj.content = content;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUTDOC", RaptureSerializer.SerializeJson<PutDocPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in putDoc, no response returned");
	        }
	   
	    public bool putDocWithVersion(CallingContext context,  string docUri,  string content,  int currentVersion)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PutDocWithVersionPayload requestObj = new PutDocWithVersionPayload();
	        requestObj.docUri = docUri;
	        requestObj.content = content;
	        requestObj.currentVersion = currentVersion;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUTDOCWITHVERSION", RaptureSerializer.SerializeJson<PutDocWithVersionPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in putDocWithVersion, no response returned");
	        }
	   
	    public DocWriteHandle putDocWithEventContext(CallingContext context,  string docUri,  string content,  Dictionary<string, string> eventContext)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PutDocWithEventContextPayload requestObj = new PutDocWithEventContextPayload();
	        requestObj.docUri = docUri;
	        requestObj.content = content;
	        requestObj.eventContext = eventContext;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUTDOCWITHEVENTCONTEXT", RaptureSerializer.SerializeJson<PutDocWithEventContextPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<DocWriteHandle>(resp.response.content);
	            }
	             throw new Exception("Error in putDocWithEventContext, no response returned");
	        }
	   
	    public bool deleteDoc(CallingContext context,  string docUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteDocPayload requestObj = new DeleteDocPayload();
	        requestObj.docUri = docUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEDOC", RaptureSerializer.SerializeJson<DeleteDocPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in deleteDoc, no response returned");
	        }
	   
	    public string renameDoc(CallingContext context,  string fromDocUri,  string toDocUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RenameDocPayload requestObj = new RenameDocPayload();
	        requestObj.fromDocUri = fromDocUri;
	        requestObj.toDocUri = toDocUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RENAMEDOC", RaptureSerializer.SerializeJson<RenameDocPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in renameDoc, no response returned");
	        }
	   
	    public Dictionary<string, string> getDocs(CallingContext context,  List<string> docUris)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetDocsPayload requestObj = new GetDocsPayload();
	        requestObj.docUris = docUris;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETDOCS", RaptureSerializer.SerializeJson<GetDocsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, string>>(resp.response.content);
	            }
	             throw new Exception("Error in getDocs, no response returned");
	        }
	   
	    public List<DocumentWithMeta> getDocAndMetas(CallingContext context,  List<string> docUris)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetDocAndMetasPayload requestObj = new GetDocAndMetasPayload();
	        requestObj.docUris = docUris;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETDOCANDMETAS", RaptureSerializer.SerializeJson<GetDocAndMetasPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<DocumentWithMeta>>(resp.response.content);
	            }
	             throw new Exception("Error in getDocAndMetas, no response returned");
	        }
	   
	    public List<bool> docsExist(CallingContext context,  List<string> docUris)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DocsExistPayload requestObj = new DocsExistPayload();
	        requestObj.docUris = docUris;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DOCSEXIST", RaptureSerializer.SerializeJson<DocsExistPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<bool>>(resp.response.content);
	            }
	             throw new Exception("Error in docsExist, no response returned");
	        }
	   
	    public List<Object> putDocs(CallingContext context,  List<string> docUris,  List<string> contents)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            PutDocsPayload requestObj = new PutDocsPayload();
	        requestObj.docUris = docUris;
	        requestObj.contents = contents;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("PUTDOCS", RaptureSerializer.SerializeJson<PutDocsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<Object>>(resp.response.content);
	            }
	             throw new Exception("Error in putDocs, no response returned");
	        }
	   
	    public List<string> renameDocs(CallingContext context,  string authority,  string comment,  List<string> fromDocUris,  List<string> toDocUris)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RenameDocsPayload requestObj = new RenameDocsPayload();
	        requestObj.authority = authority;
	        requestObj.comment = comment;
	        requestObj.fromDocUris = fromDocUris;
	        requestObj.toDocUris = toDocUris;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RENAMEDOCS", RaptureSerializer.SerializeJson<RenameDocsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in renameDocs, no response returned");
	        }
	   
	    public List<string> deleteDocsByUriPrefix(CallingContext context,  string docUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteDocsByUriPrefixPayload requestObj = new DeleteDocsByUriPrefixPayload();
	        requestObj.docUri = docUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEDOCSBYURIPREFIX", RaptureSerializer.SerializeJson<DeleteDocsByUriPrefixPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in deleteDocsByUriPrefix, no response returned");
	        }
	   
	    public Dictionary<string, RaptureFolderInfo> listDocsByUriPrefix(CallingContext context,  string docUri,  int depth)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ListDocsByUriPrefixPayload requestObj = new ListDocsByUriPrefixPayload();
	        requestObj.docUri = docUri;
	        requestObj.depth = depth;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("LISTDOCSBYURIPREFIX", RaptureSerializer.SerializeJson<ListDocsByUriPrefixPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, RaptureFolderInfo>>(resp.response.content);
	            }
	             throw new Exception("Error in listDocsByUriPrefix, no response returned");
	        }
	   
	    public bool setDocAttribute(CallingContext context,  string attributeUri,  string value)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetDocAttributePayload requestObj = new SetDocAttributePayload();
	        requestObj.attributeUri = attributeUri;
	        requestObj.value = value;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETDOCATTRIBUTE", RaptureSerializer.SerializeJson<SetDocAttributePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in setDocAttribute, no response returned");
	        }
	   
	    public Dictionary<string, bool> setDocAttributes(CallingContext context,  string attributeUri,  List<string> keys,  List<string> values)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetDocAttributesPayload requestObj = new SetDocAttributesPayload();
	        requestObj.attributeUri = attributeUri;
	        requestObj.keys = keys;
	        requestObj.values = values;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETDOCATTRIBUTES", RaptureSerializer.SerializeJson<SetDocAttributesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<Dictionary<string, bool>>(resp.response.content);
	            }
	             throw new Exception("Error in setDocAttributes, no response returned");
	        }
	   
	    public XferDocumentAttribute getDocAttribute(CallingContext context,  string attributeUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetDocAttributePayload requestObj = new GetDocAttributePayload();
	        requestObj.attributeUri = attributeUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETDOCATTRIBUTE", RaptureSerializer.SerializeJson<GetDocAttributePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<XferDocumentAttribute>(resp.response.content);
	            }
	             throw new Exception("Error in getDocAttribute, no response returned");
	        }
	   
	    public List<XferDocumentAttribute> getDocAttributes(CallingContext context,  string attributeUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetDocAttributesPayload requestObj = new GetDocAttributesPayload();
	        requestObj.attributeUri = attributeUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETDOCATTRIBUTES", RaptureSerializer.SerializeJson<GetDocAttributesPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<XferDocumentAttribute>>(resp.response.content);
	            }
	             throw new Exception("Error in getDocAttributes, no response returned");
	        }
	   
	    public bool deleteDocAttribute(CallingContext context,  string attributeUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteDocAttributePayload requestObj = new DeleteDocAttributePayload();
	        requestObj.attributeUri = attributeUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEDOCATTRIBUTE", RaptureSerializer.SerializeJson<DeleteDocAttributePayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in deleteDocAttribute, no response returned");
	        }
	   
	    public string getDocRepoIdGenUri(CallingContext context,  string docRepoUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetDocRepoIdGenUriPayload requestObj = new GetDocRepoIdGenUriPayload();
	        requestObj.docRepoUri = docRepoUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETDOCREPOIDGENURI", RaptureSerializer.SerializeJson<GetDocRepoIdGenUriPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in getDocRepoIdGenUri, no response returned");
	        }
	   
	    public DocumentRepoConfig setDocRepoIdGenConfig(CallingContext context,  string docRepoUri,  string idGenConfig)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            SetDocRepoIdGenConfigPayload requestObj = new SetDocRepoIdGenConfigPayload();
	        requestObj.docRepoUri = docRepoUri;
	        requestObj.idGenConfig = idGenConfig;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("SETDOCREPOIDGENCONFIG", RaptureSerializer.SerializeJson<SetDocRepoIdGenConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<DocumentRepoConfig>(resp.response.content);
	            }
	             throw new Exception("Error in setDocRepoIdGenConfig, no response returned");
	        }
	   
	    public RaptureIdGenConfig getDocRepoIdGenConfig(CallingContext context,  string docRepoUri)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetDocRepoIdGenConfigPayload requestObj = new GetDocRepoIdGenConfigPayload();
	        requestObj.docRepoUri = docRepoUri;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETDOCREPOIDGENCONFIG", RaptureSerializer.SerializeJson<GetDocRepoIdGenConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureIdGenConfig>(resp.response.content);
	            }
	             throw new Exception("Error in getDocRepoIdGenConfig, no response returned");
	        }
	
	       public bool validateDocRepo(string docRepoUri) {
	            return validateDocRepo(null,docRepoUri);
	       }

	       public void createDocRepo(string docRepoUri, string config) {
	            return createDocRepo(null,docRepoUri,config);
	       }

	       public bool docRepoExists(string docRepoUri) {
	            return docRepoExists(null,docRepoUri);
	       }

	       public bool docExists(string docUri) {
	            return docExists(null,docUri);
	       }

	       public DocumentRepoConfig getDocRepoConfig(string docRepoUri) {
	            return getDocRepoConfig(null,docRepoUri);
	       }

	       public Dictionary<string, string> getDocRepoStatus(string docRepoUri) {
	            return getDocRepoStatus(null,docRepoUri);
	       }

	       public List<DocumentRepoConfig> getDocRepoConfigs() {
	            return getDocRepoConfigs(null);
	       }

	       public void deleteDocRepo(string docRepoUri) {
	            return deleteDocRepo(null,docRepoUri);
	       }

	       public void archiveRepoDocs(string docRepoUri, int versionLimit, long timeLimit, bool ensureVersionLimit) {
	            return archiveRepoDocs(null,docRepoUri,versionLimit,timeLimit,ensureVersionLimit);
	       }

	       public DocumentWithMeta getDocAndMeta(string docUri) {
	            return getDocAndMeta(null,docUri);
	       }

	       public DocumentMetadata getDocMeta(string docUri) {
	            return getDocMeta(null,docUri);
	       }

	       public DocumentWithMeta revertDoc(string docUri) {
	            return revertDoc(null,docUri);
	       }

	       public string getDoc(string docUri) {
	            return getDoc(null,docUri);
	       }

	       public string putDoc(string docUri, string content) {
	            return putDoc(null,docUri,content);
	       }

	       public bool putDocWithVersion(string docUri, string content, int currentVersion) {
	            return putDocWithVersion(null,docUri,content,currentVersion);
	       }

	       public DocWriteHandle putDocWithEventContext(string docUri, string content, Dictionary<string, string> eventContext) {
	            return putDocWithEventContext(null,docUri,content,eventContext);
	       }

	       public bool deleteDoc(string docUri) {
	            return deleteDoc(null,docUri);
	       }

	       public string renameDoc(string fromDocUri, string toDocUri) {
	            return renameDoc(null,fromDocUri,toDocUri);
	       }

	       public Dictionary<string, string> getDocs(List<string> docUris) {
	            return getDocs(null,docUris);
	       }

	       public List<DocumentWithMeta> getDocAndMetas(List<string> docUris) {
	            return getDocAndMetas(null,docUris);
	       }

	       public List<bool> docsExist(List<string> docUris) {
	            return docsExist(null,docUris);
	       }

	       public List<Object> putDocs(List<string> docUris, List<string> contents) {
	            return putDocs(null,docUris,contents);
	       }

	       public List<string> renameDocs(string authority, string comment, List<string> fromDocUris, List<string> toDocUris) {
	            return renameDocs(null,authority,comment,fromDocUris,toDocUris);
	       }

	       public List<string> deleteDocsByUriPrefix(string docUri) {
	            return deleteDocsByUriPrefix(null,docUri);
	       }

	       public Dictionary<string, RaptureFolderInfo> listDocsByUriPrefix(string docUri, int depth) {
	            return listDocsByUriPrefix(null,docUri,depth);
	       }

	       public bool setDocAttribute(string attributeUri, string value) {
	            return setDocAttribute(null,attributeUri,value);
	       }

	       public Dictionary<string, bool> setDocAttributes(string attributeUri, List<string> keys, List<string> values) {
	            return setDocAttributes(null,attributeUri,keys,values);
	       }

	       public XferDocumentAttribute getDocAttribute(string attributeUri) {
	            return getDocAttribute(null,attributeUri);
	       }

	       public List<XferDocumentAttribute> getDocAttributes(string attributeUri) {
	            return getDocAttributes(null,attributeUri);
	       }

	       public bool deleteDocAttribute(string attributeUri) {
	            return deleteDocAttribute(null,attributeUri);
	       }

	       public string getDocRepoIdGenUri(string docRepoUri) {
	            return getDocRepoIdGenUri(null,docRepoUri);
	       }

	       public DocumentRepoConfig setDocRepoIdGenConfig(string docRepoUri, string idGenConfig) {
	            return setDocRepoIdGenConfig(null,docRepoUri,idGenConfig);
	       }

	       public RaptureIdGenConfig getDocRepoIdGenConfig(string docRepoUri) {
	            return getDocRepoIdGenConfig(null,docRepoUri);
	       }

}
}


