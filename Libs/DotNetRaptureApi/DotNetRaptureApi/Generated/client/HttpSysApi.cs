/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.sys
{

public class HttpSysApi : BaseHttpApi , SysApi, ScriptSysApi {
	public HttpSysApi(HttpLoginApi login) : base(login, "sys") {
	
	}
		
	   
	    public string retrieveSystemConfig(CallingContext context,  string area,  string path)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RetrieveSystemConfigPayload requestObj = new RetrieveSystemConfigPayload();
	        requestObj.area = area;
	        requestObj.path = path;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RETRIEVESYSTEMCONFIG", RaptureSerializer.SerializeJson<RetrieveSystemConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in retrieveSystemConfig, no response returned");
	        }
	   
	    public string writeSystemConfig(CallingContext context,  string area,  string path,  string content)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            WriteSystemConfigPayload requestObj = new WriteSystemConfigPayload();
	        requestObj.area = area;
	        requestObj.path = path;
	        requestObj.content = content;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("WRITESYSTEMCONFIG", RaptureSerializer.SerializeJson<WriteSystemConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<string>(resp.response.content);
	            }
	             throw new Exception("Error in writeSystemConfig, no response returned");
	        }
	   
	    public void removeSystemConfig(CallingContext context,  string area,  string path)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RemoveSystemConfigPayload requestObj = new RemoveSystemConfigPayload();
	        requestObj.area = area;
	        requestObj.path = path;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("REMOVESYSTEMCONFIG", RaptureSerializer.SerializeJson<RemoveSystemConfigPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in removeSystemConfig, no response returned");
	        }
	   
	    public List<RaptureFolderInfo> getSystemFolders(CallingContext context,  string area,  string path)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetSystemFoldersPayload requestObj = new GetSystemFoldersPayload();
	        requestObj.area = area;
	        requestObj.path = path;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETSYSTEMFOLDERS", RaptureSerializer.SerializeJson<GetSystemFoldersPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureFolderInfo>>(resp.response.content);
	            }
	             throw new Exception("Error in getSystemFolders, no response returned");
	        }
	   
	    public List<string> getAllTopLevelRepos(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetAllTopLevelReposPayload requestObj = new GetAllTopLevelReposPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETALLTOPLEVELREPOS", RaptureSerializer.SerializeJson<GetAllTopLevelReposPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in getAllTopLevelRepos, no response returned");
	        }
	   
	    public ChildrenTransferObject listByUriPrefix(CallingContext context,  string raptureURI,  string marker,  int depth,  long maximum,  bool refresh)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ListByUriPrefixPayload requestObj = new ListByUriPrefixPayload();
	        requestObj.raptureURI = raptureURI;
	        requestObj.marker = marker;
	        requestObj.depth = depth;
	        requestObj.maximum = maximum;
	        requestObj.refresh = refresh;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("LISTBYURIPREFIX", RaptureSerializer.SerializeJson<ListByUriPrefixPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<ChildrenTransferObject>(resp.response.content);
	            }
	             throw new Exception("Error in listByUriPrefix, no response returned");
	        }
	   
	    public ChildrenTransferObject getChildren(CallingContext context,  string raptureURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetChildrenPayload requestObj = new GetChildrenPayload();
	        requestObj.raptureURI = raptureURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETCHILDREN", RaptureSerializer.SerializeJson<GetChildrenPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<ChildrenTransferObject>(resp.response.content);
	            }
	             throw new Exception("Error in getChildren, no response returned");
	        }
	   
	    public ChildrenTransferObject getAllChildren(CallingContext context,  string raptureURI,  string marker,  long maximum,  bool refresh)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetAllChildrenPayload requestObj = new GetAllChildrenPayload();
	        requestObj.raptureURI = raptureURI;
	        requestObj.marker = marker;
	        requestObj.maximum = maximum;
	        requestObj.refresh = refresh;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETALLCHILDREN", RaptureSerializer.SerializeJson<GetAllChildrenPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<ChildrenTransferObject>(resp.response.content);
	            }
	             throw new Exception("Error in getAllChildren, no response returned");
	        }
	   
	    public NodeEnum getFolderInfo(CallingContext context,  string raptureURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetFolderInfoPayload requestObj = new GetFolderInfoPayload();
	        requestObj.raptureURI = raptureURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETFOLDERINFO", RaptureSerializer.SerializeJson<GetFolderInfoPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<NodeEnum>(resp.response.content);
	            }
	             throw new Exception("Error in getFolderInfo, no response returned");
	        }
	
	       public string retrieveSystemConfig(string area, string path) {
	            return retrieveSystemConfig(null,area,path);
	       }

	       public string writeSystemConfig(string area, string path, string content) {
	            return writeSystemConfig(null,area,path,content);
	       }

	       public void removeSystemConfig(string area, string path) {
	            return removeSystemConfig(null,area,path);
	       }

	       public List<RaptureFolderInfo> getSystemFolders(string area, string path) {
	            return getSystemFolders(null,area,path);
	       }

	       public List<string> getAllTopLevelRepos() {
	            return getAllTopLevelRepos(null);
	       }

	       public ChildrenTransferObject listByUriPrefix(string raptureURI, string marker, int depth, long maximum, bool refresh) {
	            return listByUriPrefix(null,raptureURI,marker,depth,maximum,refresh);
	       }

	       public ChildrenTransferObject getChildren(string raptureURI) {
	            return getChildren(null,raptureURI);
	       }

	       public ChildrenTransferObject getAllChildren(string raptureURI, string marker, long maximum, bool refresh) {
	            return getAllChildren(null,raptureURI,marker,maximum,refresh);
	       }

	       public NodeEnum getFolderInfo(string raptureURI) {
	            return getFolderInfo(null,raptureURI);
	       }

}
}


