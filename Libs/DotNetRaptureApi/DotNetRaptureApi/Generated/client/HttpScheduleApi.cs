/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DotNetRaptureAPI;
using DotNetRaptureAPI.Common;
using DotNetRaptureAPI.Common.FixedTypes;
using DotNetRaptureAPI.Utils;

namespace DotNetRaptureAPI.schedule
{

public class HttpScheduleApi : BaseHttpApi , ScheduleApi, ScriptScheduleApi {
	public HttpScheduleApi(HttpLoginApi login) : base(login, "schedule") {
	
	}
		
	   
	    public RaptureJob createJob(CallingContext context,  string jobURI,  string description,  string scriptURI,  string cronExpression,  string timeZone,  Dictionary<string, string> jobParams,  bool autoActivate)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateJobPayload requestObj = new CreateJobPayload();
	        requestObj.jobURI = jobURI;
	        requestObj.description = description;
	        requestObj.scriptURI = scriptURI;
	        requestObj.cronExpression = cronExpression;
	        requestObj.timeZone = timeZone;
	        requestObj.jobParams = jobParams;
	        requestObj.autoActivate = autoActivate;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEJOB", RaptureSerializer.SerializeJson<CreateJobPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureJob>(resp.response.content);
	            }
	             throw new Exception("Error in createJob, no response returned");
	        }
	   
	    public RaptureJob createWorkflowJob(CallingContext context,  string jobURI,  string description,  string workflowURI,  string cronExpression,  string timeZone,  Dictionary<string, string> jobParams,  bool autoActivate,  int maxRuntimeMinutes,  string appStatusNamePattern)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            CreateWorkflowJobPayload requestObj = new CreateWorkflowJobPayload();
	        requestObj.jobURI = jobURI;
	        requestObj.description = description;
	        requestObj.workflowURI = workflowURI;
	        requestObj.cronExpression = cronExpression;
	        requestObj.timeZone = timeZone;
	        requestObj.jobParams = jobParams;
	        requestObj.autoActivate = autoActivate;
	        requestObj.maxRuntimeMinutes = maxRuntimeMinutes;
	        requestObj.appStatusNamePattern = appStatusNamePattern;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("CREATEWORKFLOWJOB", RaptureSerializer.SerializeJson<CreateWorkflowJobPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureJob>(resp.response.content);
	            }
	             throw new Exception("Error in createWorkflowJob, no response returned");
	        }
	   
	    public void activateJob(CallingContext context,  string jobURI,  Dictionary<string, string> extraParams)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ActivateJobPayload requestObj = new ActivateJobPayload();
	        requestObj.jobURI = jobURI;
	        requestObj.extraParams = extraParams;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ACTIVATEJOB", RaptureSerializer.SerializeJson<ActivateJobPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in activateJob, no response returned");
	        }
	   
	    public void deactivateJob(CallingContext context,  string jobURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeactivateJobPayload requestObj = new DeactivateJobPayload();
	        requestObj.jobURI = jobURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DEACTIVATEJOB", RaptureSerializer.SerializeJson<DeactivateJobPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deactivateJob, no response returned");
	        }
	   
	    public RaptureJob retrieveJob(CallingContext context,  string jobURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RetrieveJobPayload requestObj = new RetrieveJobPayload();
	        requestObj.jobURI = jobURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RETRIEVEJOB", RaptureSerializer.SerializeJson<RetrieveJobPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureJob>(resp.response.content);
	            }
	             throw new Exception("Error in retrieveJob, no response returned");
	        }
	   
	    public List<RaptureJob> retrieveJobs(CallingContext context,  string uriPrefix)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RetrieveJobsPayload requestObj = new RetrieveJobsPayload();
	        requestObj.uriPrefix = uriPrefix;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RETRIEVEJOBS", RaptureSerializer.SerializeJson<RetrieveJobsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureJob>>(resp.response.content);
	            }
	             throw new Exception("Error in retrieveJobs, no response returned");
	        }
	   
	    public void runJobNow(CallingContext context,  string jobURI,  Dictionary<string, string> extraParams)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RunJobNowPayload requestObj = new RunJobNowPayload();
	        requestObj.jobURI = jobURI;
	        requestObj.extraParams = extraParams;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RUNJOBNOW", RaptureSerializer.SerializeJson<RunJobNowPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in runJobNow, no response returned");
	        }
	   
	    public void resetJob(CallingContext context,  string jobURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            ResetJobPayload requestObj = new ResetJobPayload();
	        requestObj.jobURI = jobURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RESETJOB", RaptureSerializer.SerializeJson<ResetJobPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in resetJob, no response returned");
	        }
	   
	    public RaptureJobExec retrieveJobExec(CallingContext context,  string jobURI,  long execTime)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            RetrieveJobExecPayload requestObj = new RetrieveJobExecPayload();
	        requestObj.jobURI = jobURI;
	        requestObj.execTime = execTime;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("RETRIEVEJOBEXEC", RaptureSerializer.SerializeJson<RetrieveJobExecPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureJobExec>(resp.response.content);
	            }
	             throw new Exception("Error in retrieveJobExec, no response returned");
	        }
	   
	    public void deleteJob(CallingContext context,  string jobURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            DeleteJobPayload requestObj = new DeleteJobPayload();
	        requestObj.jobURI = jobURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("DELETEJOB", RaptureSerializer.SerializeJson<DeleteJobPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<void>(resp.response.content);
	            }
	             throw new Exception("Error in deleteJob, no response returned");
	        }
	   
	    public List<string> getJobs(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetJobsPayload requestObj = new GetJobsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETJOBS", RaptureSerializer.SerializeJson<GetJobsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<string>>(resp.response.content);
	            }
	             throw new Exception("Error in getJobs, no response returned");
	        }
	   
	    public List<RaptureJobExec> getUpcomingJobs(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetUpcomingJobsPayload requestObj = new GetUpcomingJobsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETUPCOMINGJOBS", RaptureSerializer.SerializeJson<GetUpcomingJobsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureJobExec>>(resp.response.content);
	            }
	             throw new Exception("Error in getUpcomingJobs, no response returned");
	        }
	   
	    public WorkflowExecsStatus getWorkflowExecsStatus(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetWorkflowExecsStatusPayload requestObj = new GetWorkflowExecsStatusPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETWORKFLOWEXECSSTATUS", RaptureSerializer.SerializeJson<GetWorkflowExecsStatusPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<WorkflowExecsStatus>(resp.response.content);
	            }
	             throw new Exception("Error in getWorkflowExecsStatus, no response returned");
	        }
	   
	    public JobErrorAck ackJobError(CallingContext context,  string jobURI,  long execTime,  string jobErrorType)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            AckJobErrorPayload requestObj = new AckJobErrorPayload();
	        requestObj.jobURI = jobURI;
	        requestObj.execTime = execTime;
	        requestObj.jobErrorType = jobErrorType;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ACKJOBERROR", RaptureSerializer.SerializeJson<AckJobErrorPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<JobErrorAck>(resp.response.content);
	            }
	             throw new Exception("Error in ackJobError, no response returned");
	        }
	   
	    public RaptureJobExec getNextExec(CallingContext context,  string jobURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetNextExecPayload requestObj = new GetNextExecPayload();
	        requestObj.jobURI = jobURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETNEXTEXEC", RaptureSerializer.SerializeJson<GetNextExecPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<RaptureJobExec>(resp.response.content);
	            }
	             throw new Exception("Error in getNextExec, no response returned");
	        }
	   
	    public List<RaptureJobExec> getJobExecs(CallingContext context,  string jobURI,  int start,  int count,  bool reversed)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetJobExecsPayload requestObj = new GetJobExecsPayload();
	        requestObj.jobURI = jobURI;
	        requestObj.start = start;
	        requestObj.count = count;
	        requestObj.reversed = reversed;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETJOBEXECS", RaptureSerializer.SerializeJson<GetJobExecsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureJobExec>>(resp.response.content);
	            }
	             throw new Exception("Error in getJobExecs, no response returned");
	        }
	   
	    public List<RaptureJobExec> batchGetJobExecs(CallingContext context,  List<string> jobURI,  int start,  int count,  bool reversed)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            BatchGetJobExecsPayload requestObj = new BatchGetJobExecsPayload();
	        requestObj.jobURI = jobURI;
	        requestObj.start = start;
	        requestObj.count = count;
	        requestObj.reversed = reversed;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("BATCHGETJOBEXECS", RaptureSerializer.SerializeJson<BatchGetJobExecsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<RaptureJobExec>>(resp.response.content);
	            }
	             throw new Exception("Error in batchGetJobExecs, no response returned");
	        }
	   
	    public bool isJobReadyToRun(CallingContext context,  string toJobURI)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            IsJobReadyToRunPayload requestObj = new IsJobReadyToRunPayload();
	        requestObj.toJobURI = toJobURI;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("ISJOBREADYTORUN", RaptureSerializer.SerializeJson<IsJobReadyToRunPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<bool>(resp.response.content);
	            }
	             throw new Exception("Error in isJobReadyToRun, no response returned");
	        }
	   
	    public List<TimedEventRecord> getCurrentWeekTimeRecords(CallingContext context,  int weekOffsetfromNow)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetCurrentWeekTimeRecordsPayload requestObj = new GetCurrentWeekTimeRecordsPayload();
	        requestObj.weekOffsetfromNow = weekOffsetfromNow;
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETCURRENTWEEKTIMERECORDS", RaptureSerializer.SerializeJson<GetCurrentWeekTimeRecordsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<TimedEventRecord>>(resp.response.content);
	            }
	             throw new Exception("Error in getCurrentWeekTimeRecords, no response returned");
	        }
	   
	    public List<TimedEventRecord> getCurrentDayJobs(CallingContext context)
	        {
	            System.Web.Script.Serialization.JavaScriptSerializer oSerializer = 
	         new System.Web.Script.Serialization.JavaScriptSerializer();
	            oSerializer.RegisterConverters(new System.Web.Script.Serialization.JavaScriptConverter[] { new JsonContentConverter() });
	            GetCurrentDayJobsPayload requestObj = new GetCurrentDayJobsPayload();
	            string responseObjectJson;
	            responseObjectJson = makeRequest("GETCURRENTDAYJOBS", RaptureSerializer.SerializeJson<GetCurrentDayJobsPayload>(requestObj));
	            if (responseObjectJson != null && responseObjectJson.Length > 0) {
	              GeneralResponse resp = GeneralResponseConverter.retrieveFromString(responseObjectJson);
	              return RaptureSerializer.DeserializeJson<List<TimedEventRecord>>(resp.response.content);
	            }
	             throw new Exception("Error in getCurrentDayJobs, no response returned");
	        }
	
	       public RaptureJob createJob(string jobURI, string description, string scriptURI, string cronExpression, string timeZone, Dictionary<string, string> jobParams, bool autoActivate) {
	            return createJob(null,jobURI,description,scriptURI,cronExpression,timeZone,jobParams,autoActivate);
	       }

	       public RaptureJob createWorkflowJob(string jobURI, string description, string workflowURI, string cronExpression, string timeZone, Dictionary<string, string> jobParams, bool autoActivate, int maxRuntimeMinutes, string appStatusNamePattern) {
	            return createWorkflowJob(null,jobURI,description,workflowURI,cronExpression,timeZone,jobParams,autoActivate,maxRuntimeMinutes,appStatusNamePattern);
	       }

	       public void activateJob(string jobURI, Dictionary<string, string> extraParams) {
	            return activateJob(null,jobURI,extraParams);
	       }

	       public void deactivateJob(string jobURI) {
	            return deactivateJob(null,jobURI);
	       }

	       public RaptureJob retrieveJob(string jobURI) {
	            return retrieveJob(null,jobURI);
	       }

	       public List<RaptureJob> retrieveJobs(string uriPrefix) {
	            return retrieveJobs(null,uriPrefix);
	       }

	       public void runJobNow(string jobURI, Dictionary<string, string> extraParams) {
	            return runJobNow(null,jobURI,extraParams);
	       }

	       public void resetJob(string jobURI) {
	            return resetJob(null,jobURI);
	       }

	       public RaptureJobExec retrieveJobExec(string jobURI, long execTime) {
	            return retrieveJobExec(null,jobURI,execTime);
	       }

	       public void deleteJob(string jobURI) {
	            return deleteJob(null,jobURI);
	       }

	       public List<string> getJobs() {
	            return getJobs(null);
	       }

	       public List<RaptureJobExec> getUpcomingJobs() {
	            return getUpcomingJobs(null);
	       }

	       public WorkflowExecsStatus getWorkflowExecsStatus() {
	            return getWorkflowExecsStatus(null);
	       }

	       public JobErrorAck ackJobError(string jobURI, long execTime, string jobErrorType) {
	            return ackJobError(null,jobURI,execTime,jobErrorType);
	       }

	       public RaptureJobExec getNextExec(string jobURI) {
	            return getNextExec(null,jobURI);
	       }

	       public List<RaptureJobExec> getJobExecs(string jobURI, int start, int count, bool reversed) {
	            return getJobExecs(null,jobURI,start,count,reversed);
	       }

	       public List<RaptureJobExec> batchGetJobExecs(List<string> jobURI, int start, int count, bool reversed) {
	            return batchGetJobExecs(null,jobURI,start,count,reversed);
	       }

	       public bool isJobReadyToRun(string toJobURI) {
	            return isJobReadyToRun(null,toJobURI);
	       }

	       public List<TimedEventRecord> getCurrentWeekTimeRecords(int weekOffsetfromNow) {
	            return getCurrentWeekTimeRecords(null,weekOffsetfromNow);
	       }

	       public List<TimedEventRecord> getCurrentDayJobs() {
	            return getCurrentDayJobs(null);
	       }

}
}


