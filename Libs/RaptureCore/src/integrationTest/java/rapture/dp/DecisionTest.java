/**
 * Copyright (C) 2011-2015 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package rapture.dp;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import rapture.common.CallingContext;
import rapture.common.RaptureScriptLanguage;
import rapture.common.RaptureScriptPurpose;
import rapture.common.RaptureURI;
import rapture.common.Scheme;
import rapture.common.dp.Step;
import rapture.common.dp.Transition;
import rapture.kernel.ContextFactory;
import rapture.kernel.DecisionApiImplWrapper;
import rapture.kernel.Kernel;

public class DecisionTest {

    public static void main(String[] args) {
        Kernel.initBootstrap(null, null, false);
        Kernel.getPipeline().setupStandardCategory(ContextFactory.getKernelUser(), "alpha");
        Kernel.setCategoryMembership("alpha");
        String script1URI = "script://my/script1";
        createScript1(script1URI);
        String script2URI = "script://my/script2";
        createScript2(script2URI);

        DecisionApiImplWrapper decision = Kernel.getDecision();
        CallingContext context = ContextFactory.getKernelUser();
        String workflowURI = "//my/workflow";
        List<Step> steps = new LinkedList<Step>();

        Step step1 = new Step();
        List<Transition> transitions1 = new LinkedList<Transition>();
        Transition transition = new Transition();
        transition.setName("tran1-2");
        transition.setTargetStep("step2");
        transitions1.add(transition);
        step1.setTransitions(transitions1);
        step1.setName("step1");
        step1.setExecutable(script1URI);
        Map<String, String> view1 = new HashMap<String, String>();
        view1.put("a1", "$amount");
        step1.setView(view1);
        steps.add(step1);

        Step step2 = new Step();
        step2.setName("step2");
        List<Transition> transitions2 = new LinkedList<Transition>();
        transition = new Transition();
        transition.setName("tran2-3");
        transition.setTargetStep("step3");
        transitions2.add(transition);
        step2.setTransitions(transitions2);
        step2.setExecutable(script2URI);
        Map<String, String> view2 = new HashMap<String, String>();
        view2.put("a2", "$amount");
        view2.put("hh", "#342");
        step2.setView(view2);
        steps.add(step2);

        Step step3 = new Step();
        step3.setName("step3");
        String step3URI = new RaptureURI("//TestInvocable", Scheme.DP_JAVA_INVOCABLE).toString();
        step3.setExecutable(step3URI);
        Map<String, String> view3 = new HashMap<String, String>();
        view3.put("a3", "$amount");
        step3.setView(view3);
        steps.add(step3);

        decision.deleteWorkflow(context, workflowURI);
        String workOrderURI = decision.createWorkOrder(context, workflowURI, null);

        System.out.println(String.format("Uri is '%s'", workOrderURI));

        // System.exit(0);

    }

    private static void createScript2(String uri) {
        RaptureScriptLanguage language = RaptureScriptLanguage.REFLEX;
        RaptureScriptPurpose purpose = RaptureScriptPurpose.PROGRAM;
        String script = "// Submit a request to AppManager to run an application\n" + "//\n" + "\n" + "println(\"Hello from script2\");\n" + "\n" + "\n"
                + "workerURI = _params['$DP_WORKER_URI'];\n" + "#decision.setContextLiteral(workerURI, \"a2\", 20);\n" + "\n"
                + "amountValue = #decision.getContextValue(workerURI, \"a2\");\n" + "println(\"Amount with alias is \" + amountValue);\n"
                + "amountValue = #decision.getContextValue(workerURI, \"amount\");\n" + "println(\"Amount raw is \" + amountValue);\n"
                + "hardcoded = #decision.getContextValue(workerURI, \"hh\");\n" + "println(\"Hardcoded value is \" + hardcoded);\n" + "\n"
                + "return \"tran2-3\";\n" + "\n" + "";
        CallingContext context = ContextFactory.getKernelUser();
        if (Kernel.getScript().doesScriptExist(context, uri)) {
            Kernel.getScript().deleteScript(context, uri);
        }
        Kernel.getScript().createScript(context, uri, language, purpose, script);
    }

    private static void createScript1(String uri) {
        RaptureScriptLanguage language = RaptureScriptLanguage.REFLEX;
        RaptureScriptPurpose purpose = RaptureScriptPurpose.PROGRAM;
        String script = "// Submit a request to AppManager to run an application\n" + "//\n" + "\n" + "println(\"Hello from script1\");\n" + "\n"
                + "workerURI = _params['$DP_WORKER_URI'];\n" + "\n" + "#decision.setContextLiteral(workerURI, \"a1\", 19);\n"
                + "amountValue = #decision.getContextValue(workerURI, \"a1\");\n" + "\n" + "println(\"Amount with alias is \" + amountValue);\n"
                + "return \"tran1-2\";\n" + "\n" + "";
        CallingContext context = ContextFactory.getKernelUser();
        if (Kernel.getScript().doesScriptExist(context, uri)) {
            Kernel.getScript().deleteScript(context, uri);
        }
        Kernel.getScript().createScript(context, uri, language, purpose, script);

    }
}
