/**
 * Copyright (C) 2011-2015 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package rapture.kernel;

import java.util.List;
import java.util.concurrent.TimeUnit;

import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import rapture.common.CallingContext;
import rapture.common.model.DocumentRepoConfig;

@Ignore
public class ConvertTypeTest {
    private static CallingContext ctx = ContextFactory.getKernelUser();
    private static final String AUTHORITY = "copyTest";

    @SuppressWarnings("unused")
    private void dump(List<String> cusips) {
        for (String cusip : cusips) {
            System.out.println(cusip);
        }
    }

    @After
    public void finish() {
        // Kernel.getAdmin().dropType(ctx, "test", "bond");
        // Kernel.getAdmin().dropAuthority(ctx, "test", true);
    }

    @Before
    public void startup() {
        Kernel.initBootstrap(null, null, false);
        // Create a authority and a type
        if (!Kernel.getDoc().docRepoExists(ctx, "//" + AUTHORITY + "/bond")) {
            Kernel.getDoc().createDocRepo(ctx, "//" + AUTHORITY + "/bond", "NREP {} USING MEMORY {}");
        }
        addData();
    }

    public void addData() {
        String doc = "{ \"test\" : 1}";
        for (int i = 0; i < 100; i++) {
            Kernel.getDoc().putDoc(ctx, "//" + AUTHORITY + "/bond/cusip1/date" + i, doc);
        }
    }

    @Test
    public void convertType() {
        Kernel.getAdmin().initiateTypeConversion(ctx, "//" + AUTHORITY + "/bond", "REP {} USING MEMORY {}", 1);
        boolean converted = false;
        while (!converted) {
            DocumentRepoConfig type = Kernel.getDoc().getDocRepoConfig(ctx, "//" + AUTHORITY + "/bond");
            if (type.getDocumentRepo().getConfig().startsWith("REP")) {
                converted = true;
            } else {
                try {
                    TimeUnit.SECONDS.sleep(10);
                } catch (InterruptedException e) {
                    converted = true;
                }
            }
        }
    }

}
