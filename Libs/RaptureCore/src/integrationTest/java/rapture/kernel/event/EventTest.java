/**
 * Copyright (C) 2011-2015 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package rapture.kernel.event;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.junit.Test;

import rapture.common.CallingContext;
import rapture.common.RaptureScriptLanguage;
import rapture.common.RaptureScriptPurpose;
import rapture.common.exception.RaptureException;
import rapture.common.model.RaptureExchange;
import rapture.common.model.RaptureExchangeQueue;
import rapture.common.model.RaptureExchangeType;
import rapture.kernel.ContextFactory;
import rapture.kernel.Kernel;

public class EventTest {
    @Test
    public void checkEvents() {
        try {
            Kernel.initBootstrap(null, null, true);

            // This is a unit test that uses the in memory pipeline. Register
            // self to handle Kernel
            bindSelfToPipeline();

            String script1Contents = "println('Hello from a test script');\n println('DisplayName is ' + _params['displayName']);\n";
            String script1 = "theScript";
            String script1URI = "script://test/theScript";
            Kernel.getScript().createScript(ContextFactory.getKernelUser(), "//test/" + script1, RaptureScriptLanguage.REFLEX, RaptureScriptPurpose.PROGRAM,
                    script1Contents);
            String script2Contents = "println('Hello from a test script, once again!');\n";
            String script2 = "theSecondScript";
            String script2URI = "script://test/theSecondScript";
            Kernel.getScript().createScript(ContextFactory.getKernelUser(), "//test/" + script2, RaptureScriptLanguage.REFLEX, RaptureScriptPurpose.PROGRAM,
                    script2Contents);

            // Now attach the script to an event

            Kernel.getEvent().addEventScript(ContextFactory.getKernelUser(), "//test/usr/tst", script1URI, true);
            Kernel.getEvent().addEventScript(ContextFactory.getKernelUser(), "//test/usr/tst", script2URI, true);

            Kernel.getEvent().runEvent(ContextFactory.getKernelUser(), "//test/usr/tst", "displayName", "eventContext");
            Kernel.getEvent().runEvent(ContextFactory.getKernelUser(), "//test/usr/tst", "displayName", "eventContext");

            Thread.sleep(10000);
        } catch (RaptureException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    private void bindSelfToPipeline() {
        CallingContext context = ContextFactory.getKernelUser();
        String category = "testCategory";

        String domain = "testDomain";
        Kernel.getPipeline().registerExchangeDomain(context, "//" + domain, "EXCHANGE {} USING MEMORY {}");

        // set up the queue
        List<RaptureExchangeQueue> queueBindings = new LinkedList<RaptureExchangeQueue>();
        RaptureExchangeQueue queue = new RaptureExchangeQueue();
        queue.setName("whatever");
        queue.setRouteBindings(new ArrayList<String>());
        queueBindings.add(queue);

        String exchangeName = "kernel";
        RaptureExchange exchange = new RaptureExchange();
        exchange.setDomain(domain);
        exchange.setExchangeType(RaptureExchangeType.FANOUT);
        exchange.setName(exchangeName);
        exchange.setQueueBindings(queueBindings);
        Kernel.getPipeline().getTrusted().registerPipelineExchange(context, exchangeName, exchange);

        Kernel.getPipeline().getTrusted().registerServerCategory(context, category, "test");
        Kernel.getPipeline().getTrusted().bindPipeline(context, category, exchangeName, "whatever");

        Kernel.setCategoryMembership(category);

    }
}
