/**
 * Copyright (C) 2011-2015 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package raptureint;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

import rapture.common.LockHandle;
import rapture.lock.memory.MemoryLockingHandler;

/**
 * Test the memory locker
 * 
 * @author alan
 * 
 */
public class MemoryLockTester {
    @Test
    public void acquireAfterDelay() {
        MemoryLockingHandler handler = new MemoryLockingHandler();
        assertNotNull(handler.acquireLock(this.toString(), "/lock/one", 1, 1));
        assertNotNull(handler.acquireLock(new Object().toString(), "/lock/one", 10, 10));
    }

    @Test
    public void acquireTwice() {
        MemoryLockingHandler handler = new MemoryLockingHandler();
        assertNotNull(handler.acquireLock(this.toString(), "/lock/one", 10, 10));
        assertNotNull(handler.acquireLock(this.toString(), "/lock/one", 1, 10));
    }

    @Test
    public void basicWork() {
        MemoryLockingHandler handler = new MemoryLockingHandler();
        LockHandle lockHandle = handler.acquireLock(this.toString(), "/lock/one", 10, 10);
        assertNotNull(lockHandle);
        assertTrue(handler.releaseLock(this.toString(), "/lock/one", lockHandle));
    }
}
