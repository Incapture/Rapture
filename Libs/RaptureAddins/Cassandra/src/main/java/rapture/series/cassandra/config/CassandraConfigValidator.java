/**
 * Copyright (C) 2011-2015 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package rapture.series.cassandra.config;

import java.util.Map;

import rapture.cassandra.CassandraConstants;
import rapture.common.Messages;
import rapture.series.config.ConfigValidator;
import rapture.series.config.InvalidConfigException;

public class CassandraConfigValidator implements ConfigValidator {
    public static final String ALPHA_NUM_UNDERSCORE = "^[A-Za-z]([A-Za-z]|_|[0-9]){0,31}$";
    Messages messages = new Messages("Cassandra");

    @Override
    public void validate(Map<String, String> configMap) throws InvalidConfigException {
        String keyspace = configMap.get(CassandraConstants.KEYSPACECFG);
        if ((keyspace == null) || (keyspace.length() == 0) || !keyspace.matches(ALPHA_NUM_UNDERSCORE)) {
            throw new InvalidConfigException(messages.getMessage("BadFormat", new String[] { CassandraConstants.KEYSPACECFG, keyspace }).format());
        }
        
        String cf = configMap.get(CassandraConstants.CFCFG);
        if ((cf == null) || (cf.length() == 0) || !cf.matches(ALPHA_NUM_UNDERSCORE)) {
            throw new InvalidConfigException(messages.getMessage("BadFormat", new String[] { CassandraConstants.CFCFG, cf }).format());
        }
        
        String limit = configMap.get(CassandraConstants.OVERFLOWLIMITCFG);
        if (limit != null) {
            try {
                Integer.valueOf(limit);
            } catch(NumberFormatException ex) {
                throw new InvalidConfigException(messages.getMessage("BadInteger", new String[] { CassandraConstants.OVERFLOWLIMITCFG, limit }).format());
            }
        }
    }
}
  