/**
 * Copyright (C) 2011-2015 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package rapture.repo.cassandra.key;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.google.common.base.Optional;

/**
 * @author bardhi
 * @since 3/10/15.
 */
public class KeyNormalizer {
    private static final String NORMALIZED_FORMAT = "%s/%s";
    private static final Logger log = Logger.getLogger(KeyNormalizer.class);
    private final Optional<String> pKeyPrefix;

    public KeyNormalizer(Optional<String> pKeyPrefix) {
        this.pKeyPrefix = pKeyPrefix;
    }

    public List<NormalizedKey> normalizeKeys(List<String> original) {
        List<NormalizedKey> normalized = new ArrayList<>(original.size());
        for (String key : original) {
            normalized.add(normalizeKey(key));
        }
        return normalized;
    }

    /**
     * Normalize a key by prepending any necessary pKeyPrefix to it
     *
     * @param key
     * @return
     */
    public NormalizedKey normalizeKey(String key) {
        if (pKeyPrefix.isPresent()) {
            return new NormalizedKey(String.format(NORMALIZED_FORMAT, pKeyPrefix.get(), key));
        } else {
            return new NormalizedKey(key);
        }
    }

    /**
     * strip end slashes from prefix since in cassandra we store each folder name as a key
     *
     * @param prefix
     * @return
     */
    public NormalizedKey normalizePrefix(String prefix) {
        prefix = PathStripper.stripPrefix(prefix);
        return normalizeKey(prefix);
    }
}
