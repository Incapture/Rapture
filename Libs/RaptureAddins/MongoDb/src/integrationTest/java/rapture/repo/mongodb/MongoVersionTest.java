/**
 * Copyright (C) 2011-2015 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package rapture.repo.mongodb;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import rapture.common.CallingContext;
import rapture.kernel.ContextFactory;
import rapture.kernel.Kernel;

/**
 * Created by yanwang on 1/26/15.
 */
public class MongoVersionTest {

    private static CallingContext context = ContextFactory.getKernelUser();

    @Test
    public void testVersionSeparated() {
        String repoName = "zzz.nversioned";
        String repoConfig = "NREP {} USING MONGODB { prefix=\"" + repoName + "\", separateVersion=\"true\"}";
        testVersionInternal(repoName, repoConfig, 5);
    }

    @Test
    public void testVersionUnseparated() {
        String repoName = "zzz.nversioned";
        String repoConfig = "NREP {} USING MONGODB { prefix=\"" + repoName + "\"}";
        testVersionInternal(repoName, repoConfig, 5);
    }

    private void testVersionInternal(String repoName, String repoConfig, int totalVersions) {
        Kernel.getDoc().createDocRepo(context, repoName, repoConfig);

        String path = repoName + "/path/file";
        addVersions(path, totalVersions);

        checkVersions(path, totalVersions);
        assertEquals(getContentForVersion(totalVersions), Kernel.getDoc().getDoc(context, path));

        Kernel.getDoc().deleteDocRepo(context, repoName);
    }

    private void checkVersions(String path, int totalVersions) {
        for(int i = 1; i <= totalVersions; i++) {
            assertEquals(getContentForVersion(i), Kernel.getDoc().getDoc(context, path + "@" + i));
        }
    }

    private void addVersions(String path, int totalVersions) {
        for(int i = 1; i <= totalVersions; i++) {
            Kernel.getDoc().putDoc(context, path, getContentForVersion(i));
        }
    }

    private String getContentForVersion(int version) {
        return String.format("{\"key %s\" : \"value %s\"}", version, version);
    }

}
