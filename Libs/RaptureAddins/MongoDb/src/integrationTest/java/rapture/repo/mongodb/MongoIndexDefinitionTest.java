/**
 * Copyright (C) 2011-2015 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
        package rapture.repo.mongodb;

        import com.google.common.collect.ImmutableMap;
        import com.mongodb.DBCollection;
        import com.mongodb.DBObject;

        import org.junit.Ignore;
        import rapture.dsl.idef.IndexDefinition;
        import rapture.dsl.idef.IndexDefinitionFactory;
        import rapture.index.IndexProducer;
        import rapture.mongodb.MongoDBFactory;

        import java.util.ArrayList;
        import java.util.List;
        import java.util.Map;

        import org.junit.After;
        import org.junit.Before;
        import org.junit.Test;

        import static org.junit.Assert.assertEquals;
        import static org.junit.Assert.assertTrue;

public class MongoIndexDefinitionTest {
    private MongoDbDataStore store = new MongoDbDataStore();

    @Before
    public void setup() {
        Map<String, String> config = ImmutableMap.of("prefix", "strumpet");

        store.setInstanceName("stellar");
        store.setConfig(config);
    }

    @After
    public void after() {
        store.dropKeyStore();
    }

    @Test
    public void test1() {
        IndexDefinition iDef = IndexDefinitionFactory.getDefinition("idField(id) string, fundField(fund) string, sideField(side) string");
        iDef.setIndexName("FOO");
        List<IndexDefinition> indexDefinitions = new ArrayList<IndexDefinition>();
        indexDefinitions.add(iDef);

        store.createIndexHandler(new IndexProducer(indexDefinitions));

        DBCollection collection = MongoDBFactory.getDB("Test").getCollection("strumpet_index_index");
        List<DBObject> indexes = collection.getIndexInfo();

        // we should have the number of indexes in the definition
        // (plus 2 that are always created: _id and key)
        // only test for indexes created by createRelatedTableStore() ...
        // assertEquals(5, indexes.size());

        ArrayList<String> index_names = new ArrayList<>(indexes.size());
        for (DBObject i: indexes) {
            index_names.add((String) i.get("name"));
        }

        //name should be one provided
        assertTrue(index_names.contains("FOO"));

        collection.drop();
    }

    @Test
    public void test2() {
        IndexDefinition iDef1 = IndexDefinitionFactory.getDefinition("id1Field(id1) string");
        IndexDefinition iDef2 = IndexDefinitionFactory.getDefinition("fooField(foo) string, barField(bar) string");

        List<IndexDefinition> indexDefinitions = new ArrayList<IndexDefinition>();
        indexDefinitions.add(iDef1);
        indexDefinitions.add(iDef2);

        store.createIndexHandler(new IndexProducer(indexDefinitions));

        DBCollection collection = MongoDBFactory.getDB("Test").getCollection("strumpet_index_index");
        List<DBObject> indexes = collection.getIndexInfo();

        // we should have the number of indexes in the definition
        // (plus 2 that are always created: _id and key)
        // only test for indexes created by createRelatedTableStore() ...
        // assertEquals(5, indexes.size());

        ArrayList<String> index_names = new ArrayList<>(indexes.size());

        for (DBObject i: indexes) {
            index_names.add((String) i.get("name"));
        }

        assertTrue(index_names.contains("id1Field_idx"));
        assertTrue(index_names.contains("fooFieldbarField_idx"));

        collection.drop();
    }

}

