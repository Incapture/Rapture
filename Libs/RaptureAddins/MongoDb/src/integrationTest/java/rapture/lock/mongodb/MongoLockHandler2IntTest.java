/**
 * Copyright (C) 2011-2015 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package rapture.lock.mongodb;

import org.apache.log4j.Logger;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Suite;
import rapture.common.LockHandle;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import static org.junit.Assert.*;

public class MongoLockHandler2IntTest {
    private static Logger logger = Logger.getLogger(MongoLockHandler2IntTest.class);
    private MongoLockHandler2 m;

    @Before
    public void setup() {
        m = new MongoLockHandler2();
        m.setInstanceName("default");
    }

    @Test
    public void testAcquireLockTest() {
        String lockHolder = "me";
        String lockName = "repoIwantto_lock";
        int secondsToWait = 3;
        int secondsToHold = 30;
        LockHandle lockHandle = m.acquireLock(lockHolder, lockName, secondsToWait, secondsToHold);
        assertNotNull(lockHandle);
        assertEquals(lockHolder, lockHandle.getLockHolder());
        assertEquals(lockName, lockHandle.getLockName());
        assertNotNull(lockHandle.getHandle());
        assertTrue(lockExists(lockHandle));
        assertTrue(m.releaseLock(lockHandle));
        assertFalse(lockExists(lockHandle));
    }

    @Ignore
    @Test
    public void testAcquireLockMultipleThreads() throws InterruptedException {
        final String lockHolder = "me";
        final String lockName = "repoThatWillBe_Locked";
        final int secondsToWait = 10;
        final int secondsToHold = 30;
        final int size = 10;

        final Set<LockHandle> handlesAcquired = new HashSet<LockHandle>();
        ExecutorService taskExecutor = Executors.newFixedThreadPool(size);
        for (int i = 0; i < size; i++) {
            final int counter = i;
            taskExecutor.execute(new Runnable() {
                public void run() {
                    LockHandle lockHandle = m
                            .acquireLock(lockHolder + String.valueOf(counter), lockName + String.valueOf(counter), secondsToWait, secondsToHold);
                    assertNotNull(lockHandle);
                    assertTrue(lockExists(lockHandle));
                    logger.info("count:" + counter);
                    handlesAcquired.add(lockHandle);

                    try {
                        Thread.sleep(200);
                    } catch (InterruptedException e) {
                    }

                    assertTrue(m.releaseLock(lockHandle));
                    assertFalse(lockExists(lockHandle));

                }
            });
        }
        taskExecutor.shutdown();
        taskExecutor.awaitTermination(5, TimeUnit.SECONDS);
        assertEquals(size, handlesAcquired.size());
    }

    @Ignore
    @Test
    public void testAcquireLockShutout() throws InterruptedException {
        final String lockHolder = "me";
        final String lockName = "anotherRepo_Locked";
        final int secondsToWait = 1;
        final int secondsToHold = 6;
        final int size = 10;
        final Set<LockHandle> handlesAcquired = new HashSet<LockHandle>();
        final Set<String> handlesDenied = new HashSet<String>();

        ExecutorService taskExecutor = Executors.newFixedThreadPool(size);
        for (int i = 0; i < size; i++) {
            final int counter = i;
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
            }
            taskExecutor.execute(new Runnable() {
                public void run() {
                    LockHandle lockHandle = m.acquireLock(lockHolder + String.valueOf(counter), lockName, secondsToWait, secondsToHold);
                    if (lockHandle != null) {
                        logger.debug("ACQUIRED:" + lockName);
                        handlesAcquired.add(lockHandle);
                        assertTrue(lockExists(lockHandle));
                        try {
                            Thread.sleep(5000);
                        } catch (InterruptedException e) {
                        }
                    } else {
                        logger.debug("DENIED:" + lockName);

                        handlesDenied.add(lockHolder + String.valueOf(counter));
                        // could not get lock, make sure our entry is still not in there
                        assertFalse(lockExists(lockHandle));
                        try {
                            Thread.sleep(2000);
                        } catch (InterruptedException e) {
                        }
                        return;
                    }
//                    try {
//                        Thread.sleep(9000);
//                    } catch (InterruptedException e) {
//                    }

                    assertTrue(m.releaseLock(lockHandle));
                    assertFalse(lockExists(lockHandle));
                }
            });
        }
        taskExecutor.shutdown();
        taskExecutor.awaitTermination(15, TimeUnit.SECONDS);
        assertEquals(1, handlesAcquired.size());
        assertEquals(size - 1, handlesDenied.size());
    }

    private boolean lockExists(LockHandle lockHandle) {
        if (lockHandle == null) {
            return false;
        }
        LockHandle lock = m.getLockForName(lockHandle.getLockName());

        if (lock != null && lock.getHandle().equals(lockHandle.getHandle())) {
            return true;
        }

        return false;
    }

}
