/**
 * Copyright (C) 2011-2015 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package rapture.postgres.connection.cache;

import java.beans.PropertyVetoException;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.SQLException;

import javax.sql.DataSource;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.jdbc.support.DatabaseMetaDataCallback;
import org.springframework.jdbc.support.JdbcUtils;
import org.springframework.jdbc.support.MetaDataAccessException;

import rapture.common.exception.ExceptionToString;
import rapture.common.exception.RaptureExceptionFactory;
import rapture.config.MultiValueConfigLoader;
import rapture.postgres.connection.DataSourceMonitor;
import rapture.repo.jdbc.TransactionAwareDataSource;
import rapture.repo.postgres.PostgresSanitizer;

import com.google.common.cache.CacheLoader;
import com.mchange.v2.c3p0.ComboPooledDataSource;

/**
 * @author bardhi
 * @since 3/30/15.
 */
public class ConnectionCacheLoader extends CacheLoader<String, ConnectionInfo> {
    private static final Logger log = Logger.getLogger(ConnectionCacheLoader.class);
    private final DataSourceMonitor monitor;

    public ConnectionCacheLoader(DataSourceMonitor monitor) {
        this.monitor = monitor;
    }

    @Override
    public ConnectionInfo load(String instanceName) throws Exception {
        ConnectionInfo info = new ConnectionInfo();
        TransactionAwareDataSource dataSource = createDataSource(instanceName);
        info.setDataSource(dataSource);
        info.setSanitizer(createSanitizer(dataSource));
        return info;
    }

    private TransactionAwareDataSource createDataSource(String instanceName) {
        String url = getConfig(instanceName, "url");
        String user = getConfig(instanceName, "user");
        validateConfig(url, user);
        log.info("Host is " + url);
        try {
            return createFromConfig(url, user, instanceName);
        } catch (PropertyVetoException e) {
            throw RaptureExceptionFactory.create("Connection to Postgres failed: " + ExceptionToString.format(e));
        }
    }

    private String getConfig(String instanceName, String property) {
        return MultiValueConfigLoader.getConfig(String.format("POSTGRES-%s.%s", instanceName, property));
    }

    private static final String DRIVER_CLASS = "org.postgresql.Driver";
    private static final int DEFAULT_CHECKOUT_TIMEOUT = 3000; // milliseconds

    private TransactionAwareDataSource createFromConfig(String url, String user, String instanceName) throws PropertyVetoException {
        
        ComboPooledDataSource dataSource = new ComboPooledDataSource();
        dataSource.setDataSourceName(createDataSourceName(instanceName));
        dataSource.setDriverClass(DRIVER_CLASS); // loads the jdbc driver
        dataSource.setJdbcUrl(url);
        dataSource.setUser(user);
        dataSource.setCheckoutTimeout(DEFAULT_CHECKOUT_TIMEOUT);
        String password = getConfig(instanceName, "password");
        if (!StringUtils.isBlank(password)) {
            dataSource.setPassword(password);
        } else {
            throw RaptureExceptionFactory.create("Password cannot be null!");
        }

        // pool size configuration
        dataSource.setInitialPoolSize(getConfigInt(instanceName, "initialPoolSize"));
        dataSource.setMinPoolSize(getConfigInt(instanceName, "minPoolSize"));
        dataSource.setMaxPoolSize(getConfigInt(instanceName, "maxPoolSize"));
        dataSource.setMaxIdleTimeExcessConnections(getConfigInt(instanceName, "maxIdleTimeExcessConnections"));

        // statement size configuration
        dataSource.setMaxStatements(getConfigInt(instanceName, "maxStatements"));
        dataSource.setStatementCacheNumDeferredCloseThreads(getConfigInt(instanceName, "statementCacheNumDeferredCloseThreads"));

        // connection testing
        dataSource.setIdleConnectionTestPeriod(getConfigInt(instanceName, "idleConnectionTestPeriod"));
        dataSource.setTestConnectionOnCheckin(Boolean.valueOf(getConfig(instanceName, "testConnectionOnCheckin")));

        monitor.monitor(dataSource);
        
        try {
            Connection connection = DriverManager.getConnection(url, user, password);
            connection.close();
        } catch (SQLException e) {
            throw RaptureExceptionFactory.create(ExceptionToString.format(e));
        }
        
        return new TransactionAwareDataSource(dataSource);
    }

    private int getConfigInt(String instanceName, String minPoolSize) {
        return Integer.parseInt(getConfig(instanceName, minPoolSize));
    }

    private String createDataSourceName(String instanceName) {
        return "Postgres-" + instanceName;
    }

    private void validateConfig(String postgresUrl, String user) {
        if (StringUtils.isBlank(postgresUrl)) {
            throw RaptureExceptionFactory.create("postgres url must be defined in the config");
        } else if (StringUtils.isBlank(user)) {
            throw RaptureExceptionFactory.create("postgres user must be defined in the config");
        }
    }

    public static PostgresSanitizer createSanitizer(DataSource dataSource) {
        DatabaseMetaDataCallback callback = new DatabaseMetaDataCallback() {
            @Override
            public String processMetaData(DatabaseMetaData dbmd) throws SQLException, MetaDataAccessException {
                return dbmd.getIdentifierQuoteString();
            }
        };
        try {
            return new PostgresSanitizer(JdbcUtils.extractDatabaseMetaData(dataSource, callback).toString());
        } catch (MetaDataAccessException e) {
            throw RaptureExceptionFactory.create("Unable to get quote identifier: " + ExceptionToString.format(e));
        }
    }
}
