/**
 * Copyright (C) 2011-2015 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package rapture.repo.integration;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import rapture.common.Activity;
import rapture.common.ActivityStorage;
import rapture.common.TableQueryResult;
import rapture.kernel.ContextFactory;
import rapture.kernel.Kernel;

import java.util.List;

import org.apache.log4j.Logger;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 * @author bardhi
 * @since 4/14/15.
 */
public class PgQueryTest {
    private static final Logger log = Logger.getLogger(PgUnversionedRepoTest.class);

    @BeforeClass
    public static void beforeClass() throws Exception {
        String cmd = "createdb " + getDbName();
        log.info(String.format("running [%s]", cmd));
        Runtime.getRuntime().exec(cmd.split(" "));
    }

    @AfterClass
    public static void afterClass() throws Exception {
        String cmd = "dropdb " + getDbName();
        log.info(String.format("running [%s]", cmd));
        Runtime.getRuntime().exec(cmd.split(" "));
    }

    public static String getDbName() {
        return "integration";
    }

    @Test
    public void testQuery() throws Exception {
        Kernel.initBootstrap();

        String user = ContextFactory.getKernelUser().getUser();

        for (int i = 0; i < 1000; i++) {
            Activity activity = new Activity();
            activity.setMax(2L);
            activity.setProgress((long) i);
            activity.setMessage("what up");
            activity.setId("" + i);
            activity.setLastSeen(12345L + i);

            ActivityStorage.add(activity, user, "adding");
        }

        String query = "SELECT max, progress, id, lastSeen WHERE id=\"1\" AND lastSeen=12346";
        TableQueryResult results = ActivityStorage.queryIndex(query);
        assertEquals(1, results.getRows().size());
        List<Object> row = results.getRows().get(0);
        assertEquals("2", row.get(0));
        assertEquals("1", row.get(1));
        assertEquals("1", row.get(2));
        assertEquals("12346", row.get(3));


        query = "SELECT max, progress, id, lastSeen WHERE id=\"1\"";
        results = ActivityStorage.queryIndex(query);
        assertEquals(1, results.getRows().size());
        List<Object> row2 = results.getRows().get(0);
        assertArrayEquals(row.toArray(), row2.toArray());


        query = "SELECT max, progress, id, lastSeen WHERE id=\"1\" AND lastSeen=12345";
        results = ActivityStorage.queryIndex(query);
        assertEquals(0, results.getRows().size());

    }
}
