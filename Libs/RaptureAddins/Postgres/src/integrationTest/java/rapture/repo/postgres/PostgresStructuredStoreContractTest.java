/**
 * Copyright (C) 2011-2015 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package rapture.repo.postgres;

import rapture.common.CallingContext;
import rapture.common.StoredProcedureParams;
import rapture.common.StoredProcedureResponse;
import rapture.kernel.ContextFactory;
import rapture.repo.jdbc.JDBCStructuredStoreContractTest;
import rapture.structured.StructuredStore;

import java.sql.Types;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;


public class PostgresStructuredStoreContractTest extends JDBCStructuredStoreContractTest {

    private CallingContext context = ContextFactory.getKernelUser();

    @Override
    public StructuredStore getStructuredStore() {
        PostgresStructuredStore p = new PostgresStructuredStore();
        p.setInstance("default");
        p.setConfig(null, "testschema");
        return p;
    }

    @Override
    public String getSchema() {
        return "testschema";
    }

    @Override
    public void testCreateStoredProcedure(){

        String storedProcSql = String.format("create function show_names() returns text as $retname$ declare retname text; " +
                "begin select name into retname from %s.people; return retname; end; $retname$ language plpgsql;", getSchema());
        Boolean b = ss.createProcedureCallUsingSql(context, storedProcSql);

        String getStoredProcCount = "select count(*) from pg_proc where proname = 'show_names'";
        List<Map<String,Object>> retList = ss.selectUsingSql(context, getStoredProcCount);
        Map<String, Object> retMap = retList.get(0);
        assertEquals((long) 1, retMap.get("count"));
    }

    @Override
    public void testDeleteStoredProcedure(){
        String storedProcSql = "drop function show_names();";
        ss.createProcedureCallUsingSql(context, storedProcSql);

        String getStoredProcCount = "select count(*) from pg_proc where proname = 'show_names'";
        List<Map<String,Object>> retList = ss.selectUsingSql(context, getStoredProcCount);
        Map<String, Object> retMap = retList.get(0);
        assertEquals((long) 0, retMap.get("count"));
    }

    @Override
    public Map<String, String> getStoredProcCreations(){
        String noParams = "CREATE FUNCTION noParamProcedure() RETURNS void AS $$ BEGIN perform 50+1; END $$ LANGUAGE plpgsql;";
        String inParam = "CREATE FUNCTION inParamProcedure(val integer) RETURNS void AS $$ BEGIN perform val+1; END $$ LANGUAGE plpgsql;";
        String outParam = "CREATE FUNCTION outParamProcedure() RETURNS int AS $retval$ DECLARE retval integer; BEGIN retval := 20; return retval; END; $retval$ LANGUAGE plpgsql;";
        String inAndOutParams = "CREATE FUNCTION inAndOutProcedure(val integer) RETURNS int AS $retval$ DECLARE retval integer; BEGIN retval := val + 1; return retval; END; $retval$ LANGUAGE plpgsql;";
        String inOutParam = "CREATE FUNCTION inOutProcedure(INOUT retval integer) RETURNS int AS $retval$ BEGIN retval := retval + 1; END; $retval$ LANGUAGE plpgsql;";

        Map<String, String> creationStrings = new HashMap<>();

        creationStrings.put("noParams", noParams);
        creationStrings.put("inParam", inParam);
        creationStrings.put("outParam", outParam);
        creationStrings.put("inAndOutParam", inAndOutParams);
        creationStrings.put("inOutParam", inOutParam);

        return creationStrings;
    }

    @Override
    public void cleanUpStoredProc(){
        // Cleanup
        String drop1 = "DROP FUNCTION noParamProcedure();";
        String drop2 = "DROP FUNCTION inParamProcedure(integer);";
        String drop3 = "DROP FUNCTION outParamProcedure();";
        String drop4 = "DROP FUNCTION inAndOutProcedure(integer);";
        String drop5 = "DROP FUNCTION inOutProcedure(integer);";

        ss.dropProcedureUsingSql(context, drop1);
        ss.dropProcedureUsingSql(context, drop2);
        ss.dropProcedureUsingSql(context, drop3);
        ss.dropProcedureUsingSql(context, drop4);
        ss.dropProcedureUsingSql(context, drop5);
    }
}
