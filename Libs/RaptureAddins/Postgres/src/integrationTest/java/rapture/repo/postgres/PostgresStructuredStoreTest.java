/**
 * Copyright (C) 2011-2015 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package rapture.repo.postgres;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import rapture.structured.StructuredFactory;

import com.google.common.collect.ImmutableMap;

public class PostgresStructuredStoreTest {

    private static final String CONFIG = "STRUCTURED {} USING POSTGRES{}";
    private static final String AUTHORITY = "idp.order";
    private static final String TABLE_NAME = "ALPHACAPTURE/FXDM/20150410/ORD0000389M";
    private static final String INDEX_NAME = "index1";

    private static Map<String, String> INITIAL_COLUMNS;
    private static Map<String, String> COLUMNS_TO_ADD;
    private static List<String> COLUMNS_TO_REMOVE;

    private PostgresStructuredStore store;

    @Before
    public void setup() {
        store = (PostgresStructuredStore) StructuredFactory.getRepo(CONFIG, AUTHORITY);
        INITIAL_COLUMNS = ImmutableMap.of(
                "intfield", "int4",
                "boolfield", "bool",
                "charfield", "varchar(100)",
                "datefield", "date");
        COLUMNS_TO_ADD = ImmutableMap.of(
                "newcharfield", "bpchar(100)",
                "newfloatfield", "float8");
        COLUMNS_TO_REMOVE = Arrays.asList("intfield", "newcharfield");
    }

    @After
    public void dropTable() {
        store.dropTable(TABLE_NAME);
        assertFalse(store.tableExists(TABLE_NAME));

        store.drop();
    }

    @Test
    public void testAll() {
        testCreateTable();
        testAddTableColumns();
        testCreateIndex();

        testPutContent();
        testSelectRows();
        testDeleteRows();

        testRemoveIndex();
        testDeleteTableColumns();
    }

    private void testCreateTable() {
        assertTrue(store.createTable(TABLE_NAME, INITIAL_COLUMNS));
    }

    private void testAddTableColumns() {
        store.addTableColumns(TABLE_NAME, COLUMNS_TO_ADD);

        // get expected columns
        Map<String, String> expectedColumns = new HashMap<>(INITIAL_COLUMNS);
        expectedColumns.putAll(COLUMNS_TO_ADD);

        checkMapsAreEqual(expectedColumns, store.describeTable(TABLE_NAME).getRows());
    }

    private void testDeleteTableColumns() {
        store.deleteTableColumns(TABLE_NAME, COLUMNS_TO_REMOVE);

        // get expected columns
        Map<String, String> expectedColumns = new HashMap<>(INITIAL_COLUMNS);
        expectedColumns.putAll(COLUMNS_TO_ADD);
        for (String columnName : COLUMNS_TO_REMOVE) {
            expectedColumns.remove(columnName);
        }

        checkMapsAreEqual(expectedColumns, store.describeTable(TABLE_NAME).getRows());
    }

    private void testCreateIndex() {
        store.createIndex(TABLE_NAME, INDEX_NAME, Arrays.asList("boolfield", "datefield"));
    }

    private void testRemoveIndex() {
        store.dropIndex(INDEX_NAME);
    }

    private void testPutContent() {
        for (int i = 1; i < 10; i++) {
            Map<String, ?> values = ImmutableMap.of(
                    "intfield", i,
                    "boolfield", i % 2 == 0,
                    "charfield", "some text " + i,
                    "datefield", "1999-01-08",
                    "newfloatfield", 1.1 * i);
            store.insertRow(TABLE_NAME, values);
        }
    }

    private void testSelectRows() {
        testSelectedColumns();
        testWhere();
        testOrderByAscend();
        testOrderByDescend();
        testQueryLimit();
    }

    private void testDeleteRows() {
        String where = "intfield > 5";
        store.deleteRows(TABLE_NAME, where);

        List<Map<String, Object>> results = store.selectRows(TABLE_NAME, null, where, null, true, -1);
        assertTrue(results.isEmpty());
    }

    private void testSelectedColumns() {
        List<String> columnNames = Arrays.asList("intfield", "boolfield", "charfield", "datefield");
        List<Map<String, Object>> results = store.selectRows(TABLE_NAME, columnNames, null, null, true, -1);
        for (Map<String, Object> row : results) {
            assertEquals(columnNames.size(), row.keySet().size());
            assertTrue(row.keySet().containsAll(columnNames));
        }
    }

    private void testWhere() {
        // search by boolfield
        String where = "boolfield = true";
        List<Map<String, Object>> results = store.selectRows(TABLE_NAME, null, where, null, true, -1);
        assertEquals(4, results.size());
        for (Map<String, Object> row : results) {
            boolean value = (boolean) row.get("boolfield");
            assertTrue(value);
        }

        // search by intfield
        where = "intfield > 5";
        results = store.selectRows(TABLE_NAME, null, where, null, true, -1);
        assertEquals(4, results.size());
        for (Map<String, Object> row : results) {
            int value = (int) row.get("intfield");
            assertTrue(value > 5);
        }
    }

    private void testOrderByAscend() {
        List<String> orderBy = Arrays.asList("intfield");
        List<Map<String, Object>> results = store.selectRows(TABLE_NAME, null, null, orderBy, true, -1);
        assertEquals(9, results.size());
        for (int i = 0; i < results.size(); i++) {
            int value = (int) results.get(i).get("intfield");
            assertEquals(i + 1, value);
        }
    }

    private void testOrderByDescend() {
        List<String> orderBy = Arrays.asList("intfield");
        List<Map<String, Object>> results = store.selectRows(TABLE_NAME, null, null, orderBy, false, -1);
        assertEquals(9, results.size());
        for (int i = 0; i < results.size(); i++) {
            int value = (int) results.get(i).get("intfield");
            assertEquals(9 - i, value);
        }
    }

    private void testQueryLimit() {
        int limit = 3;
        List<Map<String, Object>> results = store.selectRows(TABLE_NAME, null, null, null, true, limit);
        assertEquals(limit, results.size());
    }

    private void checkMapsAreEqual(Map<String, String> map1, Map<String, String> map2) {
        assertEquals(map1.size(), map2.size());
        for (String key : map1.keySet()) {
            assertEquals(map1.get(key), map2.get(key));
        }
    }

}
