/**
 * Copyright (C) 2011-2015 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package rapture.repo.jdbc;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.List;

import org.junit.Test;

import com.google.common.collect.Iterables;

import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.expression.Expression;
import net.sf.jsqlparser.parser.CCJSqlParserUtil;

public class PreparedExpressionConverterTest {

    @Test
    public void testNumber() throws JSQLParserException {
        String where = "col1=5 and tbl.col2>=-3.5 and col3 in (1, 2, 3) and col4 between -2 and 10 and col5 != 8";
        PreparedExpressionConverter converter = getConverter(where);

        String expectedWhere = "col1 = ? AND tbl.col2 >= ? AND col3 IN (?, ?, ?) AND col4 BETWEEN ? AND ? AND col5 != ?";
        assertEquals(expectedWhere, converter.getBuffer().toString());

        List<? extends Number> expectedValues = Arrays.asList(5, -3.5, 1, 2, 3, -2, 10, 8);
        assertTrue(areNumbersEqual(expectedValues, converter.getValues()));
    }

    @Test
    public void testString() throws JSQLParserException {
        String where = "col1='str1' or lower(col2) like 'a%c' and col3 not like '_b_' and col4 in ('a', 'b', 'c') and col5 between 'aaa' and 'zzz'";
        PreparedExpressionConverter converter = getConverter(where);

        String expectedWhere = "col1 = ? OR lower(col2) LIKE ? AND  NOT col3 LIKE ? AND col4 IN (?, ?, ?) AND col5 BETWEEN ? AND ?";
        assertEquals(expectedWhere, converter.getBuffer().toString());

        List<String> expectedValues = Arrays.asList("str1", "a%c", "_b_", "a", "b", "c", "aaa", "zzz");
        assertTrue(Iterables.elementsEqual(expectedValues, converter.getValues()));
    }

    @Test
    public void testBool() throws JSQLParserException {
        String where = "col1 = true or col2 = false";
        PreparedExpressionConverter converter = getConverter(where);

        String expectedWhere = "col1 = true OR col2 = false";
        assertEquals(expectedWhere, converter.getBuffer().toString());

        assertTrue(converter.getValues().isEmpty());
    }

    @Test
    public void testDate() throws JSQLParserException {
        String where = "date1 = '2008-11-11' and time1 > '2008-11-11 13:23:44' and date2 between '2008-11-11' and '2009-01-30'";
        PreparedExpressionConverter converter = getConverter(where);

        String expectedWhere = "date1 = ? AND time1 > ? AND date2 BETWEEN ? AND ?";
        assertEquals(expectedWhere, converter.getBuffer().toString());

        List<String> expectedValues = Arrays.asList("2008-11-11", "2008-11-11 13:23:44", "2008-11-11", "2009-01-30");
        assertTrue(Iterables.elementsEqual(expectedValues, converter.getValues()));
    }

    @Test
    public void testNull() throws JSQLParserException {
        String where = "col1 is null and col2 is not null";
        PreparedExpressionConverter converter = getConverter(where);

        String expectedWhere = "col1 IS NULL AND col2 IS NOT NULL";
        assertEquals(expectedWhere, converter.getBuffer().toString());

        assertTrue(converter.getValues().isEmpty());
    }

    @Test
    public void testSubSelect() throws JSQLParserException {
        String where = "col1 in (select max(sub_col1) from table2) and col2 = (select sub_col2 from table2 where sub_col3='str')";
        PreparedExpressionConverter converter = getConverter(where);

        String expectedWhere = "col1 IN (SELECT max(sub_col1) FROM table2) AND col2 = (SELECT sub_col2 FROM table2 WHERE sub_col3 = ?)";
        assertEquals(expectedWhere, converter.getBuffer().toString());

        List<String> expectedValues = Arrays.asList("str");
        assertTrue(Iterables.elementsEqual(expectedValues, converter.getValues()));
    }

    @Test
    public void testFunc() throws JSQLParserException {
        String where = "date1 < now() and len(col2) < 10";
        PreparedExpressionConverter converter = getConverter(where);

        String expectedWhere = "date1 < now() AND len(col2) < ?";
        assertEquals(expectedWhere, converter.getBuffer().toString());

        List<? extends Number> expectedValues = Arrays.asList(10);
        assertTrue(areNumbersEqual(expectedValues, converter.getValues()));
    }

    private PreparedExpressionConverter getConverter(String where) throws JSQLParserException {
        SelectConverter selectConverter = new SelectConverter();
        PreparedExpressionConverter expressionConverter = new PreparedExpressionConverter(selectConverter,
                selectConverter.getBuffer(), selectConverter.getContext());
        selectConverter.setExpressionVisitor(expressionConverter);

        Expression expression = CCJSqlParserUtil.parseCondExpression(where);
        expression.accept(expressionConverter);
        System.out.println(expressionConverter);
        return expressionConverter;
    }

    private boolean areNumbersEqual(List<? extends Number> col1, List<? super Object> col2) {
        if(col1.size() != col2.size()) {
            return false;
        }
        for(int i = 0; i < col1.size(); i++) {
            if(!String.valueOf(col1.get(i)).equals(String.valueOf(col2.get(i)))) {
                return false;
            }
        }
        return true;
    }
}