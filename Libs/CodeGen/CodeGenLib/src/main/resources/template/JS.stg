group T;

// JavaScript
//
JSapi(apiHeader, apilist, versionMajor, versionMinor, versionMicro) ::= <<
//
// The MIT License (MIT)
//
// Copyright (C) 2011-2016 Incapture Technologies LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.


// Autogenerated Javascript API for Rapture
//

var http = require('http');
var MD5 = require('./md5.js');
var FormData = require('form-data');
var querystring = require('querystring');
var site = "localhost";
var port = '8665';
var ctx = {};

exports.getContext = function() {
    return ctx;
}

exports.setConnection = function(s, p) {
     site = s;
     port = p;
}

function _genCall(prefix, fnname, params, callback) {
  var realparams = JSON.stringify(params);

  var postData = querystring.stringify({
    FUNCTION: fnname.toUpperCase(),
    PARAMS: realparams
  });
  var form = new FormData();
  form.append('FUNCTION', fnname.toUpperCase());
  form.append('PARAMS', realparams);
  var options = {
    host: site,
    path: '/rapture/' + prefix.toLowerCase(),
    port: port,
    headers: form.getHeaders(),
    method: 'POST'
  }

  if (ctx.hasOwnProperty('session') && ctx.session.hasOwnProperty('contextId')) {
    options.headers['x-rapture'] = ctx.session.contextId;
  }


  var dcallback = function(response) {
    var str = '';
    response.on('data', function(chunk) {
      str += chunk;
    });
    response.on('end', function() {
      callback(str);
    });
  }

  var req = http.request(options, dcallback);
  form.pipe(req);
  //req.end();
};


function _login(password, callback) {
	var hashPassword = MD5(password);
	var combinedBit = hashPassword + ":" + ctx.session.salt;
	var senderPassword = MD5(combinedBit);

	var sendParams = {
                       "user" : ctx.username,
                       "digest" : senderPassword,
                       "context" : ctx.session.contextId,
                       "clientApiVersion": {"major": <versionMajor>, "minor": <versionMinor>, "micro": <versionMicro> } };

     _genCall('login', 'LOGIN', sendParams,  callback);
};

exports.login = function(username, password, callback) {
	ctx.username = username;
	var sessionParams = { "user" : username };
	_genCall('login', 'CONTEXT', sessionParams, function(data) {
	    var info = JSON.parse(data);
	    if (info.inError) {
	    	callback(info.message, null);
	   	} else {
	    	ctx.session = info.response;
	    	_login(password, function(d) {
	    		var info = JSON.parse(d);
	    		if (info.inError) {
	    		   callback(info.response.message, null);
	    		} else {
	    		   callback(null, info.response);
	    		}
	    	});
	    }
	});
};

exports.getClientApiVersion = function(callback) {
          callback( null, { "major":<versionMajor>, "minor":<versionMinor>, "micro":<versionMicro>});
         };

<apiHeader; separator="\n">

<apilist; separator=",\n">

>>

JSExportSetup(apiType) ::= <<
   exports.<apiType> = {};
>>

JSApiEntry(apitype, name, paramNames, params) ::= <<
    // Function for <name>

exports.<apitype>.<name> = function(<paramNames; separator=", "><if(paramNames)>, <endif>callback) {
                var callParams = {};
                <params; separator="\n">
                var theName = "<name>";
                _genCall("<apitype>", theName, callParams, function(resp) {
                	var d  = JSON.parse(resp);
                	if  (d.inError) {
                		callback(d.message, null);
                	} else {
                		ctx.lastStats = d.perfStats;
                		callback(null, d.response);
                	}
                });
    }
>>

JSParam(name) ::= <<
   callParams.<name> = <name>;
>>
