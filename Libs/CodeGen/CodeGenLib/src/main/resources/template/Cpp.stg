group T;

CppApiParam(type, name) ::= <<
  <type> <name>
>>

CppApiSetter(type, name) ::= <<
   params["<name; format="uncapitalize">"] = <name>;
>>

CppApiPayloadParam(type, name) ::= <<
  <type> <name; format="upcase">
>>

CppApiType(apitype, name, paramPayload, ret) ::= <<
   type RaptApi<apitype; format="upcase"><name; format="upcase"> struct {
       Context RaptApiLoginPayload `json:"context"`
       <paramPayload; separator="\n">
   }
   
<if(ret)>
   type RaptApi<apitype; format="upcase"><name; format="upcase">Response struct {
      Response <ret> `json:"response"`
     InError bool `json:"inError"`
  }
<endif>
>>

CppApiH(apitype, name, apiParams, setterParams, ret) ::= <<
  json <name; format="upcase">(<apiParams; separator=",">);
>>

CppApiFn(apitype, name, apiParams, setterParams, ret) ::= <<
  json <apitype; format="upcase">Api::<name; format="upcase">(<apiParams; separator=",">) {
  	json params;
  	<setterParams; separator="\n">
  	json ret = _connection.performCall("<apitype; format="lower">","<name; format="upper">", params);
  	return ret["response"];
  }

>>

CppApiSrc(api, types, fns) ::= <<
// Autogenerated Cpluscplus api


#include "<api>.h"

    <fns; separator="\n">
>>

CppApiHdr(api, types, fns) ::= <<
// Autogenerated API

#include \<list\>
#include \<map\>
#include \<set\>
#include "../connection.hpp"
#include "../json.hpp"

class <api; format="upcase">Api {
	private:
		RaptureConnection _connection;
	public:
		<api; format="upcase">Api(RaptureConnection& connection) : _connection(connection) {}
		
		// Functions
		<fns; separator="\n">
};
>>

CppStruct(name, fields) ::= <<
typedef struct  {
<fields; separator="\n">
} <name>;
>>

CppStructField(name, type) ::= <<
   <type> <name; format="upcase">;     
>>

CppStructFile(structs) ::= <<
#ifndef TYPES_H
#define TYPES_H
#include "../common.h"

// Types file
<structs; separator="\n">

#endif
>>

