/**
 * The MIT License (MIT)
 *
 * Copyright (C) 2011-2016 Incapture Technologies LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file is autogenerated and any changes will be overwritten
 */

package rapture.<sdkPackagePrefix>common.shared.<apitype; format="lower">;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.net.HttpURLConnection;

import rapture.common.exception.RaptureExceptionFactory;
import rapture.server.BaseDispatcher;
import rapture.common.DispatchReturn;
import rapture.common.Messages;

public enum Dispatch<apitype; format="upcase">Function {
    <dispatcher; separator=",\n">;

        private BaseDispatcher dispatcher;	
	
    \<T extends BaseDispatcher\> Dispatch<apitype; format="upcase">Function(Class\<T\> klass) {
        try {
            this.dispatcher = klass.newInstance();
        } catch (InstantiationException | IllegalAccessException e) {
            throw RaptureExceptionFactory.create(HttpURLConnection.HTTP_INTERNAL_ERROR, Messages.getMessage("Api", "ErrorInitDispatch", null, null),  e);
        }
    }

    public DispatchReturn executeDispatch(String params, HttpServletRequest req, HttpServletResponse resp) {
        return this.dispatcher.dispatch(params, req, resp);
    }	
}
