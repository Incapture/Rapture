/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten.
 */

package <package>;

import rapture.common.RaptureConstants;
import rapture.common.RaptureURI;
import rapture.object.storage.StorageLocationFactory;

import org.apache.log4j.Logger;
<if (encodeImport)>
import <encodeImport>;
<endif>

public class <name>PathBuilder {
    <fields; separator="\n">
    
    private static final Logger log = Logger.getLogger(<name>PathBuilder.class);

    public <name>PathBuilder() {
        
    }

    public String buildStoragePath() {
        StringBuilder builder = new StringBuilder();
        <adders; separator="\n">
        String ret = builder.toString();

        /**
           Multiple instances of : is illegal eg. foo://bar/baz/foo://bill/bob
           as is : anywhere after / eg. /foo:bar
        **/

        int start = ret.indexOf(":");
        if ((start != ret.lastIndexOf(":")) || (start > ret.indexOf("/"))) {
            String ret2 = ret.replaceAll("/[^/]*:", "");
            log.warn("Illegal storage path. "+ret+" - converted to "+ret2);
            ret = ret2;
        }

        /**
           Eliminate any multiple instances of / except at start or after : which is limited to two.  
           ////foo///bar becomes //foo/bar
           foo:///bar// becomes foo://bar/
           foo///bar becomes foo/bar 
        **/

        if (ret.length() > 0) {
            ret = ret.substring(0, start+2) + (ret.substring(start+2).replaceAll("//+","/"));
            return ret.substring(0, ret.length()-1);
        } else {
            return ret;
        }
    }

<if (encodeMethod)>
    public String encode(String raw) {
        return <encodeMethod>(raw);
    }
<endif>

    public RaptureURI buildStorageLocation() {
        return StorageLocationFactory.createStorageLocation(getRepoName(), getPrefix(), buildStoragePath());
    }

<if(sdkName)>
    private static final String PREFIX = "";
<else>
    private static final String PREFIX = <prefix> + "/";
<endif>

    public static String getPrefix() {
        return PREFIX;
    }

    public static String getRepoName() {
<if(sdkName)>
        return "<sdkName>.<name; format="lower">";
<elseif(isIndexable)>
        return("<name>");
<elseif(repoNameOverride)>
        return <repoNameOverride>;
<else>
        return RaptureConstants.CONFIG_REPO;
<endif>


    }

}