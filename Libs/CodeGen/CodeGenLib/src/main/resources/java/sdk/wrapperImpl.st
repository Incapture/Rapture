/**
 * The MIT License (MIT)
 *
 * Copyright (C) 2011-2016 Incapture Technologies LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

package rapture.<sdkname>.kernel;

import org.apache.log4j.Logger;

import java.util.List;
import java.util.Map;

import rapture.<sdkname>.common.api.<apitype>Api;
import rapture.common.CallingContext;
import rapture.common.RaptureEntitlementsContext;

import rapture.<sdkname>.server.hooks.CallName;
import rapture.kernel.Kernel;
import rapture.kernel.KernelApi;
import rapture.common.model.BasePayload;
import rapture.<sdkname>.server.EntitlementSet;
import rapture.kernel.context.ContextValidator;

<typeimports>
<payloadImports; separator="\n">

/**
 * This class is a wrapper around the class {@link <apitype>ApiImpl}. This is an auto-generated class that gives us the ability to add hooks such as entitlmeent
 * checks before each function call in the implementation. Since we always want to call these hooks, an instance of this class should be used 
 * (in {@link Kernel}) instead of using the implementation directly.
 * implementation directly. 
 *
 */
@SuppressWarnings("all")
public class <apitype>ApiImplWrapper implements <apitype>Api, KernelApi {
    private static final Logger log = Logger.getLogger(<apitype>ApiImplWrapper.class);
    private <apitype>ApiBase apiImpl;

    public <apitype>ApiImplWrapper(<sdkname; format="upcase">Kernel aKernel, Kernel kernel) throws InstantiationException, IllegalAccessException, ClassNotFoundException  {
        apiImpl = (<apitype>ApiBase) Class.forName("rapture.<sdkname>.kernel.<apitype>ApiImpl").newInstance();
        apiImpl.setKernels(aKernel, kernel);
    }

    /**
     * Returns the underlying implementation object. This is a temporary workaround, it should not be normally used!
     * @return {@link <apitype>}
     */
    public <apitype>ApiBase getTrusted() {
        return apiImpl;
    }

    @Override
    public void start() {
        apiImpl.start();
    }

    <apis; separator="\n">
}
