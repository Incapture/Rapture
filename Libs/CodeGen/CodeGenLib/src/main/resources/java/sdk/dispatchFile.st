/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This file is autogenerated and any changes will be overwritten
 */

package rapture.<sdkname>.common.shared.<apitype; format="lower">;
import java.util.List;
import java.util.Map;

import rapture.<sdkname>.server.EntitlementSet;
<imports; separator="\n">
<retImport>
import rapture.server.ArgumentParser;
import rapture.<sdkname>.common.api.<apitype>Api;
import rapture.kernel.Kernel;
import rapture.common.Messages;
import rapture.server.BaseDispatcher;
import rapture.common.model.GeneralResponse;
import rapture.common.CallingContext;
import rapture.common.DispatchReturn;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import rapture.<sdkname>.kernel.<sdkname; format="upcase">Kernel;
import java.net.HttpURLConnection;
import rapture.common.exception.RaptureExceptionFactory;
import rapture.common.exception.RaptureException;

@SuppressWarnings("all")
public class <name; format="upcase">Dispatch extends BaseDispatcher {
	
	@Override
	public DispatchReturn dispatch(String params, HttpServletRequest req, HttpServletResponse resp) {
		try {
			<name; format="upcase">Payload payload = ArgumentParser.parsePayload(params, <name; format="upcase">Payload.class);
			CallingContext sessionContext = validateSession(req, payload); // will throw RaptNotLoggedInException if not a valid logged in context
			
			preHandlePayload(sessionContext, payload,  EntitlementSet.<apitype; format="upcase">_<name>.getPath());
            <sdkname; format="upcase">Kernel kernel = (<sdkname; format="upcase">Kernel) Kernel.getInstalledKernel("<sdkname; format="lower">");
            if (kernel != null) {
			 <ret> rsp = kernel.get<apitype>().<name>(sessionContext == null ? payload.getContext() : sessionContext <if(rest(apiparams))>, <rest(apiparams):payset(); separator=","><endif>);
			 String ret = processResponse(new GeneralResponse(rsp));
			 return new DispatchReturn(sessionContext, ret);
			} else {
			    throw RaptureExceptionFactory.create(HttpURLConnection.HTTP_INTERNAL_ERROR, Messages.getMessage("Api", "NoKernelFound", null, null));
		    }
		}
		catch (RaptureException e) {
			return new DispatchReturn(null, error(e));
        } catch (Exception e) {
	    return new DispatchReturn(null, error(RaptureExceptionFactory.create(HttpURLConnection.HTTP_INTERNAL_ERROR, Messages.getMessage("Api", "ServerError", null, null), e)));
        }
    }

}
