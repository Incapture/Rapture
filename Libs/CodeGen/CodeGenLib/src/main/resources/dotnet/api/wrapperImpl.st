/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 * 
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */

/**
 * This is an autogenerated file. You should not edit this file as any changes
 * will be overwritten.
 */

package rapture.kernel;

import org.apache.log4j.Logger;

import java.util.List;
import java.util.Map;

import rapture.common.api.<apitype>Api;
import rapture.common.CallingContext;
import rapture.common.RaptureEntitlementsContext;

import rapture.common.hooks.CallName;

import rapture.common.model.BasePayload;
import rapture.common.EntitlementSet;
import rapture.kernel.context.ContextValidator;

<typeimports>
<payloadImports; separator="\n">

/**
 * This class is a wrapper around the class {@link <apitype>ApiImpl}. This is an auto-generated class that gives us the ability to add hooks such as entitlmeent
 * checks before each function call in the implementation. Since we always want to call these hooks, an instance of this class should be used 
 * (in {@link Kernel}) instead of using the implementation directly.
 * implementation directly. 
 *
 */
@SuppressWarnings("all")
public class <apitype>ApiImplWrapper implements <apitype>Api, KernelApi {
    private static final Logger log = Logger.getLogger(<apitype>ApiImplWrapper.class);
    private <apitype>ApiImpl apiImpl;

    public <apitype>ApiImplWrapper(Kernel kernel) {
        apiImpl = new <apitype>ApiImpl(kernel);
    }

    /**
     * Returns the underlying implementation object. This is a temporary workaround, it should not be normally used!
     * @return {@link <apitype>}
     */
    public <apitype>ApiImpl getTrusted() {
        return apiImpl;
    }

    @Override
    public void start() {
        apiImpl.start();
    }

    <apis; separator="\n">
}
