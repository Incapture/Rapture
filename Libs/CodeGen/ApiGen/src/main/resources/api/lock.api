[The Lock API contains functionality for working with semaphore locks.]

api(Lock) {
    [Retrieves the lock providers for a given authority.]
    @entitle=/admin/lock
    @public List(RaptureLockConfig) getLockManagerConfigs(String managerUri);
 
    [Creates a lock provider with an authority.]
    @entitle=/admin/lock
    @public RaptureLockConfig createLockManager(String managerUri, String config, String pathPosition);

    [Returns true if the lock providers found.]
    @entitle=/admin/lock
    @public Boolean lockManagerExists(String managerUri);

    [Gets a lock provider by its Uri.]
    @entitle=/admin/lock/$f(managerUri)
    @public RaptureLockConfig getLockManagerConfig(String managerUri);
   
    [Deletes a lock provider by its Uri.]
    @entitle=/admin/lock/$f(managerUri)
    @public void deleteLockManager(String managerUri);

    [Acquire a lock. Returns a LockHandle, which you need to pass to releaseLock when calling it. If
    unable to acquire the lock, returns null.]
    @entitle=/admin/lock/$f(managerUri)
    @public LockHandle acquireLock(String managerUri, String lockName, long secondsToWait, long secondsToKeep);
    
    [Releases a lock.]
    @entitle=/admin/lock/$f(managerUri)
    @public Boolean releaseLock(String managerUri, String lockName, LockHandle lockHandle);

    
    [This is a dangerous variant of release lock that will kick someone else off the lock queue.]
    @entitle=/admin/lock/$f(managerUri)
    @public void forceReleaseLock(String managerUri, String lockName);
    
}
