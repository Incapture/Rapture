
[For manipulating Rapture sheet objects.]
api(Sheet) {
   
   [Creates a sheet repository.]
   @entitle=/repo/write
   @public void createSheetRepo(String sheetURI, String config);
   
   [Gets the sheet repository's config metadata.]
   @entitle=/repo/read
   @public SheetRepoConfig getSheetRepoConfig(String sheetURI);
   
   [Gets repository config metadata for all sheets.]
   @entitle=/repo/read
   @public List(SheetRepoConfig) getSheetRepoConfigs();

   [Creates an empty sheet at the given URI. If the sheet exists it is unaffected.]
   @entitle=/data/write/$f(sheetURI)
   @public RaptureSheet createSheet(String sheetURI);
   
   [Deletes a sheet and all its contents.]
   @entitle=/data/write/$f(sheetURI)
   @public RaptureSheet deleteSheet(String sheetURI);
  
   [Checks whether a sheet exists at a given URI.]
   @entitle=/repo/list
   @public Boolean sheetExists(String sheetURI);

   [This method removes a Sheet Repository and its data from the Rapture system. There is no undo. It does not delete the sheets stored in the repo, so calling this while there are still sheets inside this repo will cause a memory leak.] 
   @entitle=/repo/write
   @public void deleteSheetRepo(String repoURI);

   [This API call can be used to determine whether a given type exists in a given authority.]
   @entitle=/repo/list
   @public Boolean sheetRepoExists(String repoURI);

   [Return full pathnames for an entire subtree as a map of path to RFI]
   @entitle=/data/read/$f(uriPrefix)
   @public Map(String,RaptureFolderInfo) listSheetsByUriPrefix(String uriPrefix, int depth);

   [Removes a folder and its contents recursively, including empty subfolders. Returns a list of the sheets and folders removed.]
   @entitle=/admin/script
   @public List(String) deleteSheetsByUriPrefix(String uriPrefix);
      
   [Assigns the value passed to the specified cell.]
   @entitle=/data/write/$f(sheetURI)
   @public String setSheetCell(String sheetURI, int row, int column, String value, int tabId);
   
   [Sets values in bulk for a rectangle of cells. The inputs are specified as a 1-dimensional list, and the list is wrapped based on the width parameter.]
   @entitle=/data/write/$f(sheetURI)
   @public void setBlock(String sheetURI, int startRow, int startColumn, List(String) values, int height, int width, int tabId);
   
   [Retrieves the data in a cell.]
   @entitle=/data/read/$f(sheetURI)
   @public String getSheetCell(String sheetURI, int row, int column, int tabId);

   [Returns all the cells in a sheet. The epoch is the callers best known understanding as to the state of its knowledge of the sheet. Starting at 0 retrieves every cell. The
    latest epoch is returned in the response to this call. Once you know the epoch you can call this method to give the updates since that
    epoch.]
   @entitle=/data/read/$f(sheetURI)
   @public List<RaptureSheetCell> findCellsByEpoch(String sheetURI, int tabId, Long epoch);
   
   [Get this sheet in a display form - filling in the blanks, and setting the format where appropriate, and passing a list
     of the formats in play. This should be sufficient for a client side renderer to do the necessary work with no further calls needed
   ]
   @entitle=/data/read/$f(sheetURI)
   @public SheetAndMeta getSheetAndMeta(String sheetURI);
    
   [Gets all the style objects associated with this sheet. See also createStyle.]
   @entitle=/data/read/$f(sheetURI)
   @public List(RaptureSheetStyle) getAllStyles(String sheetURI);
   
   [Removes a style associated with this sheet.]
   @entitle=/data/write/$f(sheetURI)
   @public void removeStyle(String sheetURI, String styleName);
   
   [Creates a style for this sheet. This can be used by GUIs when displaying the sheet.]
   @entitle=/data/write/$f(sheetURI)
   @public RaptureSheetStyle createStyle(String sheetURI, RaptureSheetStyle style);
   
   [Get all the scripts associated with this sheet. See also: createScript.]
   @entitle=/data/read/$f(sheetURI)
   @public List(RaptureSheetScript) getAllScripts(String sheetURI);
   
   [ Removes a script associated with this sheet.]
   @entitle=/data/write/$f(sheetURI)
   @public void removeScript(String sheetURI, String scriptName);
   
   [Creates a Reflex script and associates it with a given sheet. This script gets embedded into the sheet, i.e. it cannot be accessed as a standard Rapture script using the Script API's retrieveScript method. See also runScriptOnSheet.]
   @entitle=/data/write/$f(sheetURI)
   @public RaptureSheetScript createScript(String sheetURI, String scriptName, RaptureSheetScript script);
   
   [Runs a script that is associated with this sheet.]
   @entitle=/data/write/$f(sheetURI)
   @public void runScriptOnSheet(String sheetURI, String scriptName);
   
   [Gets a particular script associated with this sheet.]
   @entitle=/data/read/$f(sheetURI)
   @public RaptureSheetScript getSheetScript(String sheetURI, String scriptName);
   
   [Returns a String with Reflex code that can be used to create the entire sheet. This is useful if you want to clone a sheet onto a different instance of Rapture, or store it for installation as a feature.]
   @entitle=/data/read/$f(sheetURI)
   @public String exportSheetAsScript(String sheetURI);
   
   [Get all the ranges of interest that are marked on this sheet. See also: getSheetNamedSelection.]
   @entitle=/data/read/$f(sheetURI)
   @public List(RaptureSheetRange) getSheetNamedSelections(String sheetURI);
   
   [Deletes a range associated with this sheet.]
   @entitle=/data/write/$f(sheetURI)
   @public void deleteSheetNamedSelection(String sheetURI, String rangeName);
   
   [Creates a range in the sheet. A range is a named set of sequential rows and columns.]
   @entitle=/data/write/$f(sheetURI)
   @public RaptureSheetRange createSheetNamedSelection(String sheetURI, String rangeName, RaptureSheetRange range);
   
   [Get all the notes associated with this sheet. See also createSheetNote.]
   @entitle=/data/read/$f(sheetURI)
   @public List(RaptureSheetNote) getSheetNotes(String sheetURI);
   
   [Deletes a note associated with this sheet.]
   @entitle=/data/write/$f(sheetURI)
   @public void deleteSheetNote(String sheetURI, String noteId);
   
   [Adds a note to a sheet. One sheet can have multiple notes associated with it. A note is a text note with information about who created it and when.]
   @entitle=/data/write/$f(sheetURI)
   @public RaptureSheetNote createSheetNote(String sheetURI, RaptureSheetNote note);
   
   [Copies everything from one sheet to another. This is currently only allowed within sheets that have the same authority.]
   @entitle=/data/write/$f(newSheetURI)
   @public void cloneSheet(String sheetURI, String newSheetURI);
   
   [Get the contents of a specified range on a sheet.]
   @entitle=/data/read/$f(sheetURI)
   @public List(RaptureSheetRow) getSheetNamedSelection(String sheetURI, String rangeName);
   
   [Deletes an entire column in the sheet, in all tabIds.]
   @entitle=/data/write/$f(sheetURI)
   @public void deleteSheetColumn(String sheetURI, int column);
   
   [Deletes an entire row in the sheet, in all tabIds.]
   @entitle=/data/write/$f(sheetURI)
   @public void deleteSheetRow(String sheetURI, int row);
   
   [Deletes data stored in a given cell.]
   @entitle=/data/write/$f(sheetURI)
   @public void deleteSheetCell(String sheetURI, int row, int column, int tabId);
   
}
