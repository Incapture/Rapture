[Search related functions for indexed data and fast retrieval]
api(Search) {

    [Search for data using a Lucene compliant query string query.  Default size of result set returned is 10]
    @entitle=/search/read
    @public SearchResponse search(String query);
    
    [Search for data using a Lucene compliant query string query.  This will return a cursor for scrolling thru the results.  The initial call should pass in the cursor argument as null or empty, but subsequent calls should use the previously returned cursorId.  The size parameter specifies how many results should be returned per call]
    @entitle=/search/read
    @public SearchResponse searchWithCursor(String cursorId, int size, String query);

    [Search for data using a Lucene compliant query string query.  Default size of result set returned is 10]
    @entitle=/search/read
    @public SearchResponse qualifiedSearch(String searchRepo, List<String> types, String query);
    
    [Search for data using a Lucene compliant query string query.  This will return a cursor for scrolling thru the results.  The initial call should pass in the cursor argument as null or empty, but subsequent calls should use the previously returned cursorId.  The size parameter specifies how many results should be returned per call]
    @entitle=/search/read
    @public SearchResponse qualifiedSearchWithCursor(String searchRepo, List<String> types, String cursorId, int size, String query);

    [Validates repository; requires write permission because it can cause files/tables to be created on first use.]
    @entitle=/repo/write
    @public Boolean validateSearchRepo(String searchRepoUri);
    
    [A FTSearchRepository is used to store full text search repos.]
    @entitle=/repo/write
    @public void createSearchRepo(String searchRepoUri, String config);

    [This API call can be used to determine whether a given repository exists.]
    @entitle=/repo/list
    @public Boolean searchRepoExists(String searchRepoUri);

    [Retrieves the configuration string for the given search repository.]
    @entitle=/repo/read
    @public SearchRepoConfig getSearchRepoConfig(String searchRepoUri);
       
    [Retrieves search repositories]
    @entitle=/repo/read
    @public List(SearchRepoConfig) getSearchRepoConfigs();

    [This method removes a search repository and its data from the Rapture system. There is no undo.] 
    @entitle=/repo/write
    @public void deleteSearchRepo(String searchRepoUri);

    [This method rebuilds the search index associated with a repo (authority) by dropping it and recreating it (asynchronously). The repoUri passed in must have the scheme as the prefix e.g. document://myrepo or series://myrepo2]
    @entitle=/repo/write
    @public void rebuildRepoIndex(String repoUri);
    
    [This method just drops the search index associated with a repo (authority).  The repoUri passed in must have the scheme as the prefix e.g. document://myrepo or series://myrepo2. It is done asynchronously.]
    @entitle=/repo/write
    @public void dropRepoIndex(String repoUri);
    
    [Initialize all search repos]
    @entitle=/search/admin
    @public void startSearchRepos();
}