
[The Relationship API contains low-level methods for making connections between data and metadata. It can be used to track provenance, model association, or to impose a secondary organization of data.]

api(Relationship) {

   [Creates a repository in which to store relationship information.]
   @entitle=/relationship/admin
   @public void createRelationshipRepo(String relationshipRepoURI, String config);

   [Retrieves blob repository information]
   @entitle=/repo/read
   @public RelationshipRepoConfig getRelationshipRepoConfig(String blobRepoURI);
   
   [Retrieves relationship repository configurations.]
   @entitle=/repo/read
   @public List(RelationshipRepoConfig) getAllRelationshipRepoConfigs();
    
   [This method removes a Relationship Repository and its data from the Rapture system. There is no undo.] 
   @entitle=/repo/write
   @public void deleteRelationshipRepo(String repoURI);
   
   [This api call can be used to determine whether a given repo exists.]
   @entitle=/repo/list
   @public Boolean doesRelationshipRepoExist(String repoURI);

   [This API call can be used to determine whether a given relationship type exists in a given authority.]
   @entitle=/repo/list
   @public Boolean doesRelationshipExist(String relationshipURI);

   [Stores a relationship link and returns its URI.]
   @entitle=/relationship/admin
   @public String createRelationship(String relationshipAuthorityURI, String fromURI, String toURI, String label, Map(String,String) properties);

   [Retrieves a relationship link.]
   @entitle=/relationship/admin
   @public RaptureRelationship getRelationship(String relationshipURI);

   [Deletes a relationship link.]
   @entitle=/relationship/admin
   @public void deleteRelationship(String relationshipURI);
   
   [Gets all the relationship links with the specified Rapture resource as the "from" half of the link.]
   @entitle=/relationship/admin
   @public List(RaptureRelationship) getOutboundRelationships(String relationshipRepoURI, String fromURI);
   
   [Gets all the relationship links with the specified Rapture resource as the "to" half of the link.]
   @entitle=/relationship/admin
   @public List(RaptureRelationship) getInboundRelationships(String relationshipRepoURI, String toURI);
   
   [Gets all the relationship links with the specified label.]
   @entitle=/relationship/admin
   @public List(RaptureRelationship) getLabledRelationships(String relationshipRepoURI, String relationshipLabel);   
   
   [Get children (nodes) in a relationship store. Relationship stores are only one level deep, so this API exists only to provide a consistent API as other repository types. This method is not useful except when making generic repository browsers.]
   @entitle=/relationship/admin
   @public List(RaptureFolderInfo) getChildren(String prefix);
   
   [Return full pathnames for an entire subtree as a map of path to RFI]
   @entitle=/relationship/admin
   @public Map(String,RaptureFolderInfo) getAllChildrenMap(String prefix);

   [Gets relationships from a given node.]
   @entitle=/relationship/admin
   @public RaptureRelationshipRegion getRelationshipCenteredOn(String relationshipNodeURI, Map(String, String) options);
   
}


