a = 2;
assert(a == 2);
assert(typeof(a) == 'integer');

b = 2L;
assert (b == 2);
assert(typeof(b) == 'integer');

c = 2.0;
assert (c == 2);
assert(typeof(c) == 'number');

d = 2147483647;
assert (d == 2147483647);
assert(typeof(d) == 'integer');

e = 2147483649L;
assert (e == 2147483649L);
assert(typeof(e) == 'integer');

f = d + 10;
println(f);
// assert (f == 2147483657L);
// assert(typeof(f) == 'number');

g = a / 2;
assert (g == 1);
assert(typeof(g) == 'integer');

h = c / a;
assert (h == 1.0);
assert(typeof(h) == 'number');

x = 1 / 3;

try do
   y = x * 2;
   assert(typeof(y) == 'number');
   println(y);
end
catch e do 
   assert(false);
end

p = 3 ^ 2;
assert(p == 9);
assert(typeof(p) == 'integer');

// Exponents that are not positive integers currently result in Doubles.
q = 9 ^ 0.5;
assert(q == 3);
assert(typeof(q) == 'number');

try do
   y = x + 2;
   println(y);
   assert(typeof(y) == 'number');
end
catch e do 
   assert(false);
end

try do
   y = x - 2;
   println(y);
   assert(typeof(y) == 'number');
end
catch e do 
   assert(false);
end

try do
    z = a / 0;
    assert(false);
end
catch e do 
   println("Expected exception");
end
