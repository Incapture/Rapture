/**
 * The MIT License (MIT)
 *
 * Copyright (C) 2011-2016 Incapture Technologies LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
//
// Copyright (C) 2011-2012 Incapture Technologies LLC
//
// This is an autogenerated license statement. When copyright notices appear below
// this one that copyright supercedes this statement.
//
// Unless required by applicable law or agreed to in writing, software is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.
//
// Unless explicit permission obtained in writing this software cannot be distributed.
//


// A file to test out maps in Reflex

// The null map

a = {};
a['Hello'] = "One two three";

println(a);

// A map with initialization

b = { 'fred' : 100, "array" : [ "one", "two", "three" ] };

println(b);

println("Second index of inner array is " + b["array"][1]);

println("Keys of b are " + keys(b));

c = { 'one' : { 'two' : 2 }};

println(c['one']['two']);

// Linked maps (keys should be the same as insertion order)

li = {};
li['one'] = 'alan';
li['two'] = 'fred';
li['alpha'] = 'three';

k = keys(li);

assert(k[0] == 'one');
assert(k[1] == 'two');
assert(k[2] == 'alpha');

// json parsing should preserve order

j = '{ "one" : 1 , "two" : 2, "alpha" : 3 }';
bb = fromjson(j);
println(bb);
kbb = keys(bb);
assert(kbb[0] == 'one');
assert(kbb[1] == 'two');
assert(kbb[2] == 'alpha');


// How about this?

d <-- "asset/abc";
println(d['_id']);
d['Location'] = 'A different location';
println("New location is " + d['Location']);


d --> "asset/abc2";

println("After pushing, d is " + d);

// Test 2d maps
mapParams = {}; 
mapParams["v1"] = 1; 
mapParams["v2"] = 2; 
mapParams["a"]["b"] = 3; 
mapParams["a"]["c"] = 4;

assert(mapParams["v1"] == 1);
assert(mapParams["v2"] == 2);
assert(mapParams["a"]["b"] == 3);
assert(mapParams["a"]["c"] == 4);

// Test remove

x = {};
x['alan'] = 1;
x['fred'] = 2;
assert(size(keys(x)) == 2);
remove(x, 'alan');
assert(size(keys(x)) == 1);
assert(x['alan'] == null);
