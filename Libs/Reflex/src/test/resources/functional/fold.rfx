/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2011-2016 Incapture Technologies LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Some attempts at functional programming in Reflex
// Specifically allow us to implement 
// map, filter and fold

def totalFn(total, x)
      return total + x;
end

def multFn(total, x)
      return total * x;
end

input = [ 1, 2, 3, 4, 5];
res = fold(totalFn, 0, input);
res2 = fold(multFn, 1, input);

println("Sum of " + input + " is " + res);
println("Mult of " + input + " is " + res2);

assert(res == 15);
assert(res2 == 120);

def matrixPlayFn(total, row, column, value)
	if (typeof(value) == 'number' || typeof(value) == 'integer') do
	   if (row % 2 == 0) do
	       total = total + value;
	   end
	end
	return total;
end

matrix = [ - ];
for i = 0 to 10 do
   matrix[i,0] = i * 2;
end

res = fold(matrixPlayFn, 0, matrix);

println("Matrix in which all even rows are added");
println(matrix);
println("Result is " + res);
assert(res == 60);
