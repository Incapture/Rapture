/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2011-2016 Incapture Technologies LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
//
// Copyright (C) 2011-2012 Incapture Technologies LLC
//
// This is an autogenerated license statement. When copyright notices appear below
// this one that copyright supercedes this statement.
//
// Unless required by applicable law or agreed to in writing, software is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.
//
// Unless explicit permission obtained in writing this software cannot be distributed.
//

// Test the RaptureURI module

import raptureUriModule as uri;
println ($uri.about());


try do
  println("This is illegal");
  testUri = $uri.raptureURI("foo://");
  assert (testUri+" That should not have succeeded", false);
end
catch e do
  println("Expected");
end

println("This is legal");

testUri = $uri.raptureURI(2.0);
assert ($uri.getAuthority(testUri) == '2.0');

testUri = $uri.raptureURI("series://foo/bar/baz@1#2$3");
assert ($uri.getScheme(testUri) == 'series');
assert ($uri.getAuthority(testUri) == 'foo');
assert ($uri.getDocPath(testUri) == 'bar/baz');
assert ($uri.getElement(testUri) == '2');
assert ($uri.getAttribute(testUri) == '3');
assert ($uri.getVersion(testUri) == '1');

testUri = $uri.raptureURI("script://u/v/w/x/y/z");
assert ($uri.getScheme(testUri) == 'script');
assert ($uri.getAuthority(testUri) == 'u');
assert ($uri.getDocPath(testUri) == 'v/w/x/y/z');
assert ($uri.getElement(testUri) == null);
assert ($uri.getAttribute(testUri) == null);
assert ($uri.getVersion(testUri) == null);

testUri = $uri.raptureURI("blob://foo/bar/baz#brown");
assert ($uri.getScheme(testUri) == 'blob');
assert ($uri.getAuthority(testUri) == 'foo');
assert ($uri.getDocPath(testUri) == 'bar/baz');
assert ($uri.getElement(testUri) == 'brown');
assert ($uri.getAttribute(testUri) == null);
assert ($uri.getVersion(testUri) == null);

testUri = $uri.raptureURI("document://foo/bar/baz");
assert ($uri.getScheme(testUri) == 'document');
assert ($uri.getAuthority(testUri) == 'foo');
assert ($uri.getDocPath(testUri) == 'bar/baz');

return testUri;
