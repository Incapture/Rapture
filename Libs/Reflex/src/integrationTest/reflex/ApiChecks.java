/**
 * Copyright (C) 2011-2013 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package reflex;

import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.CommonTreeNodeStream;
import org.junit.Test;

import rapture.common.client.HttpLoginApi;
import rapture.common.client.HttpUserApi;
import rapture.common.client.ScriptClient;
import rapture.common.client.SimpleCredentialsProvider;
import rapture.common.version.ApiVersion;
import reflex.debug.ReflexPrintingDebugger;
import reflex.node.ReflexNode;

public class ApiChecks {
    @Test
    public void runApiTest() {
        try {
            runTestFor("println('version inside is ' + #user.getServerApiVersion()); return #admin.getAuthority('alan'); ");
        } catch (RecognitionException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    private void runTestFor(String script) throws RecognitionException {
        ReflexLexer lexer = new ReflexLexer();
        lexer.setCharStream(new ANTLRStringStream(script));
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        ReflexParser parser = new ReflexParser(tokens);
        CommonTree tree = (CommonTree) parser.parse().getTree();

        /*
         * DOTTreeGenerator gen = new DOTTreeGenerator(); StringTemplate st =
         * gen.toDOT(tree); System.out.println(st);
         */

        CommonTreeNodeStream nodes = new CommonTreeNodeStream(tree);
        ReflexTreeWalker walker = new ReflexTreeWalker(nodes, parser.languageRegistry);
        HttpLoginApi loginApi = new HttpLoginApi("http://localhost:8665/rapture", new SimpleCredentialsProvider("rapture", "rapture"));
        loginApi.login();
        HttpUserApi userApi = new HttpUserApi(loginApi);
        ApiVersion version = userApi.getServerApiVersion();
        System.out.println("version is " + version.getMajor() + ":" + version.getMinor());

        walker.getReflexHandler().setApi(new ScriptClient(loginApi));

        ReflexNode returned = walker.walk();
        System.out.println(returned == null ? "null" : returned.evaluateWithoutScope(new ReflexPrintingDebugger()));
    }
}
