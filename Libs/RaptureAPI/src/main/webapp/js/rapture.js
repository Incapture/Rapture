// Autogenerated Javascript API for Rapture
//

(function($){

	$.fn.raptureSettings = [];
	var _aoSettings = $.fn.raptureSettings;

	$.fn.raptureExt = {};
	var _oExt = $.fn.raptureExt;

	function _genCall(prefix, fnname, params, callback) {
	        params.context = _oExt.context;
	        var realparams = JSON.stringify(params);
	        $.post("/" + prefix.toLowerCase(), {
	              FUNCTION: fnname.toUpperCase(),
	              PARAMS: realparams },
	              function(data) {
	                   callback(data);
	              },
	              "json");
	};
	
	function _login(password, callback) {
		// We already have a session, now create and update the context for all
		// other calls
		// We pass in to validateUser the following
		// partition, user, hashPassword, session (session comes from the other
		// bit)
		// The hashPassword is MD5(MD5(password) + ":" + salty);
		var hashPassword = $.md5(password);
		var combinedBit = hashPassword + ":" + _oExt.session.salt;
		var senderPassword = $.md5(combinedBit);

		var sendParams = { 
                       "user" : _oExt.username, 
                       "digest" : senderPassword, 
                       "context" : _oExt.session.contextId };
		var parms = JSON.stringify(sendParams);

 		$.post("/login", 
                   { FUNCTION: "LOGIN", 
                     PARAMS: parms }, 
                    function(data) {
          	        _oExt.context = data.response;
          	        callback(true);
                    }, "json");
	};
	
    $.extend({
        rapture: {
        // Function for setEmphemeralRepository
        setEmphemeralRepository: function(config, callback) {
                    var callParams = {};
                       callParams.config = config;
                    var theName = "setEmphemeralRepository";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for setConfigRepository
        setConfigRepository: function(config, callback) {
                    var callParams = {};
                       callParams.config = config;
                    var theName = "setConfigRepository";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for setSettingsRepository
        setSettingsRepository: function(config, callback) {
                    var callParams = {};
                       callParams.config = config;
                    var theName = "setSettingsRepository";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for restartBootstrap
        restartBootstrap: function(, callback) {
                    var callParams = {};
                    var theName = "restartBootstrap";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for addScriptClass
        addScriptClass: function(keyword,className, callback) {
                    var callParams = {};
                       callParams.keyword = keyword;
                       callParams.className = className;
                    var theName = "addScriptClass";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for getScriptClasses
        getScriptClasses: function(, callback) {
                    var callParams = {};
                    var theName = "getScriptClasses";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for removeScriptClass
        removeScriptClass: function(keyword, callback) {
                    var callParams = {};
                       callParams.keyword = keyword;
                    var theName = "removeScriptClass";
                    _genCall("Bootstrap", theName, callParams, callback);
        },
        // Function for createScript
        createScript: function(partition,name,language,purpose,script, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                       callParams.language = language;
                       callParams.purpose = purpose;
                       callParams.script = script;
                    var theName = "createScript";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for deleteScript
        deleteScript: function(partition,name, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                    var theName = "deleteScript";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for getScriptNames
        getScriptNames: function(partition, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                    var theName = "getScriptNames";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for getScript
        getScript: function(partition,name, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                    var theName = "getScript";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for putScript
        putScript: function(partition,script, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.script = script;
                    var theName = "putScript";
                    _genCall("Script", theName, callParams, callback);
        },
        // Function for getLockProvidersForPartition
        getLockProvidersForPartition: function(partition, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                    var theName = "getLockProvidersForPartition";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for createLockProvider
        createLockProvider: function(partition,lockName,config,pathPosition, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.lockName = lockName;
                       callParams.config = config;
                       callParams.pathPosition = pathPosition;
                    var theName = "createLockProvider";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for getLockProvider
        getLockProvider: function(partition,lockName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.lockName = lockName;
                    var theName = "getLockProvider";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for deleteLockProvider
        deleteLockProvider: function(partition,lockName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.lockName = lockName;
                    var theName = "deleteLockProvider";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for acquireLock
        acquireLock: function(partition,lockProvider,lockName,secondsToWait,secondsToKeep, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.lockProvider = lockProvider;
                       callParams.lockName = lockName;
                       callParams.secondsToWait = secondsToWait;
                       callParams.secondsToKeep = secondsToKeep;
                    var theName = "acquireLock";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for releaseLock
        releaseLock: function(partition,lockProvider,lockName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.lockProvider = lockProvider;
                       callParams.lockName = lockName;
                    var theName = "releaseLock";
                    _genCall("Lock", theName, callParams, callback);
        },
        // Function for getQueuesForPartition
        getQueuesForPartition: function(partition, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                    var theName = "getQueuesForPartition";
                    _genCall("Queue", theName, callParams, callback);
        },
        // Function for createQueue
        createQueue: function(partition,queueName,config, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.queueName = queueName;
                       callParams.config = config;
                    var theName = "createQueue";
                    _genCall("Queue", theName, callParams, callback);
        },
        // Function for getQueue
        getQueue: function(partition,queueName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.queueName = queueName;
                    var theName = "getQueue";
                    _genCall("Queue", theName, callParams, callback);
        },
        // Function for deleteQueue
        deleteQueue: function(partition,queueName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.queueName = queueName;
                    var theName = "deleteQueue";
                    _genCall("Queue", theName, callParams, callback);
        },
        // Function for putItemOnQueue
        putItemOnQueue: function(partition,queueName,task, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.queueName = queueName;
                       callParams.task = task;
                    var theName = "putItemOnQueue";
                    _genCall("Queue", theName, callParams, callback);
        },
        // Function for startCalculationEngine
        startCalculationEngine: function(, callback) {
                    var callParams = {};
                    var theName = "startCalculationEngine";
                    _genCall("Calc", theName, callParams, callback);
        },
        // Function for getProcessGroups
        getProcessGroups: function(, callback) {
                    var callParams = {};
                    var theName = "getProcessGroups";
                    _genCall("Calc", theName, callParams, callback);
        },
        // Function for createProcessGroup
        createProcessGroup: function(name,autoAssign, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.autoAssign = autoAssign;
                    var theName = "createProcessGroup";
                    _genCall("Calc", theName, callParams, callback);
        },
        // Function for deleteProcessGroup
        deleteProcessGroup: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "deleteProcessGroup";
                    _genCall("Calc", theName, callParams, callback);
        },
        // Function for getProcessGroup
        getProcessGroup: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "getProcessGroup";
                    _genCall("Calc", theName, callParams, callback);
        },
        // Function for addQueueToProcessGroup
        addQueueToProcessGroup: function(processGroup,partition,queueName, callback) {
                    var callParams = {};
                       callParams.processGroup = processGroup;
                       callParams.partition = partition;
                       callParams.queueName = queueName;
                    var theName = "addQueueToProcessGroup";
                    _genCall("Calc", theName, callParams, callback);
        },
        // Function for removeQueueFromProcessGroup
        removeQueueFromProcessGroup: function(processGroup,partition,queueName, callback) {
                    var callParams = {};
                       callParams.processGroup = processGroup;
                       callParams.partition = partition;
                       callParams.queueName = queueName;
                    var theName = "removeQueueFromProcessGroup";
                    _genCall("Calc", theName, callParams, callback);
        },
        // Function for getProcessInstancesForGroup
        getProcessInstancesForGroup: function(processGroupName, callback) {
                    var callParams = {};
                       callParams.processGroupName = processGroupName;
                    var theName = "getProcessInstancesForGroup";
                    _genCall("Calc", theName, callParams, callback);
        },
        // Function for createProcessInstance
        createProcessInstance: function(instanceName,processGroup, callback) {
                    var callParams = {};
                       callParams.instanceName = instanceName;
                       callParams.processGroup = processGroup;
                    var theName = "createProcessInstance";
                    _genCall("Calc", theName, callParams, callback);
        },
        // Function for updateProcessInstance
        updateProcessInstance: function(instanceId,tasksHandled, callback) {
                    var callParams = {};
                       callParams.instanceId = instanceId;
                       callParams.tasksHandled = tasksHandled;
                    var theName = "updateProcessInstance";
                    _genCall("Calc", theName, callParams, callback);
        },
        // Function for stopProcessInstance
        stopProcessInstance: function(instanceId, callback) {
                    var callParams = {};
                       callParams.instanceId = instanceId;
                    var theName = "stopProcessInstance";
                    _genCall("Calc", theName, callParams, callback);
        },
        // Function for createIndex
        createIndex: function(partition,indexName,config, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.indexName = indexName;
                       callParams.config = config;
                    var theName = "createIndex";
                    _genCall("Index", theName, callParams, callback);
        },
        // Function for getIndicesForPartition
        getIndicesForPartition: function(partition, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                    var theName = "getIndicesForPartition";
                    _genCall("Index", theName, callParams, callback);
        },
        // Function for getIndex
        getIndex: function(partition,indexName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.indexName = indexName;
                    var theName = "getIndex";
                    _genCall("Index", theName, callParams, callback);
        },
        // Function for deleteIndex
        deleteIndex: function(partition,indexName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.indexName = indexName;
                    var theName = "deleteIndex";
                    _genCall("Index", theName, callParams, callback);
        },
        // Function for addIndexToType
        addIndexToType: function(partition,indexName,scriptName,typeName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.indexName = indexName;
                       callParams.scriptName = scriptName;
                       callParams.typeName = typeName;
                    var theName = "addIndexToType";
                    _genCall("Index", theName, callParams, callback);
        },
        // Function for removeIndexFromType
        removeIndexFromType: function(partition,indexName,scriptName,typeName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.indexName = indexName;
                       callParams.scriptName = scriptName;
                       callParams.typeName = typeName;
                    var theName = "removeIndexFromType";
                    _genCall("Index", theName, callParams, callback);
        },
        // Function for rebuildIndex
        rebuildIndex: function(partition,perspective,indexName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.perspective = perspective;
                       callParams.indexName = indexName;
                    var theName = "rebuildIndex";
                    _genCall("Index", theName, callParams, callback);
        },
        // Function for createFullTextIndex
        createFullTextIndex: function(partition,indexName,config, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.indexName = indexName;
                       callParams.config = config;
                    var theName = "createFullTextIndex";
                    _genCall("FullTextIndex", theName, callParams, callback);
        },
        // Function for getFullTextIndicesForPartition
        getFullTextIndicesForPartition: function(partition, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                    var theName = "getFullTextIndicesForPartition";
                    _genCall("FullTextIndex", theName, callParams, callback);
        },
        // Function for getFullTextIndex
        getFullTextIndex: function(partition,indexName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.indexName = indexName;
                    var theName = "getFullTextIndex";
                    _genCall("FullTextIndex", theName, callParams, callback);
        },
        // Function for deleteFullTextIndex
        deleteFullTextIndex: function(partition,indexName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.indexName = indexName;
                    var theName = "deleteFullTextIndex";
                    _genCall("FullTextIndex", theName, callParams, callback);
        },
        // Function for addFullTextIndexToType
        addFullTextIndexToType: function(partition,indexName,scriptName,typeName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.indexName = indexName;
                       callParams.scriptName = scriptName;
                       callParams.typeName = typeName;
                    var theName = "addFullTextIndexToType";
                    _genCall("FullTextIndex", theName, callParams, callback);
        },
        // Function for removeFullTextIndexFromType
        removeFullTextIndexFromType: function(partition,indexName,scriptName,typeName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.indexName = indexName;
                       callParams.scriptName = scriptName;
                       callParams.typeName = typeName;
                    var theName = "removeFullTextIndexFromType";
                    _genCall("FullTextIndex", theName, callParams, callback);
        },
        // Function for rebuildFullTextIndex
        rebuildFullTextIndex: function(partition,perspective,indexName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.perspective = perspective;
                       callParams.indexName = indexName;
                    var theName = "rebuildFullTextIndex";
                    _genCall("FullTextIndex", theName, callParams, callback);
        },
        // Function for getSystemProperties
        getSystemProperties: function(keys, callback) {
                    var callParams = {};
                       callParams.keys = keys;
                    var theName = "getSystemProperties";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getRepoConfig
        getRepoConfig: function(, callback) {
                    var callParams = {};
                    var theName = "getRepoConfig";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getSessionsForUser
        getSessionsForUser: function(user, callback) {
                    var callParams = {};
                       callParams.user = user;
                    var theName = "getSessionsForUser";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getPartition
        getPartition: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "getPartition";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getPartitions
        getPartitions: function(, callback) {
                    var callParams = {};
                    var theName = "getPartitions";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for createPartition
        createPartition: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "createPartition";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for createType
        createType: function(partition,name,configuration, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                       callParams.configuration = configuration;
                    var theName = "createType";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for setTriggerQueueForType
        setTriggerQueueForType: function(partition,name,triggerQueue, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                       callParams.triggerQueue = triggerQueue;
                    var theName = "setTriggerQueueForType";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getTypesForPartition
        getTypesForPartition: function(partition, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                    var theName = "getTypesForPartition";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getType
        getType: function(partition,name, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                    var theName = "getType";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for dropType
        dropType: function(partition,name, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                    var theName = "dropType";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getPerspectives
        getPerspectives: function(partition,typeName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                    var theName = "getPerspectives";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getTags
        getTags: function(partition,typeName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                    var theName = "getTags";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for deleteUser
        deleteUser: function(userName, callback) {
                    var callParams = {};
                       callParams.userName = userName;
                    var theName = "deleteUser";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for addUser
        addUser: function(userName,description,hashPassword, callback) {
                    var callParams = {};
                       callParams.userName = userName;
                       callParams.description = description;
                       callParams.hashPassword = hashPassword;
                    var theName = "addUser";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for generateApiUser
        generateApiUser: function(prefix,description, callback) {
                    var callParams = {};
                       callParams.prefix = prefix;
                       callParams.description = description;
                    var theName = "generateApiUser";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for resetUserPassword
        resetUserPassword: function(userName,newHashPassword, callback) {
                    var callParams = {};
                       callParams.userName = userName;
                       callParams.newHashPassword = newHashPassword;
                    var theName = "resetUserPassword";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getRemotes
        getRemotes: function(, callback) {
                    var callParams = {};
                    var theName = "getRemotes";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for addRemote
        addRemote: function(name,description,url,apiKey, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.description = description;
                       callParams.url = url;
                       callParams.apiKey = apiKey;
                    var theName = "addRemote";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for removeRemote
        removeRemote: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "removeRemote";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for updateRemoteApiKey
        updateRemoteApiKey: function(name,apiKey, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.apiKey = apiKey;
                    var theName = "updateRemoteApiKey";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for setRemoteForType
        setRemoteForType: function(partition,typeName,perspective,remote,remotePartition,remoteTypeName,remotePerspective, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                       callParams.perspective = perspective;
                       callParams.remote = remote;
                       callParams.remotePartition = remotePartition;
                       callParams.remoteTypeName = remoteTypeName;
                       callParams.remotePerspective = remotePerspective;
                    var theName = "setRemoteForType";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for clearRemoteForType
        clearRemoteForType: function(partition,typeName,perspective, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                       callParams.perspective = perspective;
                    var theName = "clearRemoteForType";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for pullPerspective
        pullPerspective: function(partition,typeName,perspective, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                       callParams.perspective = perspective;
                    var theName = "pullPerspective";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for setOperationOnType
        setOperationOnType: function(partition,typeName,opName,paramDef,scriptName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                       callParams.opName = opName;
                       callParams.paramDef = paramDef;
                       callParams.scriptName = scriptName;
                    var theName = "setOperationOnType";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for removeOperationFromType
        removeOperationFromType: function(partition,typeName,opName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                       callParams.opName = opName;
                    var theName = "removeOperationFromType";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getOperationsForType
        getOperationsForType: function(partition,typeName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                    var theName = "getOperationsForType";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getOperationForType
        getOperationForType: function(partition,typeName,opName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                       callParams.opName = opName;
                    var theName = "getOperationForType";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getView
        getView: function(partition,name, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                    var theName = "getView";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getViewsForPartition
        getViewsForPartition: function(partition, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                    var theName = "getViewsForPartition";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for dropView
        dropView: function(partition,name, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                    var theName = "dropView";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for createView
        createView: function(partition,name,filterFn,mapFn,parameterSpec,columnSpec, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                       callParams.filterFn = filterFn;
                       callParams.mapFn = mapFn;
                       callParams.parameterSpec = parameterSpec;
                       callParams.columnSpec = columnSpec;
                    var theName = "createView";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for addTemplate
        addTemplate: function(name,template,overwrite, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.template = template;
                       callParams.overwrite = overwrite;
                    var theName = "addTemplate";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for runTemplate
        runTemplate: function(name,params, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.params = params;
                    var theName = "runTemplate";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getTemplate
        getTemplate: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "getTemplate";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for cloneType
        cloneType: function(srcPartition,srcType,srcPerspective,targPartition,targType,targPerspective,wipe, callback) {
                    var callParams = {};
                       callParams.srcPartition = srcPartition;
                       callParams.srcType = srcType;
                       callParams.srcPerspective = srcPerspective;
                       callParams.targPartition = targPartition;
                       callParams.targType = targType;
                       callParams.targPerspective = targPerspective;
                       callParams.wipe = wipe;
                    var theName = "cloneType";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for addIPToWhiteList
        addIPToWhiteList: function(ipAddress, callback) {
                    var callParams = {};
                       callParams.ipAddress = ipAddress;
                    var theName = "addIPToWhiteList";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for removeIPFromWhiteList
        removeIPFromWhiteList: function(ipAddress, callback) {
                    var callParams = {};
                       callParams.ipAddress = ipAddress;
                    var theName = "removeIPFromWhiteList";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getIPWhiteList
        getIPWhiteList: function(, callback) {
                    var callParams = {};
                    var theName = "getIPWhiteList";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for runBatchScript
        runBatchScript: function(script, callback) {
                    var callParams = {};
                       callParams.script = script;
                    var theName = "runBatchScript";
                    _genCall("Admin", theName, callParams, callback);
        },
        // Function for getIdGenConfigs
        getIdGenConfigs: function(, callback) {
                    var callParams = {};
                    var theName = "getIdGenConfigs";
                    _genCall("IdGen", theName, callParams, callback);
        },
        // Function for createIdGen
        createIdGen: function(partition,name,config, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                       callParams.config = config;
                    var theName = "createIdGen";
                    _genCall("IdGen", theName, callParams, callback);
        },
        // Function for deleteIdGen
        deleteIdGen: function(partition,name, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                    var theName = "deleteIdGen";
                    _genCall("IdGen", theName, callParams, callback);
        },
        // Function for setIdGen
        setIdGen: function(partition,name,count, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                       callParams.count = count;
                    var theName = "setIdGen";
                    _genCall("IdGen", theName, callParams, callback);
        },
        // Function for nextIds
        nextIds: function(partition,name,num, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                       callParams.num = num;
                    var theName = "nextIds";
                    _genCall("IdGen", theName, callParams, callback);
        },
        // Function for getEntitlements
        getEntitlements: function(, callback) {
                    var callParams = {};
                    var theName = "getEntitlements";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for getEntitlementGroups
        getEntitlementGroups: function(, callback) {
                    var callParams = {};
                    var theName = "getEntitlementGroups";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for addEntitlement
        addEntitlement: function(name,initialGroup, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.initialGroup = initialGroup;
                    var theName = "addEntitlement";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for addGroupToEntitlement
        addGroupToEntitlement: function(name,group, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.group = group;
                    var theName = "addGroupToEntitlement";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for removeGroupFromEntitlement
        removeGroupFromEntitlement: function(name,group, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.group = group;
                    var theName = "removeGroupFromEntitlement";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for deleteEntitlement
        deleteEntitlement: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "deleteEntitlement";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for deleteEntitlementGroup
        deleteEntitlementGroup: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "deleteEntitlementGroup";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for addEntitlementGroup
        addEntitlementGroup: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "addEntitlementGroup";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for addUserToEntitlementGroup
        addUserToEntitlementGroup: function(name,user, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.user = user;
                    var theName = "addUserToEntitlementGroup";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for removeUserFromEntitlementGroup
        removeUserFromEntitlementGroup: function(name,user, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.user = user;
                    var theName = "removeUserFromEntitlementGroup";
                    _genCall("Entitlement", theName, callParams, callback);
        },
        // Function for getCommitHistory
        getCommitHistory: function(partition,typeName,perspective, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                       callParams.perspective = perspective;
                    var theName = "getCommitHistory";
                    _genCall("Commit", theName, callParams, callback);
        },
        // Function for getCommitsSince
        getCommitsSince: function(partition,typeName,perspective,commitReference, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                       callParams.perspective = perspective;
                       callParams.commitReference = commitReference;
                    var theName = "getCommitsSince";
                    _genCall("Commit", theName, callParams, callback);
        },
        // Function for getDocumentObject
        getDocumentObject: function(partition,typeName,reference, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                       callParams.reference = reference;
                    var theName = "getDocumentObject";
                    _genCall("Commit", theName, callParams, callback);
        },
        // Function for getTreeObject
        getTreeObject: function(partition,typeName,reference, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                       callParams.reference = reference;
                    var theName = "getTreeObject";
                    _genCall("Commit", theName, callParams, callback);
        },
        // Function for getCommitObject
        getCommitObject: function(partition,typeName,reference, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                       callParams.reference = reference;
                    var theName = "getCommitObject";
                    _genCall("Commit", theName, callParams, callback);
        },
        // Function for getWhoAmI
        getWhoAmI: function(, callback) {
                    var callParams = {};
                    var theName = "getWhoAmI";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for updateMyDescription
        updateMyDescription: function(description, callback) {
                    var callParams = {};
                       callParams.description = description;
                    var theName = "updateMyDescription";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for changeMyPassword
        changeMyPassword: function(oldHashPassword,newHashPassword, callback) {
                    var callParams = {};
                       callParams.oldHashPassword = oldHashPassword;
                       callParams.newHashPassword = newHashPassword;
                    var theName = "changeMyPassword";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for info
        info: function(, callback) {
                    var callParams = {};
                    var theName = "info";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for getContextInfo
        getContextInfo: function(, callback) {
                    var callParams = {};
                    var theName = "getContextInfo";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for setContextPartition
        setContextPartition: function(partitionName, callback) {
                    var callParams = {};
                       callParams.partitionName = partitionName;
                    var theName = "setContextPartition";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for setContextPerspective
        setContextPerspective: function(perspective, callback) {
                    var callParams = {};
                       callParams.perspective = perspective;
                    var theName = "setContextPerspective";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for getContent
        getContent: function(displayName, callback) {
                    var callParams = {};
                       callParams.displayName = displayName;
                    var theName = "getContent";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for getContentP
        getContentP: function(partitionName,perspective,displayName, callback) {
                    var callParams = {};
                       callParams.partitionName = partitionName;
                       callParams.perspective = perspective;
                       callParams.displayName = displayName;
                    var theName = "getContentP";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for getDocs
        getDocs: function(partitionName,perspective,displayNames, callback) {
                    var callParams = {};
                       callParams.partitionName = partitionName;
                       callParams.perspective = perspective;
                       callParams.displayNames = displayNames;
                    var theName = "getDocs";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for batchExist
        batchExist: function(partitionName,perspective,displayNames, callback) {
                    var callParams = {};
                       callParams.partitionName = partitionName;
                       callParams.perspective = perspective;
                       callParams.displayNames = displayNames;
                    var theName = "batchExist";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for putDoc
        putDoc: function(displayName,comment,content, callback) {
                    var callParams = {};
                       callParams.displayName = displayName;
                       callParams.comment = comment;
                       callParams.content = content;
                    var theName = "putDoc";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for putContentP
        putContentP: function(partition,perspective,displayName,comment,content, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.perspective = perspective;
                       callParams.displayName = displayName;
                       callParams.comment = comment;
                       callParams.content = content;
                    var theName = "putContentP";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for putContentV
        putContentV: function(partition,perspective,displayNames,comment,content, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.perspective = perspective;
                       callParams.displayNames = displayNames;
                       callParams.comment = comment;
                       callParams.content = content;
                    var theName = "putContentV";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for deleteContent
        deleteContent: function(displayName,comment, callback) {
                    var callParams = {};
                       callParams.displayName = displayName;
                       callParams.comment = comment;
                    var theName = "deleteContent";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for deleteContentP
        deleteContentP: function(partition,perspective,displayName,comment, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.perspective = perspective;
                       callParams.displayName = displayName;
                       callParams.comment = comment;
                    var theName = "deleteContentP";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for createTag
        createTag: function(typeName,tagName, callback) {
                    var callParams = {};
                       callParams.typeName = typeName;
                       callParams.tagName = tagName;
                    var theName = "createTag";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for getTagContent
        getTagContent: function(tagName,displayName, callback) {
                    var callParams = {};
                       callParams.tagName = tagName;
                       callParams.displayName = displayName;
                    var theName = "getTagContent";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for deleteTag
        deleteTag: function(typeName,tagName, callback) {
                    var callParams = {};
                       callParams.typeName = typeName;
                       callParams.tagName = tagName;
                    var theName = "deleteTag";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for getCommentary
        getCommentary: function(displayName, callback) {
                    var callParams = {};
                       callParams.displayName = displayName;
                    var theName = "getCommentary";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for addCommentary
        addCommentary: function(displayName,commentKey,description,ref, callback) {
                    var callParams = {};
                       callParams.displayName = displayName;
                       callParams.commentKey = commentKey;
                       callParams.description = description;
                       callParams.ref = ref;
                    var theName = "addCommentary";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for runView
        runView: function(viewName,viewContext,params, callback) {
                    var callParams = {};
                       callParams.viewName = viewName;
                       callParams.viewContext = viewContext;
                       callParams.params = params;
                    var theName = "runView";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for runTextSearch
        runTextSearch: function(indexName,searchText,maxCount, callback) {
                    var callParams = {};
                       callParams.indexName = indexName;
                       callParams.searchText = searchText;
                       callParams.maxCount = maxCount;
                    var theName = "runTextSearch";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for runOperation
        runOperation: function(typeName,operation,ctx,params, callback) {
                    var callParams = {};
                       callParams.typeName = typeName;
                       callParams.operation = operation;
                       callParams.ctx = ctx;
                       callParams.params = params;
                    var theName = "runOperation";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for runFilterCubeView
        runFilterCubeView: function(partition,typeName,perspective,filterFn,filterParams,groupFields,columnFields, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                       callParams.perspective = perspective;
                       callParams.filterFn = filterFn;
                       callParams.filterParams = filterParams;
                       callParams.groupFields = groupFields;
                       callParams.columnFields = columnFields;
                    var theName = "runFilterCubeView";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for createDNCursor
        createDNCursor: function(partition,typeName,count, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                       callParams.count = count;
                    var theName = "createDNCursor";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for getNextDNCursor
        getNextDNCursor: function(cursor,count, callback) {
                    var callParams = {};
                       callParams.cursor = cursor;
                       callParams.count = count;
                    var theName = "getNextDNCursor";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for runNativeQuery
        runNativeQuery: function(partition,typeName,repoType,queryParams, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.typeName = typeName;
                       callParams.repoType = repoType;
                       callParams.queryParams = queryParams;
                    var theName = "runNativeQuery";
                    _genCall("User", theName, callParams, callback);
        },
        // Function for createSimpleJob
        createSimpleJob: function(group,name,partition,script,interval,every,maxCount,jobParams, callback) {
                    var callParams = {};
                       callParams.group = group;
                       callParams.name = name;
                       callParams.partition = partition;
                       callParams.script = script;
                       callParams.interval = interval;
                       callParams.every = every;
                       callParams.maxCount = maxCount;
                       callParams.jobParams = jobParams;
                    var theName = "createSimpleJob";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for createCronJob
        createCronJob: function(group,name,partition,script,cronExpression,jobParams, callback) {
                    var callParams = {};
                       callParams.group = group;
                       callParams.name = name;
                       callParams.partition = partition;
                       callParams.script = script;
                       callParams.cronExpression = cronExpression;
                       callParams.jobParams = jobParams;
                    var theName = "createCronJob";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for createCalendarJob
        createCalendarJob: function(group,name,partition,script,interval,count,jobParams, callback) {
                    var callParams = {};
                       callParams.group = group;
                       callParams.name = name;
                       callParams.partition = partition;
                       callParams.script = script;
                       callParams.interval = interval;
                       callParams.count = count;
                       callParams.jobParams = jobParams;
                    var theName = "createCalendarJob";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for createDailyIntervalJob
        createDailyIntervalJob: function(group,name,partition,script,daysOfWeek,startTimeOfDay,endTimeOfDay,repeatCount,repeatInterval,intervalType,jobParams, callback) {
                    var callParams = {};
                       callParams.group = group;
                       callParams.name = name;
                       callParams.partition = partition;
                       callParams.script = script;
                       callParams.daysOfWeek = daysOfWeek;
                       callParams.startTimeOfDay = startTimeOfDay;
                       callParams.endTimeOfDay = endTimeOfDay;
                       callParams.repeatCount = repeatCount;
                       callParams.repeatInterval = repeatInterval;
                       callParams.intervalType = intervalType;
                       callParams.jobParams = jobParams;
                    var theName = "createDailyIntervalJob";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for deleteJob
        deleteJob: function(group,name, callback) {
                    var callParams = {};
                       callParams.group = group;
                       callParams.name = name;
                    var theName = "deleteJob";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for getJobDetails
        getJobDetails: function(, callback) {
                    var callParams = {};
                    var theName = "getJobDetails";
                    _genCall("Schedule", theName, callParams, callback);
        },
        // Function for attachScriptToEvent
        attachScriptToEvent: function(partition,eventName,scriptName,performOnce, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.eventName = eventName;
                       callParams.scriptName = scriptName;
                       callParams.performOnce = performOnce;
                    var theName = "attachScriptToEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for getEvent
        getEvent: function(partition,eventName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.eventName = eventName;
                    var theName = "getEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for removeScriptFromEvent
        removeScriptFromEvent: function(partition,eventName,scriptName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.eventName = eventName;
                       callParams.scriptName = scriptName;
                    var theName = "removeScriptFromEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for fireEvent
        fireEvent: function(partition,eventName,displayName,eventContext, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.eventName = eventName;
                       callParams.displayName = displayName;
                       callParams.eventContext = eventContext;
                    var theName = "fireEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for removeEvent
        removeEvent: function(partition,eventName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.eventName = eventName;
                    var theName = "removeEvent";
                    _genCall("Event", theName, callParams, callback);
        },
        // Function for createAuditLog
        createAuditLog: function(name,config, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.config = config;
                    var theName = "createAuditLog";
                    _genCall("Audit", theName, callParams, callback);
        },
        // Function for deleteAuditLog
        deleteAuditLog: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "deleteAuditLog";
                    _genCall("Audit", theName, callParams, callback);
        },
        // Function for getAuditLog
        getAuditLog: function(name, callback) {
                    var callParams = {};
                       callParams.name = name;
                    var theName = "getAuditLog";
                    _genCall("Audit", theName, callParams, callback);
        },
        // Function for writeAuditEntry
        writeAuditEntry: function(name,category,level,message, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.category = category;
                       callParams.level = level;
                       callParams.message = message;
                    var theName = "writeAuditEntry";
                    _genCall("Audit", theName, callParams, callback);
        },
        // Function for getRecentLogEntries
        getRecentLogEntries: function(name,count, callback) {
                    var callParams = {};
                       callParams.name = name;
                       callParams.count = count;
                    var theName = "getRecentLogEntries";
                    _genCall("Audit", theName, callParams, callback);
        },
        // Function for postMailboxMessage
        postMailboxMessage: function(partition,category,content, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.category = category;
                       callParams.content = content;
                    var theName = "postMailboxMessage";
                    _genCall("Mailbox", theName, callParams, callback);
        },
        // Function for moveMailboxMessage
        moveMailboxMessage: function(partition,oldCategory,id,category, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.oldCategory = oldCategory;
                       callParams.id = id;
                       callParams.category = category;
                    var theName = "moveMailboxMessage";
                    _genCall("Mailbox", theName, callParams, callback);
        },
        // Function for setMailboxStorage
        setMailboxStorage: function(mailboxConfig,idGenConfig, callback) {
                    var callParams = {};
                       callParams.mailboxConfig = mailboxConfig;
                       callParams.idGenConfig = idGenConfig;
                    var theName = "setMailboxStorage";
                    _genCall("Mailbox", theName, callParams, callback);
        },
        // Function for getMailboxMessages
        getMailboxMessages: function(partition,category, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.category = category;
                    var theName = "getMailboxMessages";
                    _genCall("Mailbox", theName, callParams, callback);
        },
        // Function for getFields
        getFields: function(partition, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                    var theName = "getFields";
                    _genCall("Fields", theName, callParams, callback);
        },
        // Function for getFieldsList
        getFieldsList: function(partition,names, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.names = names;
                    var theName = "getFieldsList";
                    _genCall("Fields", theName, callParams, callback);
        },
        // Function for createField
        createField: function(partition,name,category,description, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                       callParams.category = category;
                       callParams.description = description;
                    var theName = "createField";
                    _genCall("Fields", theName, callParams, callback);
        },
        // Function for updateField
        updateField: function(partition,field, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.field = field;
                    var theName = "updateField";
                    _genCall("Fields", theName, callParams, callback);
        },
        // Function for deleteField
        deleteField: function(partition,name,category, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                       callParams.category = category;
                    var theName = "deleteField";
                    _genCall("Fields", theName, callParams, callback);
        },
        // Function for retrieveFieldsFromDocument
        retrieveFieldsFromDocument: function(partition,perspective,displayName,fields, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.perspective = perspective;
                       callParams.displayName = displayName;
                       callParams.fields = fields;
                    var theName = "retrieveFieldsFromDocument";
                    _genCall("Fields", theName, callParams, callback);
        },
        // Function for retrieveFieldsFromContent
        retrieveFieldsFromContent: function(partition,perspective,displayName,content,fields, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.perspective = perspective;
                       callParams.displayName = displayName;
                       callParams.content = content;
                       callParams.fields = fields;
                    var theName = "retrieveFieldsFromContent";
                    _genCall("Fields", theName, callParams, callback);
        },
        // Function for createBlobRepository
        createBlobRepository: function(partition,name,config, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                       callParams.config = config;
                    var theName = "createBlobRepository";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for getBlobRepositoryConfig
        getBlobRepositoryConfig: function(partition,name, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                    var theName = "getBlobRepositoryConfig";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for removeBlobRepository
        removeBlobRepository: function(partition,name,destroy, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.name = name;
                       callParams.destroy = destroy;
                    var theName = "removeBlobRepository";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for createBlobFromString
        createBlobFromString: function(partition,displayName,content,append, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.displayName = displayName;
                       callParams.content = content;
                       callParams.append = append;
                    var theName = "createBlobFromString";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for getBlob
        getBlob: function(partition,displayName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.displayName = displayName;
                    var theName = "getBlob";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for deleteBlob
        deleteBlob: function(partition,displayName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.displayName = displayName;
                    var theName = "deleteBlob";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for getBlobSize
        getBlobSize: function(partition,displayName, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.displayName = displayName;
                    var theName = "getBlobSize";
                    _genCall("Blob", theName, callParams, callback);
        },
        // Function for getBlobPart
        getBlobPart: function(partition,displayName,start,size, callback) {
                    var callParams = {};
                       callParams.partition = partition;
                       callParams.displayName = displayName;
                       callParams.start = start;
                       callParams.size = size;
                    var theName = "getBlobPart";
                    _genCall("Blob", theName, callParams, callback);
        }
    });
}
