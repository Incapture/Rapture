/**
 * Copyright (C) 2011-2015 Incapture Technologies LLC
 *
 * This is an autogenerated license statement. When copyright notices appear below
 * this one that copyright supercedes this statement.
 *
 * Unless required by applicable law or agreed to in writing, software is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 *
 * Unless explicit permission obtained in writing this software cannot be distributed.
 */
package rapture.dp.invocable.ftp.steps;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;

import rapture.common.CallingContext;
import rapture.common.RaptureURI;
import rapture.common.api.DecisionApi;
import rapture.common.dp.AbstractInvocable;
import rapture.common.dp.Steps;
import rapture.common.exception.ExceptionToString;
import rapture.common.impl.jackson.JacksonUtil;
import rapture.ftp.common.FTPConnection;
import rapture.ftp.common.FTPRequest;
import rapture.ftp.common.FTPRequest.Action;
import rapture.ftp.common.SFTPConnection;
import rapture.kernel.Kernel;
import rapture.kernel.dp.ExecutionContextUtil;

public class CheckFileExistsStep extends AbstractInvocable {
    private static final Logger log = Logger.getLogger(CopyFileStep.class);

    DecisionApi decision;
    public CheckFileExistsStep(String workerUri, String stepName) {
        super(workerUri, stepName);
        decision = Kernel.getDecision();
    }

    static String wasNotWas(Boolean flag) {
        return (flag) ? " was " : " was not ";
    }

    /**
     * FTP_CONFIGURATION is optional. If not set the arguments are assumed to be local EXIST_FILENAMES is a map of file names to Booleans, indicating whether
     * the file is expected or not
     */
    @Override
    public String invoke(CallingContext ctx) {
        String workerUri = getWorkerURI();
        String workOrderUri = new RaptureURI(workerUri).toShortString();
        try {
            decision.setContextLiteral(ctx, workOrderUri, "STEPNAME", getStepName());

            String configUri = StringUtils.stripToNull(decision.getContextValue(ctx, workOrderUri, "FTP_CONFIGURATION"));
            String filename = StringUtils.stripToNull(decision.getContextValue(ctx, workOrderUri, "EXIST_FILENAMES"));
            if (filename == null) {
                decision.setContextLiteral(ctx, workOrderUri, getStepName(), "No files to check");
                decision.setContextLiteral(ctx, workOrderUri, getStepName() + "Error", "");
                return getNextTransition();
            }

            Map<String, Object> files = JacksonUtil.objectFromJson(ExecutionContextUtil.evalTemplateECF(ctx, workOrderUri, filename, null), Map.class);

            FTPConnection connection = new SFTPConnection(configUri).setContext(ctx);
            String retval = getNextTransition();
            List<FTPRequest> requests = new ArrayList<>();
            int existsCount = 0;
            int failCount = 0;
            StringBuilder error = new StringBuilder();
            for (Entry<String, Object> e : files.entrySet()) {
                FTPRequest request = new FTPRequest(Action.EXISTS).setRemoteName(e.getKey());
                boolean exists = connection.doAction(request);
                if (!exists == ((Boolean) e.getValue())) {
                    retval = getFailTransition();
                    error.append(e.getKey()).append(wasNotWas(exists)).append("found but").append(wasNotWas((Boolean) e.getValue())).append("expected ");
                    failCount++;
                }
                requests.add(request);
            }
            decision.setContextLiteral(ctx, workOrderUri, getStepName(), "Located " + existsCount + " of " + files.size() + " files");
            String errMsg = error.toString();
            decision.setContextLiteral(ctx, workOrderUri, getStepName() + "Error", errMsg);
            decision.writeWorkflowAuditEntry(ctx, workerUri, errMsg, failCount > 0);
            return retval;
        } catch (Exception e) {
            decision.setContextLiteral(ctx, workOrderUri, getStepName(), "Unable to determine if files exist : " + e.getLocalizedMessage());
            decision.setContextLiteral(ctx, workOrderUri, getStepName() + "Error", ExceptionToString.summary(e));
            decision.writeWorkflowAuditEntry(ctx, getWorkerURI(),
                    "Problem in CheckFileExistsStep " + getStepName() + " - error is " + ExceptionToString.getRootCause(e).getLocalizedMessage(), true);
            return getErrorTransition();
        }
    }

    public static String getFailTransition() {
        return Steps.WAIT;
    }

}
